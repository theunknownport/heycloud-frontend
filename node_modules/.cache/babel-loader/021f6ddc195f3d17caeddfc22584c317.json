{"ast":null,"code":"import AuthService from \"../services/auth.service\";\nexport const register = (email, password, phone) => dispatch => {\n  return AuthService.register(email, password, phone).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/finn/Documents/heycloud-frontend/heycloud-frontend/src/actions/auth.js"],"names":["AuthService","register","email","password","phone","dispatch","then","response","type","REGISTER_SUCCESS","SET_MESSAGE","payload","data","message","Promise","resolve","error","toString","REGISTER_FAIL","reject","login","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT"],"mappings":"AAEA,OAAOA,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,KAAlB,KAA6BC,QAAD,IAAc;AAChE,SAAOL,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,KAAtC,EAA6CE,IAA7C,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEC;AADC,KAAD,CAAR;AAIAJ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEE,WADC;AAEPC,MAAAA,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAZI,EAaJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeK,IADhB,IAECI,KAAK,CAACT,QAAN,CAAeK,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAZ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEU;AADC,KAAD,CAAR;AAIAb,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEE,WADC;AAEPC,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACK,MAAR,EAAP;AACD,GA/BI,CAAP;AAiCD,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAAClB,KAAD,EAAQC,QAAR,KAAsBE,QAAD,IAAc;AACtD,SAAOL,WAAW,CAACoB,KAAZ,CAAkBlB,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CACJM,IAAD,IAAU;AACRP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEa,aADC;AAEPV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,IAAI,EAAEV;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeK,IADhB,IAECI,KAAK,CAACT,QAAN,CAAeK,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAZ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEe;AADC,KAAD,CAAR;AAIAlB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEE,WADC;AAEPC,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACK,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMK,MAAM,GAAG,MAAOnB,QAAD,IAAc;AACxCL,EAAAA,WAAW,CAACwB,MAAZ;AAEAnB,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEiB;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (email, password, phone) => (dispatch) => {\n  return AuthService.register(email, password, phone).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}