{"ast":null,"code":"var getRatio = function (element, target) {\n  var elementRect = element.getBoundingClientRect();\n  var targetRect = target.getBoundingClientRect();\n  var top = Math.max(targetRect.top, elementRect.top);\n  var left = Math.max(targetRect.left, elementRect.left);\n  var right = Math.min(targetRect.left + targetRect.width, elementRect.left + elementRect.width);\n  var bottom = Math.min(targetRect.top + targetRect.height, elementRect.top + elementRect.height);\n  var width = right - left;\n  var height = bottom - top;\n\n  if (left < right && top < bottom) {\n    var targetArea = targetRect.width * targetRect.height;\n    var entryArea = elementRect.width * elementRect.height;\n    var intersectionArea = width * height;\n    var intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  return 0;\n};\n/** @hidden */\n\n\nexport var intersect = function (element, candidates) {\n  var max = 0;\n  var result = null;\n  candidates.forEach(function (candidate) {\n    if (candidate && element) {\n      var ration = getRatio(element, candidate);\n\n      if (ration > max) {\n        max = ration;\n        result = candidate;\n      }\n    }\n  });\n  return result;\n};","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-draggable-common/dist/es/algorithms/intersect.js"],"names":["getRatio","element","target","elementRect","getBoundingClientRect","targetRect","top","Math","max","left","right","min","width","bottom","height","targetArea","entryArea","intersectionArea","intersectionRatio","Number","toFixed","intersect","candidates","result","forEach","candidate","ration"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACtC,MAAIC,WAAW,GAAGF,OAAO,CAACG,qBAAR,EAAlB;AACA,MAAIC,UAAU,GAAGH,MAAM,CAACE,qBAAP,EAAjB;AACA,MAAIE,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASH,UAAU,CAACC,GAApB,EAAyBH,WAAW,CAACG,GAArC,CAAV;AACA,MAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASH,UAAU,CAACI,IAApB,EAA0BN,WAAW,CAACM,IAAtC,CAAX;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACI,GAAL,CAASN,UAAU,CAACI,IAAX,GAAkBJ,UAAU,CAACO,KAAtC,EAA6CT,WAAW,CAACM,IAAZ,GAAmBN,WAAW,CAACS,KAA5E,CAAZ;AACA,MAAIC,MAAM,GAAGN,IAAI,CAACI,GAAL,CAASN,UAAU,CAACC,GAAX,GAAiBD,UAAU,CAACS,MAArC,EAA6CX,WAAW,CAACG,GAAZ,GAAkBH,WAAW,CAACW,MAA3E,CAAb;AACA,MAAIF,KAAK,GAAGF,KAAK,GAAGD,IAApB;AACA,MAAIK,MAAM,GAAGD,MAAM,GAAGP,GAAtB;;AACA,MAAIG,IAAI,GAAGC,KAAP,IAAgBJ,GAAG,GAAGO,MAA1B,EAAkC;AAC9B,QAAIE,UAAU,GAAGV,UAAU,CAACO,KAAX,GAAmBP,UAAU,CAACS,MAA/C;AACA,QAAIE,SAAS,GAAGb,WAAW,CAACS,KAAZ,GAAoBT,WAAW,CAACW,MAAhD;AACA,QAAIG,gBAAgB,GAAGL,KAAK,GAAGE,MAA/B;AACA,QAAII,iBAAiB,GAAGD,gBAAgB,IAAIF,UAAU,GAAGC,SAAb,GAAyBC,gBAA7B,CAAxC;AACA,WAAOE,MAAM,CAACD,iBAAiB,CAACE,OAAlB,CAA0B,CAA1B,CAAD,CAAb;AACH;;AACD,SAAO,CAAP;AACH,CAjBD;AAkBA;;;AACA,OAAO,IAAIC,SAAS,GAAG,UAAUpB,OAAV,EAAmBqB,UAAnB,EAA+B;AAClD,MAAId,GAAG,GAAG,CAAV;AACA,MAAIe,MAAM,GAAG,IAAb;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAmB,UAAUC,SAAV,EAAqB;AACpC,QAAIA,SAAS,IAAIxB,OAAjB,EAA0B;AACtB,UAAIyB,MAAM,GAAG1B,QAAQ,CAACC,OAAD,EAAUwB,SAAV,CAArB;;AACA,UAAIC,MAAM,GAAGlB,GAAb,EAAkB;AACdA,QAAAA,GAAG,GAAGkB,MAAN;AACAH,QAAAA,MAAM,GAAGE,SAAT;AACH;AACJ;AACJ,GARD;AASA,SAAOF,MAAP;AACH,CAbM","sourcesContent":["var getRatio = function (element, target) {\n    var elementRect = element.getBoundingClientRect();\n    var targetRect = target.getBoundingClientRect();\n    var top = Math.max(targetRect.top, elementRect.top);\n    var left = Math.max(targetRect.left, elementRect.left);\n    var right = Math.min(targetRect.left + targetRect.width, elementRect.left + elementRect.width);\n    var bottom = Math.min(targetRect.top + targetRect.height, elementRect.top + elementRect.height);\n    var width = right - left;\n    var height = bottom - top;\n    if (left < right && top < bottom) {\n        var targetArea = targetRect.width * targetRect.height;\n        var entryArea = elementRect.width * elementRect.height;\n        var intersectionArea = width * height;\n        var intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n        return Number(intersectionRatio.toFixed(4));\n    }\n    return 0;\n};\n/** @hidden */\nexport var intersect = function (element, candidates) {\n    var max = 0;\n    var result = null;\n    candidates.forEach(function (candidate) {\n        if (candidate && element) {\n            var ration = getRatio(element, candidate);\n            if (ration > max) {\n                max = ration;\n                result = candidate;\n            }\n        }\n    });\n    return result;\n};\n"]},"metadata":{},"sourceType":"module"}