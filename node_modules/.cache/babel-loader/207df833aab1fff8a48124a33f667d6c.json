{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { UploadFileStatus } from '../interfaces/UploadFileStatus';\n\nvar copyState = function (state) {\n  return (state || []).map(function (file) {\n    return __assign({}, file);\n  });\n};\n\nvar add = function (file, filesState) {\n  filesState.push(file);\n};\n\nvar addMany = function (fileList, filesState) {\n  fileList.forEach(function (file) {\n    return add(file, filesState);\n  });\n};\n\nvar groupFilesByUid = function (files) {\n  var fileGroup = {};\n  files.forEach(function (file) {\n    if (fileGroup[file.uid]) {\n      fileGroup[file.uid].push(file);\n    } else {\n      fileGroup[file.uid] = [file];\n    }\n  });\n  return fileGroup;\n};\n\nvar filesForUpload = function (files) {\n  var notUploadedGroups = {};\n  groupForEach(files, function (currentFiles, uid) {\n    var currentFilesValid = true;\n    currentFiles.forEach(function (file) {\n      if (file.status !== UploadFileStatus.Selected || file.validationErrors && file.validationErrors.length > 0) {\n        currentFilesValid = false;\n      }\n    });\n\n    if (currentFilesValid) {\n      notUploadedGroups[uid] = currentFiles;\n    }\n  });\n  return notUploadedGroups;\n};\n\nvar setFilesStatus = function (filesGroup, status) {\n  groupForEach(filesGroup, function (currentFiles) {\n    currentFiles.forEach(function (file) {\n      file.status = status;\n    });\n  });\n};\n\nvar flatFileGroup = function (fileGroup) {\n  var transformed = [];\n  groupForEach(fileGroup, function (currentFiles) {\n    transformed.push.apply(transformed, currentFiles);\n  });\n  return transformed;\n};\n\nvar groupForEach = function (fileGroup, callBack) {\n  Object.keys(fileGroup).forEach(function (uidKey) {\n    callBack(fileGroup[uidKey], uidKey);\n  });\n};\n\nexport default {\n  copyState: copyState,\n  addMany: addMany,\n  add: add,\n  groupFilesByUid: groupFilesByUid,\n  filesForUpload: filesForUpload,\n  setFilesStatus: setFilesStatus,\n  flatFileGroup: flatFileGroup,\n  groupForEach: groupForEach\n};","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-upload/dist/es/utils/stateUtils.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","UploadFileStatus","copyState","state","map","file","add","filesState","push","addMany","fileList","forEach","groupFilesByUid","files","fileGroup","uid","filesForUpload","notUploadedGroups","groupForEach","currentFiles","currentFilesValid","status","Selected","validationErrors","setFilesStatus","filesGroup","flatFileGroup","transformed","callBack","keys","uidKey"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { UploadFileStatus } from '../interfaces/UploadFileStatus';\nvar copyState = function (state) {\n    return (state || []).map(function (file) {\n        return __assign({}, file);\n    });\n};\nvar add = function (file, filesState) {\n    filesState.push(file);\n};\nvar addMany = function (fileList, filesState) {\n    fileList.forEach(function (file) { return add(file, filesState); });\n};\nvar groupFilesByUid = function (files) {\n    var fileGroup = {};\n    files.forEach(function (file) {\n        if (fileGroup[file.uid]) {\n            fileGroup[file.uid].push(file);\n        }\n        else {\n            fileGroup[file.uid] = [file];\n        }\n    });\n    return fileGroup;\n};\nvar filesForUpload = function (files) {\n    var notUploadedGroups = {};\n    groupForEach(files, function (currentFiles, uid) {\n        var currentFilesValid = true;\n        currentFiles.forEach(function (file) {\n            if (file.status !== UploadFileStatus.Selected ||\n                (file.validationErrors && file.validationErrors.length > 0)) {\n                currentFilesValid = false;\n            }\n        });\n        if (currentFilesValid) {\n            notUploadedGroups[uid] = currentFiles;\n        }\n    });\n    return notUploadedGroups;\n};\nvar setFilesStatus = function (filesGroup, status) {\n    groupForEach(filesGroup, function (currentFiles) {\n        currentFiles.forEach(function (file) {\n            file.status = status;\n        });\n    });\n};\nvar flatFileGroup = function (fileGroup) {\n    var transformed = [];\n    groupForEach(fileGroup, function (currentFiles) {\n        transformed.push.apply(transformed, currentFiles);\n    });\n    return transformed;\n};\nvar groupForEach = function (fileGroup, callBack) {\n    Object.keys(fileGroup).forEach(function (uidKey) {\n        callBack(fileGroup[uidKey], uidKey);\n    });\n};\nexport default {\n    copyState: copyState,\n    addMany: addMany,\n    add: add,\n    groupFilesByUid: groupFilesByUid,\n    filesForUpload: filesForUpload,\n    setFilesStatus: setFilesStatus,\n    flatFileGroup: flatFileGroup,\n    groupForEach: groupForEach\n};\n"]},"metadata":{},"sourceType":"module"}