{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { areCookiesAuthorized } from '../browser/cookie';\nimport { buildConfiguration } from '../domain/configuration';\nimport { setDebugMode, startInternalMonitoring } from '../domain/internalMonitoring';\nimport { catchUserErrors } from '../tools/catchUserErrors';\nimport { display } from '../tools/display';\nimport { updateExperimentalFeatures } from '../domain/configuration/experimentalFeatures';\nexport function makePublicApi(stub) {\n  var publicApi = __assign(__assign({}, stub), {\n    // This API method is intentionally not monitored, since the only thing executed is the\n    // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and\n    // we don't want to interfere with the user uncaught exceptions.\n    onReady: function (callback) {\n      callback();\n    }\n  }); // Add an \"hidden\" property to set debug mode. We define it that way to hide it\n  // as much as possible but of course it's not a real protection.\n\n\n  Object.defineProperty(publicApi, '_setDebug', {\n    get: function () {\n      return setDebugMode;\n    },\n    enumerable: false\n  });\n  return publicApi;\n}\nexport function defineGlobal(global, name, api) {\n  var existingGlobalVariable = global[name];\n  global[name] = api;\n\n  if (existingGlobalVariable && existingGlobalVariable.q) {\n    existingGlobalVariable.q.forEach(function (fn) {\n      return catchUserErrors(fn, 'onReady callback threw an error:')();\n    });\n  }\n}\nexport var BuildMode;\n\n(function (BuildMode) {\n  BuildMode[\"RELEASE\"] = \"release\";\n  BuildMode[\"STAGING\"] = \"staging\";\n  BuildMode[\"CANARY\"] = \"canary\";\n  BuildMode[\"E2E_TEST\"] = \"e2e-test\";\n})(BuildMode || (BuildMode = {}));\n\nexport function commonInit(initConfiguration, buildEnv) {\n  updateExperimentalFeatures(initConfiguration.enableExperimentalFeatures);\n  var configuration = buildConfiguration(initConfiguration, buildEnv);\n  var internalMonitoring = startInternalMonitoring(configuration);\n  return {\n    configuration: configuration,\n    internalMonitoring: internalMonitoring\n  };\n}\nexport function checkCookiesAuthorized(options) {\n  if (!areCookiesAuthorized(options)) {\n    display.warn('Cookies are not authorized, we will not send any data.');\n    return false;\n  }\n\n  return true;\n}\nexport function checkIsNotLocalFile() {\n  if (isLocalFile()) {\n    display.error('Execution is not allowed in the current context.');\n    return false;\n  }\n\n  return true;\n}\n\nfunction isLocalFile() {\n  return window.location.protocol === 'file:';\n}","map":{"version":3,"sources":["../../src/boot/init.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,QAAoD,mBAApD;AACA,SAAS,kBAAT,QAAsD,yBAAtD;AACA,SAAS,YAAT,EAAuB,uBAAvB,QAAsD,8BAAtD;AACA,SAAS,eAAT,QAAgC,0BAAhC;AACA,SAAS,OAAT,QAAwB,kBAAxB;AACA,SAAS,0BAAT,QAA2C,8CAA3C;AAEA,OAAM,SAAU,aAAV,CAA2B,IAA3B,EAAkC;AACtC,MAAM,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACV,IADU,CAAA,EACN;AAEP;AACA;AACA;AACA,IAAA,OAAO,EAAP,UAAQ,QAAR,EAA4B;AAC1B,MAAA,QAAQ;AACT;AAPM,GADM,CAAf,CADsC,CAYtC;AACA;;;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,SAAtB,EAAiC,WAAjC,EAA8C;AAC5C,IAAA,GAAG,EAAA,YAAA;AACD,aAAO,YAAP;AACD,KAH2C;AAI5C,IAAA,UAAU,EAAE;AAJgC,GAA9C;AAOA,SAAO,SAAP;AACD;AAED,OAAM,SAAU,YAAV,CAA0D,MAA1D,EAA0E,IAA1E,EAAsF,GAAtF,EAAuG;AAC3G,MAAM,sBAAsB,GAA0C,MAAM,CAAC,IAAD,CAA5E;AACA,EAAA,MAAM,CAAC,IAAD,CAAN,GAAe,GAAf;;AACA,MAAI,sBAAsB,IAAI,sBAAsB,CAAC,CAArD,EAAwD;AACtD,IAAA,sBAAsB,CAAC,CAAvB,CAAyB,OAAzB,CAAiC,UAAC,EAAD,EAAG;AAAK,aAAA,eAAe,CAAC,EAAD,EAAf,kCAAe,CAAf,EAAA;AAAyD,KAAlG;AACD;AACF;AAED,OAAA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACnB,EAAA,SAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,SAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CALD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB;;AAYA,OAAM,SAAU,UAAV,CAAqB,iBAArB,EAA2D,QAA3D,EAA6E;AACjF,EAAA,0BAA0B,CAAC,iBAAiB,CAAC,0BAAnB,CAA1B;AACA,MAAM,aAAa,GAAG,kBAAkB,CAAC,iBAAD,EAAoB,QAApB,CAAxC;AACA,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,aAAD,CAAlD;AAEA,SAAO;AACL,IAAA,aAAa,EAAA,aADR;AAEL,IAAA,kBAAkB,EAAA;AAFb,GAAP;AAID;AAED,OAAM,SAAU,sBAAV,CAAiC,OAAjC,EAAuD;AAC3D,MAAI,CAAC,oBAAoB,CAAC,OAAD,CAAzB,EAAoC;AAClC,IAAA,OAAO,CAAC,IAAR,CAAa,wDAAb;AACA,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,mBAAV,GAA6B;AACjC,MAAI,WAAW,EAAf,EAAmB;AACjB,IAAA,OAAO,CAAC,KAAR,CAAc,kDAAd;AACA,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,WAAT,GAAoB;AAClB,SAAO,MAAM,CAAC,QAAP,CAAgB,QAAhB,KAA6B,OAApC;AACD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { areCookiesAuthorized } from '../browser/cookie';\nimport { buildConfiguration } from '../domain/configuration';\nimport { setDebugMode, startInternalMonitoring } from '../domain/internalMonitoring';\nimport { catchUserErrors } from '../tools/catchUserErrors';\nimport { display } from '../tools/display';\nimport { updateExperimentalFeatures } from '../domain/configuration/experimentalFeatures';\nexport function makePublicApi(stub) {\n    var publicApi = __assign(__assign({}, stub), { \n        // This API method is intentionally not monitored, since the only thing executed is the\n        // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and\n        // we don't want to interfere with the user uncaught exceptions.\n        onReady: function (callback) {\n            callback();\n        } });\n    // Add an \"hidden\" property to set debug mode. We define it that way to hide it\n    // as much as possible but of course it's not a real protection.\n    Object.defineProperty(publicApi, '_setDebug', {\n        get: function () {\n            return setDebugMode;\n        },\n        enumerable: false,\n    });\n    return publicApi;\n}\nexport function defineGlobal(global, name, api) {\n    var existingGlobalVariable = global[name];\n    global[name] = api;\n    if (existingGlobalVariable && existingGlobalVariable.q) {\n        existingGlobalVariable.q.forEach(function (fn) { return catchUserErrors(fn, 'onReady callback threw an error:')(); });\n    }\n}\nexport var BuildMode;\n(function (BuildMode) {\n    BuildMode[\"RELEASE\"] = \"release\";\n    BuildMode[\"STAGING\"] = \"staging\";\n    BuildMode[\"CANARY\"] = \"canary\";\n    BuildMode[\"E2E_TEST\"] = \"e2e-test\";\n})(BuildMode || (BuildMode = {}));\nexport function commonInit(initConfiguration, buildEnv) {\n    updateExperimentalFeatures(initConfiguration.enableExperimentalFeatures);\n    var configuration = buildConfiguration(initConfiguration, buildEnv);\n    var internalMonitoring = startInternalMonitoring(configuration);\n    return {\n        configuration: configuration,\n        internalMonitoring: internalMonitoring,\n    };\n}\nexport function checkCookiesAuthorized(options) {\n    if (!areCookiesAuthorized(options)) {\n        display.warn('Cookies are not authorized, we will not send any data.');\n        return false;\n    }\n    return true;\n}\nexport function checkIsNotLocalFile() {\n    if (isLocalFile()) {\n        display.error('Execution is not allowed in the current context.');\n        return false;\n    }\n    return true;\n}\nfunction isLocalFile() {\n    return window.location.protocol === 'file:';\n}\n//# sourceMappingURL=init.js.map"]},"metadata":{},"sourceType":"module"}