{"ast":null,"code":"import { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\nvar DROPZONE_BOUNDARY_DELTA = 6;\n/**\n * A class which provides an API for analyzing the `drag` events\n * of the TreeView.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar TreeViewDragAnalyzer =\n/** @class */\nfunction () {\n  /**\n   * @param event - The event that will be analyzed.\n   */\n  function TreeViewDragAnalyzer(event) {\n    this.event = event;\n    this.initialized = false;\n    this.destItemId = '';\n    this.destTreeViewGuid = '';\n    this.itemId = event.itemHierarchicalIndex;\n    this.treeViewGuid = event.target.guid;\n  }\n  /**\n   * The method which initializes the analyzer.\n   * Invoke the method before you call any other methods.\n   *\n   * @returns - The analyzer object of the `drag` event.\n   */\n\n\n  TreeViewDragAnalyzer.prototype.init = function () {\n    if (!this.initialized) {\n      this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));\n      this.initialized = true;\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(TreeViewDragAnalyzer.prototype, \"isDropAllowed\", {\n    /**\n     * Returns `true` if dropping is allowed. Otherwise, returns `false`.\n     */\n    get: function () {\n      if (this.initialized && this.destItemId && this.destTreeViewGuid) {\n        // Disallow circular references.\n        return !\"\".concat(this.destTreeViewGuid, \"_\").concat(this.destItemId, \"_\").startsWith(\"\".concat(this.treeViewGuid, \"_\").concat(this.itemId, \"_\"));\n      } else {\n        return false;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewDragAnalyzer.prototype, \"destinationMeta\", {\n    /**\n     * Returns an object which contains:\n     * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and\n     * * The `guid` of the destination TreeView (the TreeView which renders the destination item).\n     */\n    get: function () {\n      return {\n        itemHierarchicalIndex: this.destItemId,\n        treeViewGuid: this.destTreeViewGuid\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the specific drop operation.\n   *\n   * @returns - The following values are returned:\n   * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.\n   * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.\n   * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.\n   * * `undefined`&mdash;Indicates that dropping is not allowed.\n   */\n\n  TreeViewDragAnalyzer.prototype.getDropOperation = function () {\n    if (this.initialized && this.isDropAllowed) {\n      var _a = this.destDomNodeWithMeta.getBoundingClientRect(),\n          top_1 = _a.top,\n          height = _a.height;\n\n      if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {\n        return 'after';\n      } else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {\n        return 'before';\n      } else {\n        return 'child';\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeViewDragAnalyzer.prototype.setDestimationMeta = function (element) {\n    var node = element;\n\n    while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {\n      node = node.parentNode;\n    }\n\n    if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {\n      this.destDomNodeWithMeta = node;\n      this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];\n      this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];\n    }\n  };\n\n  return TreeViewDragAnalyzer;\n}();\n\nexport { TreeViewDragAnalyzer };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-treeview/dist/es/TreeViewDragAnalyzer.js"],"names":["DOM_KENDO_ITEM_ID_FIELD","DOM_KENDO_TREEVIEW_GUID_FIELD","DROPZONE_BOUNDARY_DELTA","TreeViewDragAnalyzer","event","initialized","destItemId","destTreeViewGuid","itemId","itemHierarchicalIndex","treeViewGuid","target","guid","prototype","init","setDestimationMeta","document","elementFromPoint","clientX","clientY","Object","defineProperty","get","concat","startsWith","enumerable","configurable","getDropOperation","isDropAllowed","_a","destDomNodeWithMeta","getBoundingClientRect","top_1","top","height","undefined","element","node","parentNode"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,6BAAlC,QAAuE,gBAAvE;AACA,IAAIC,uBAAuB,GAAG,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,YAAY;AAClD;AACJ;AACA;AACI,WAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AACjC,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAcJ,KAAK,CAACK,qBAApB;AACA,SAAKC,YAAL,GAAoBN,KAAK,CAACO,MAAN,CAAaC,IAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,oBAAoB,CAACU,SAArB,CAA+BC,IAA/B,GAAsC,YAAY;AAC9C,QAAI,CAAC,KAAKT,WAAV,EAAuB;AACnB,WAAKU,kBAAL,CAAwBC,QAAQ,CAACC,gBAAT,CAA0B,KAAKb,KAAL,CAAWc,OAArC,EAA8C,KAAKd,KAAL,CAAWe,OAAzD,CAAxB;AACA,WAAKd,WAAL,GAAmB,IAAnB;AACH;;AACD,WAAO,IAAP;AACH,GAND;;AAOAe,EAAAA,MAAM,CAACC,cAAP,CAAsBlB,oBAAoB,CAACU,SAA3C,EAAsD,eAAtD,EAAuE;AACnE;AACR;AACA;AACQS,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKjB,WAAL,IAAoB,KAAKC,UAAzB,IAAuC,KAAKC,gBAAhD,EAAkE;AAC9D;AACA,eAAO,CAAG,GAAGgB,MAAH,CAAU,KAAKhB,gBAAf,EAAiC,GAAjC,EAAsCgB,MAAtC,CAA6C,KAAKjB,UAAlD,EAA8D,GAA9D,CAAD,CACLkB,UADK,CACM,GAAGD,MAAH,CAAU,KAAKb,YAAf,EAA6B,GAA7B,EAAkCa,MAAlC,CAAyC,KAAKf,MAA9C,EAAsD,GAAtD,CADN,CAAT;AAEH,OAJD,MAKK;AACD,eAAO,KAAP;AACH;AACJ,KAbkE;AAcnEiB,IAAAA,UAAU,EAAE,KAduD;AAenEC,IAAAA,YAAY,EAAE;AAfqD,GAAvE;AAiBAN,EAAAA,MAAM,CAACC,cAAP,CAAsBlB,oBAAoB,CAACU,SAA3C,EAAsD,iBAAtD,EAAyE;AACrE;AACR;AACA;AACA;AACA;AACQS,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO;AAAEb,QAAAA,qBAAqB,EAAE,KAAKH,UAA9B;AAA0CI,QAAAA,YAAY,EAAE,KAAKH;AAA7D,OAAP;AACH,KARoE;AASrEkB,IAAAA,UAAU,EAAE,KATyD;AAUrEC,IAAAA,YAAY,EAAE;AAVuD,GAAzE;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIvB,EAAAA,oBAAoB,CAACU,SAArB,CAA+Bc,gBAA/B,GAAkD,YAAY;AAC1D,QAAI,KAAKtB,WAAL,IAAoB,KAAKuB,aAA7B,EAA4C;AACxC,UAAIC,EAAE,GAAG,KAAKC,mBAAL,CAAyBC,qBAAzB,EAAT;AAAA,UAA2DC,KAAK,GAAGH,EAAE,CAACI,GAAtE;AAAA,UAA2EC,MAAM,GAAGL,EAAE,CAACK,MAAvF;;AACA,UAAIF,KAAK,GAAGE,MAAR,GAAiB,KAAK9B,KAAL,CAAWe,OAA5B,GAAsCjB,uBAA1C,EAAmE;AAC/D,eAAO,OAAP;AACH,OAFD,MAGK,IAAI,KAAKE,KAAL,CAAWe,OAAX,GAAqBa,KAArB,GAA6B9B,uBAAjC,EAA0D;AAC3D,eAAO,QAAP;AACH,OAFI,MAGA;AACD,eAAO,OAAP;AACH;AACJ,KAXD,MAYK;AACD,aAAOiC,SAAP;AACH;AACJ,GAhBD;;AAiBAhC,EAAAA,oBAAoB,CAACU,SAArB,CAA+BE,kBAA/B,GAAoD,UAAUqB,OAAV,EAAmB;AACnE,QAAIC,IAAI,GAAGD,OAAX;;AACA,WAAOC,IAAI,IAAI,CAACA,IAAI,CAACrC,uBAAD,CAApB,EAA+C;AAC3CqC,MAAAA,IAAI,GAAGA,IAAI,CAACC,UAAZ;AACH;;AACD,QAAID,IAAI,IAAIA,IAAI,CAACrC,uBAAD,CAAhB,EAA2C;AACvC,WAAK8B,mBAAL,GAA2BO,IAA3B;AACA,WAAK/B,UAAL,GAAkB+B,IAAI,CAACrC,uBAAD,CAAtB;AACA,WAAKO,gBAAL,GAAwB8B,IAAI,CAACpC,6BAAD,CAA5B;AACH;AACJ,GAVD;;AAWA,SAAOE,oBAAP;AACH,CA5FyC,EAA1C;;AA6FA,SAASA,oBAAT","sourcesContent":["import { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\nvar DROPZONE_BOUNDARY_DELTA = 6;\n/**\n * A class which provides an API for analyzing the `drag` events\n * of the TreeView.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar TreeViewDragAnalyzer = /** @class */ (function () {\n    /**\n     * @param event - The event that will be analyzed.\n     */\n    function TreeViewDragAnalyzer(event) {\n        this.event = event;\n        this.initialized = false;\n        this.destItemId = '';\n        this.destTreeViewGuid = '';\n        this.itemId = event.itemHierarchicalIndex;\n        this.treeViewGuid = event.target.guid;\n    }\n    /**\n     * The method which initializes the analyzer.\n     * Invoke the method before you call any other methods.\n     *\n     * @returns - The analyzer object of the `drag` event.\n     */\n    TreeViewDragAnalyzer.prototype.init = function () {\n        if (!this.initialized) {\n            this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));\n            this.initialized = true;\n        }\n        return this;\n    };\n    Object.defineProperty(TreeViewDragAnalyzer.prototype, \"isDropAllowed\", {\n        /**\n         * Returns `true` if dropping is allowed. Otherwise, returns `false`.\n         */\n        get: function () {\n            if (this.initialized && this.destItemId && this.destTreeViewGuid) {\n                // Disallow circular references.\n                return !((\"\".concat(this.destTreeViewGuid, \"_\").concat(this.destItemId, \"_\")).\n                    startsWith(\"\".concat(this.treeViewGuid, \"_\").concat(this.itemId, \"_\")));\n            }\n            else {\n                return false;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewDragAnalyzer.prototype, \"destinationMeta\", {\n        /**\n         * Returns an object which contains:\n         * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and\n         * * The `guid` of the destination TreeView (the TreeView which renders the destination item).\n         */\n        get: function () {\n            return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the specific drop operation.\n     *\n     * @returns - The following values are returned:\n     * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.\n     * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.\n     * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.\n     * * `undefined`&mdash;Indicates that dropping is not allowed.\n     */\n    TreeViewDragAnalyzer.prototype.getDropOperation = function () {\n        if (this.initialized && this.isDropAllowed) {\n            var _a = this.destDomNodeWithMeta.getBoundingClientRect(), top_1 = _a.top, height = _a.height;\n            if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {\n                return 'after';\n            }\n            else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {\n                return 'before';\n            }\n            else {\n                return 'child';\n            }\n        }\n        else {\n            return undefined;\n        }\n    };\n    TreeViewDragAnalyzer.prototype.setDestimationMeta = function (element) {\n        var node = element;\n        while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {\n            node = node.parentNode;\n        }\n        if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {\n            this.destDomNodeWithMeta = node;\n            this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];\n            this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];\n        }\n    };\n    return TreeViewDragAnalyzer;\n}());\nexport { TreeViewDragAnalyzer };\n"]},"metadata":{},"sourceType":"module"}