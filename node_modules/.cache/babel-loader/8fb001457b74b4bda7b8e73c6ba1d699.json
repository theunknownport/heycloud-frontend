{"ast":null,"code":"import { deepClone, getType } from './utils';\n/**\n * Current limitation:\n * - field path do not support array, 'a.b.c' only\n */\n\nexport function limitModification(object, modifiableFieldPaths, modifier) {\n  var clone = deepClone(object);\n  var result = modifier(clone);\n  modifiableFieldPaths.forEach(function (path) {\n    var originalValue = get(object, path);\n    var newValue = get(clone, path);\n    var originalType = getType(originalValue);\n    var newType = getType(newValue);\n\n    if (newType === originalType) {\n      set(object, path, newValue);\n    } else if (originalType === 'object' && (newType === 'undefined' || newType === 'null')) {\n      set(object, path, {});\n    }\n  });\n  return result;\n}\n\nfunction get(object, path) {\n  var current = object;\n\n  for (var _i = 0, _a = path.split('.'); _i < _a.length; _i++) {\n    var field = _a[_i];\n\n    if (!isValidObjectContaining(current, field)) {\n      return;\n    }\n\n    current = current[field];\n  }\n\n  return current;\n}\n\nfunction set(object, path, value) {\n  var current = object;\n  var fields = path.split('.');\n\n  for (var i = 0; i < fields.length; i += 1) {\n    var field = fields[i];\n\n    if (!isValidObjectContaining(current, field)) {\n      return;\n    }\n\n    if (i !== fields.length - 1) {\n      current = current[field];\n    } else {\n      current[field] = value;\n    }\n  }\n}\n\nfunction isValidObjectContaining(object, field) {\n  return typeof object === 'object' && object !== null && field in object;\n}","map":{"version":3,"sources":["../../src/tools/limitModification.ts"],"names":[],"mappings":"AACA,SAAS,SAAT,EAAoB,OAApB,QAAmC,SAAnC;AAEA;;;AAGG;;AACH,OAAM,SAAU,iBAAV,CACJ,MADI,EAEJ,oBAFI,EAGJ,QAHI,EAG2B;AAE/B,MAAM,KAAK,GAAG,SAAS,CAAC,MAAD,CAAvB;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAvB;AACA,EAAA,oBAAoB,CAAC,OAArB,CAA6B,UAAC,IAAD,EAAK;AAChC,QAAM,aAAa,GAAG,GAAG,CAAC,MAAD,EAAS,IAAT,CAAzB;AACA,QAAM,QAAQ,GAAG,GAAG,CAAC,KAAD,EAAQ,IAAR,CAApB;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,aAAD,CAA5B;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,QAAD,CAAvB;;AACA,QAAI,OAAO,KAAK,YAAhB,EAA8B;AAC5B,MAAA,GAAG,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,CAAH;AACD,KAFD,MAEO,IAAI,YAAY,KAAK,QAAjB,KAA8B,OAAO,KAAK,WAAZ,IAA2B,OAAO,KAAK,MAArE,CAAJ,EAAkF;AACvF,MAAA,GAAG,CAAC,MAAD,EAAS,IAAT,EAAe,EAAf,CAAH;AACD;AACF,GAVD;AAWA,SAAO,MAAP;AACD;;AAED,SAAS,GAAT,CAAa,MAAb,EAA8B,IAA9B,EAA0C;AACxC,MAAI,OAAO,GAAG,MAAd;;AACA,OAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,IAAI,CAAC,KAAL,CAAW,GAAX,CAApB,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAAqC;AAAhC,QAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX;;AACH,QAAI,CAAC,uBAAuB,CAAC,OAAD,EAAU,KAAV,CAA5B,EAA8C;AAC5C;AACD;;AACD,IAAA,OAAO,GAAG,OAAO,CAAC,KAAD,CAAjB;AACD;;AACD,SAAO,OAAP;AACD;;AAED,SAAS,GAAT,CAAa,MAAb,EAA8B,IAA9B,EAA4C,KAA5C,EAA0D;AACxD,MAAI,OAAO,GAAG,MAAd;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,IAAI,CAAxC,EAA2C;AACzC,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,QAAI,CAAC,uBAAuB,CAAC,OAAD,EAAU,KAAV,CAA5B,EAA8C;AAC5C;AACD;;AACD,QAAI,CAAC,KAAK,MAAM,CAAC,MAAP,GAAgB,CAA1B,EAA6B;AAC3B,MAAA,OAAO,GAAG,OAAO,CAAC,KAAD,CAAjB;AACD,KAFD,MAEO;AACL,MAAA,OAAO,CAAC,KAAD,CAAP,GAAiB,KAAjB;AACD;AACF;AACF;;AAED,SAAS,uBAAT,CAAiC,MAAjC,EAAkD,KAAlD,EAA+D;AAC7D,SAAO,OAAO,MAAP,KAAkB,QAAlB,IAA8B,MAAM,KAAK,IAAzC,IAAiD,KAAK,IAAI,MAAjE;AACD","sourceRoot":"","sourcesContent":["import { deepClone, getType } from './utils';\n/**\n * Current limitation:\n * - field path do not support array, 'a.b.c' only\n */\nexport function limitModification(object, modifiableFieldPaths, modifier) {\n    var clone = deepClone(object);\n    var result = modifier(clone);\n    modifiableFieldPaths.forEach(function (path) {\n        var originalValue = get(object, path);\n        var newValue = get(clone, path);\n        var originalType = getType(originalValue);\n        var newType = getType(newValue);\n        if (newType === originalType) {\n            set(object, path, newValue);\n        }\n        else if (originalType === 'object' && (newType === 'undefined' || newType === 'null')) {\n            set(object, path, {});\n        }\n    });\n    return result;\n}\nfunction get(object, path) {\n    var current = object;\n    for (var _i = 0, _a = path.split('.'); _i < _a.length; _i++) {\n        var field = _a[_i];\n        if (!isValidObjectContaining(current, field)) {\n            return;\n        }\n        current = current[field];\n    }\n    return current;\n}\nfunction set(object, path, value) {\n    var current = object;\n    var fields = path.split('.');\n    for (var i = 0; i < fields.length; i += 1) {\n        var field = fields[i];\n        if (!isValidObjectContaining(current, field)) {\n            return;\n        }\n        if (i !== fields.length - 1) {\n            current = current[field];\n        }\n        else {\n            current[field] = value;\n        }\n    }\n}\nfunction isValidObjectContaining(object, field) {\n    return typeof object === 'object' && object !== null && field in object;\n}\n//# sourceMappingURL=limitModification.js.map"]},"metadata":{},"sourceType":"module"}