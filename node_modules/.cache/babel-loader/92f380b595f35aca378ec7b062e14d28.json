{"ast":null,"code":"var Observable =\n/** @class */\nfunction () {\n  function Observable(onFirstSubscribe) {\n    this.onFirstSubscribe = onFirstSubscribe;\n    this.observers = [];\n  }\n\n  Observable.prototype.subscribe = function (f) {\n    var _this = this;\n\n    if (!this.observers.length && this.onFirstSubscribe) {\n      this.onLastUnsubscribe = this.onFirstSubscribe() || undefined;\n    }\n\n    this.observers.push(f);\n    return {\n      unsubscribe: function () {\n        _this.observers = _this.observers.filter(function (other) {\n          return f !== other;\n        });\n\n        if (!_this.observers.length && _this.onLastUnsubscribe) {\n          _this.onLastUnsubscribe();\n        }\n      }\n    };\n  };\n\n  Observable.prototype.notify = function (data) {\n    this.observers.forEach(function (observer) {\n      return observer(data);\n    });\n  };\n\n  return Observable;\n}();\n\nexport { Observable };","map":{"version":3,"sources":["../../src/tools/observable.ts"],"names":[],"mappings":"AAIA,IAAA,UAAA;AAAA;AAAA,YAAA;AAIE,WAAA,UAAA,CAAoB,gBAApB,EAAgE;AAA5C,SAAA,gBAAA,GAAA,gBAAA;AAHZ,SAAA,SAAA,GAAsC,EAAtC;AAG4D;;AAEpE,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,CAAV,EAA8B;AAA9B,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,KAAK,SAAL,CAAe,MAAhB,IAA0B,KAAK,gBAAnC,EAAqD;AACnD,WAAK,iBAAL,GAAyB,KAAK,gBAAL,MAA2B,SAApD;AACD;;AACD,SAAK,SAAL,CAAe,IAAf,CAAoB,CAApB;AACA,WAAO;AACL,MAAA,WAAW,EAAE,YAAA;AACX,QAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,UAAC,KAAD,EAAM;AAAK,iBAAA,CAAC,KAAD,KAAA;AAAW,SAA5C,CAAjB;;AACA,YAAI,CAAC,KAAI,CAAC,SAAL,CAAe,MAAhB,IAA0B,KAAI,CAAC,iBAAnC,EAAsD;AACpD,UAAA,KAAI,CAAC,iBAAL;AACD;AACF;AANI,KAAP;AAQD,GAbD;;AAeA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAc;AACZ,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD,EAAS;AAAK,aAAA,QAAQ,CAAR,IAAQ,CAAR;AAAc,KAAnD;AACD,GAFD;;AAGF,SAAA,UAAA;AAAC,CAxBD,EAAA","sourceRoot":"","sourcesContent":["var Observable = /** @class */ (function () {\n    function Observable(onFirstSubscribe) {\n        this.onFirstSubscribe = onFirstSubscribe;\n        this.observers = [];\n    }\n    Observable.prototype.subscribe = function (f) {\n        var _this = this;\n        if (!this.observers.length && this.onFirstSubscribe) {\n            this.onLastUnsubscribe = this.onFirstSubscribe() || undefined;\n        }\n        this.observers.push(f);\n        return {\n            unsubscribe: function () {\n                _this.observers = _this.observers.filter(function (other) { return f !== other; });\n                if (!_this.observers.length && _this.onLastUnsubscribe) {\n                    _this.onLastUnsubscribe();\n                }\n            },\n        };\n    };\n    Observable.prototype.notify = function (data) {\n        this.observers.forEach(function (observer) { return observer(data); });\n    };\n    return Observable;\n}());\nexport { Observable };\n//# sourceMappingURL=observable.js.map"]},"metadata":{},"sourceType":"module"}