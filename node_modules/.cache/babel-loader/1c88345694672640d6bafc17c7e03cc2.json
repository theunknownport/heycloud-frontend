{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { FormContext } from './FormContext';\n/**\n * Represents the Field component that is used inside the KendoReact Form component.\n * It uses `name` property to access field value and meta information from Form state.\n */\n\nexport var Field = function (props) {\n  var name = props.name,\n      component = props.component,\n      validator = props.validator,\n      children = props.children,\n      onChange = props.onChange,\n      others = __rest(props, [\"name\", \"component\", \"validator\", \"children\", \"onChange\"]);\n\n  var form = React.useContext(FormContext);\n  var formId = form ? form.id : '';\n  React.useEffect(function () {\n    if (!form) {\n      return;\n    }\n\n    var unregisterField = form.registerField(name, validator);\n    return unregisterField;\n  }, [name, formId, validator]);\n  var handleOnChange = React.useCallback(function (event) {\n    // Adding a name here slows down the performance.\n    // However, the other apprach taken by Formik is to search for the `name` attribute\n    // on `event.target.value` which does not work for all KendoReact components.\n    // If Formik uses custom components like the KendoReact ones, it would take the same approach.\n    // On the other hand, ReactFinal Form performs better in both cases due to its\n    // subscribtion-based model - the fields are subscribed for changes to a given field,\n    // which prevents unnececery rerenders. Note that this might be fragile in future React versions -\n    // the current performance testing accunts for a slight lag after 300 native HTML inputs in the 120ms-200ms range.\n    var newValue = event ? event.value !== undefined ? event.value : event.target ? event.target.value : event.target : event;\n    form.onChange(name, {\n      value: newValue\n    });\n\n    if (onChange) {\n      onChange.call(undefined, event);\n    }\n  }, [name, formId, onChange]);\n  var onNativeComponentChange = React.useCallback(function (event) {\n    return form.onChange(name, {\n      value: event.target.value\n    });\n  }, [name, formId]);\n  var handleOnBlur = React.useCallback(function () {\n    return form.onBlur(name);\n  }, [name, formId]);\n  var handleOnFocus = React.useCallback(function () {\n    return form.onFocus(name);\n  }, [name, formId]);\n\n  if (!form) {\n    // TODO: For future versions - warn for missing form in dev mode\n    // if (__process.env.NODE_ENV !== 'production') { // or __DEV__\n    //     throw new Error('Field must be used inside of a <Form> component');\n    // }\n    return null;\n  }\n\n  var value = form.valueGetter(name); // TODO: For future versions as it's better to have render prop\n  // if (typeof children === 'function') {\n  //     return children({ ...field, children: undefined, ...others });\n  // }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return React.createElement(component, __assign({\n      onChange: onNativeComponentChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      value: value,\n      children: children\n    }, others));\n  }\n\n  return React.createElement(component, __assign(__assign({\n    children: children\n  }, others), {\n    // input\n    onChange: handleOnChange,\n    onBlur: handleOnBlur,\n    onFocus: handleOnFocus,\n    value: value,\n    // meta\n    validationMessage: form.errors[name],\n    touched: form.touched[name],\n    modified: form.modified[name],\n    visited: form.visited[name],\n    // Our `valid` implementation requires double submit to show html5 validation errors,\n    // however it's NOT recommended to show html5 validation errors at all as:\n    // - There is no standard way to change validation look and feel with CSS.\n    // - Look different in each browser / OS\n    // - You can have a page in one language but an error message displayed in another language (not localizable)\n    valid: !(Boolean(form.errors[name]) && form.touched[name]),\n    name: name\n  }));\n};\nField.displayName = 'KendoReactField';","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-form/dist/es/Field.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","FormContext","Field","props","name","component","validator","children","onChange","others","form","useContext","formId","id","useEffect","unregisterField","registerField","handleOnChange","useCallback","event","newValue","value","undefined","target","onNativeComponentChange","handleOnBlur","onBlur","handleOnFocus","onFocus","valueGetter","createElement","validationMessage","errors","touched","modified","visited","valid","Boolean","displayName"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { FormContext } from './FormContext';\n/**\n * Represents the Field component that is used inside the KendoReact Form component.\n * It uses `name` property to access field value and meta information from Form state.\n */\nexport var Field = function (props) {\n    var name = props.name, component = props.component, validator = props.validator, children = props.children, onChange = props.onChange, others = __rest(props, [\"name\", \"component\", \"validator\", \"children\", \"onChange\"]);\n    var form = React.useContext(FormContext);\n    var formId = form ? form.id : '';\n    React.useEffect(function () {\n        if (!form) {\n            return;\n        }\n        var unregisterField = form.registerField(name, validator);\n        return unregisterField;\n    }, [name, formId, validator]);\n    var handleOnChange = React.useCallback(function (event) {\n        // Adding a name here slows down the performance.\n        // However, the other apprach taken by Formik is to search for the `name` attribute\n        // on `event.target.value` which does not work for all KendoReact components.\n        // If Formik uses custom components like the KendoReact ones, it would take the same approach.\n        // On the other hand, ReactFinal Form performs better in both cases due to its\n        // subscribtion-based model - the fields are subscribed for changes to a given field,\n        // which prevents unnececery rerenders. Note that this might be fragile in future React versions -\n        // the current performance testing accunts for a slight lag after 300 native HTML inputs in the 120ms-200ms range.\n        var newValue = event\n            ? (event.value !== undefined\n                ? event.value\n                : (event.target\n                    ? event.target.value\n                    : event.target))\n            : event;\n        form.onChange(name, { value: newValue });\n        if (onChange) {\n            onChange.call(undefined, event);\n        }\n    }, [name, formId, onChange]);\n    var onNativeComponentChange = React.useCallback(function (event) { return form.onChange(name, { value: event.target.value }); }, [name, formId]);\n    var handleOnBlur = React.useCallback(function () { return form.onBlur(name); }, [name, formId]);\n    var handleOnFocus = React.useCallback(function () { return form.onFocus(name); }, [name, formId]);\n    if (!form) {\n        // TODO: For future versions - warn for missing form in dev mode\n        // if (__process.env.NODE_ENV !== 'production') { // or __DEV__\n        //     throw new Error('Field must be used inside of a <Form> component');\n        // }\n        return null;\n    }\n    var value = form.valueGetter(name);\n    // TODO: For future versions as it's better to have render prop\n    // if (typeof children === 'function') {\n    //     return children({ ...field, children: undefined, ...others });\n    // }\n    if (typeof component === 'string') {\n        // ignore meta, combine input with any other props\n        return React.createElement(component, __assign({ onChange: onNativeComponentChange, onBlur: handleOnBlur, onFocus: handleOnFocus, value: value, children: children }, others));\n    }\n    return React.createElement(component, __assign(__assign({ children: children }, others), { \n        // input\n        onChange: handleOnChange, onBlur: handleOnBlur, onFocus: handleOnFocus, value: value, \n        // meta\n        validationMessage: form.errors[name], touched: form.touched[name], modified: form.modified[name], visited: form.visited[name], \n        // Our `valid` implementation requires double submit to show html5 validation errors,\n        // however it's NOT recommended to show html5 validation errors at all as:\n        // - There is no standard way to change validation look and feel with CSS.\n        // - Look different in each browser / OS\n        // - You can have a page in one language but an error message displayed in another language (not localizable)\n        valid: !(Boolean(form.errors[name]) && form.touched[name]), name: name }));\n};\nField.displayName = 'KendoReactField';\n"]},"metadata":{},"sourceType":"module"}