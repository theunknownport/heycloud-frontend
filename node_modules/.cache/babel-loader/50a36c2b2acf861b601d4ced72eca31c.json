{"ast":null,"code":"import { runOnReadyState } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '@datadog/browser-rum-core';\nimport { getReplayStats } from '../domain/replayStats';\nimport { getDeflateWorkerSingleton } from '../domain/segmentCollection/deflateWorkerSingleton';\nexport function makeRecorderApi(startRecordingImpl, getDeflateWorkerSingletonImpl) {\n  if (getDeflateWorkerSingletonImpl === void 0) {\n    getDeflateWorkerSingletonImpl = getDeflateWorkerSingleton;\n  }\n\n  var state = {\n    status: 0\n    /* Stopped */\n\n  };\n\n  var startStrategy = function () {\n    state = {\n      status: 1\n      /* IntentToStart */\n\n    };\n  };\n\n  var stopStrategy = function () {\n    state = {\n      status: 0\n      /* Stopped */\n\n    };\n  };\n\n  return {\n    start: function () {\n      return startStrategy();\n    },\n    stop: function () {\n      return stopStrategy();\n    },\n    getReplayStats: getReplayStats,\n    onRumStart: function (lifeCycle, initConfiguration, configuration, session, parentContexts) {\n      lifeCycle.subscribe(LifeCycleEventType.SESSION_EXPIRED, function () {\n        if (state.status === 2\n        /* Starting */\n        || state.status === 3\n        /* Started */\n        ) {\n          stopStrategy();\n          state = {\n            status: 1\n            /* IntentToStart */\n\n          };\n        }\n      });\n      lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n        if (state.status === 1\n        /* IntentToStart */\n        ) {\n          startStrategy();\n        }\n      });\n\n      startStrategy = function () {\n        if (!session.hasReplayPlan()) {\n          state = {\n            status: 1\n            /* IntentToStart */\n\n          };\n          return;\n        }\n\n        if (state.status === 2\n        /* Starting */\n        || state.status === 3\n        /* Started */\n        ) {\n          return;\n        }\n\n        state = {\n          status: 2\n          /* Starting */\n\n        };\n        runOnReadyState('complete', function () {\n          if (state.status !== 2\n          /* Starting */\n          ) {\n            return;\n          }\n\n          var worker = getDeflateWorkerSingletonImpl();\n\n          if (!worker) {\n            state = {\n              status: 0\n              /* Stopped */\n\n            };\n            return;\n          }\n\n          var stopRecording = startRecordingImpl(lifeCycle, initConfiguration.applicationId, configuration, session, parentContexts, worker).stop;\n          state = {\n            status: 3\n            /* Started */\n            ,\n            stopRecording: stopRecording\n          };\n        });\n      };\n\n      stopStrategy = function () {\n        if (state.status === 0\n        /* Stopped */\n        ) {\n          return;\n        }\n\n        if (state.status === 3\n        /* Started */\n        ) {\n          state.stopRecording();\n        }\n\n        state = {\n          status: 0\n          /* Stopped */\n\n        };\n      };\n\n      if (state.status === 1\n      /* IntentToStart */\n      ) {\n        startStrategy();\n      }\n    },\n    isRecording: function () {\n      return state.status === 3\n      /* Started */\n      ;\n    }\n  };\n}","map":{"version":3,"sources":["../../src/boot/recorderApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { runOnReadyState } from '@datadog/browser-core';\nimport { LifeCycleEventType, } from '@datadog/browser-rum-core';\nimport { getReplayStats } from '../domain/replayStats';\nimport { getDeflateWorkerSingleton } from '../domain/segmentCollection/deflateWorkerSingleton';\nexport function makeRecorderApi(startRecordingImpl, getDeflateWorkerSingletonImpl) {\n    if (getDeflateWorkerSingletonImpl === void 0) { getDeflateWorkerSingletonImpl = getDeflateWorkerSingleton; }\n    var state = {\n        status: 0 /* Stopped */,\n    };\n    var startStrategy = function () {\n        state = { status: 1 /* IntentToStart */ };\n    };\n    var stopStrategy = function () {\n        state = { status: 0 /* Stopped */ };\n    };\n    return {\n        start: function () { return startStrategy(); },\n        stop: function () { return stopStrategy(); },\n        getReplayStats: getReplayStats,\n        onRumStart: function (lifeCycle, initConfiguration, configuration, session, parentContexts) {\n            lifeCycle.subscribe(LifeCycleEventType.SESSION_EXPIRED, function () {\n                if (state.status === 2 /* Starting */ || state.status === 3 /* Started */) {\n                    stopStrategy();\n                    state = { status: 1 /* IntentToStart */ };\n                }\n            });\n            lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n                if (state.status === 1 /* IntentToStart */) {\n                    startStrategy();\n                }\n            });\n            startStrategy = function () {\n                if (!session.hasReplayPlan()) {\n                    state = { status: 1 /* IntentToStart */ };\n                    return;\n                }\n                if (state.status === 2 /* Starting */ || state.status === 3 /* Started */) {\n                    return;\n                }\n                state = { status: 2 /* Starting */ };\n                runOnReadyState('complete', function () {\n                    if (state.status !== 2 /* Starting */) {\n                        return;\n                    }\n                    var worker = getDeflateWorkerSingletonImpl();\n                    if (!worker) {\n                        state = {\n                            status: 0 /* Stopped */,\n                        };\n                        return;\n                    }\n                    var stopRecording = startRecordingImpl(lifeCycle, initConfiguration.applicationId, configuration, session, parentContexts, worker).stop;\n                    state = {\n                        status: 3 /* Started */,\n                        stopRecording: stopRecording,\n                    };\n                });\n            };\n            stopStrategy = function () {\n                if (state.status === 0 /* Stopped */) {\n                    return;\n                }\n                if (state.status === 3 /* Started */) {\n                    state.stopRecording();\n                }\n                state = {\n                    status: 0 /* Stopped */,\n                };\n            };\n            if (state.status === 1 /* IntentToStart */) {\n                startStrategy();\n            }\n        },\n        isRecording: function () { return state.status === 3 /* Started */; },\n    };\n}\n//# sourceMappingURL=recorderApi.js.map"]},"metadata":{},"sourceType":"module"}