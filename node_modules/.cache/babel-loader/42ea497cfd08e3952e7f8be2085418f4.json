{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\n/**\n * Represents the KendoReact TreeViewDragClue component which renders a clue when an item is dragged.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar TreeViewDragClue =\n/** @class */\nfunction (_super) {\n  __extends(TreeViewDragClue, _super);\n\n  function TreeViewDragClue() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      visible: false,\n      top: 0,\n      left: 0,\n      text: '',\n      operationClassName: 'k-i-cancel'\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  TreeViewDragClue.prototype.render = function () {\n    var dynamicStyle = {\n      top: this.state.top + 'px',\n      left: this.state.left + 'px'\n    };\n    return this.state.visible && React.createElement(\"div\", {\n      className: \"k-header k-drag-clue\",\n      style: __assign(__assign({}, this.props.style), dynamicStyle)\n    }, React.createElement(\"span\", {\n      className: classNames('k-icon k-drag-status k-icon-with-modifier', this.state.operationClassName)\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-icon-modifier\"\n    })), this.state.text);\n  };\n  /**\n   * Displays the TreeViewDragClue component.\n   *\n   * @param top - The `top` CSS position of the component.\n   * @param left - The `left` CSS position of the component.\n   * @param text - The text of the component.\n   * @param operationClassName - The CSS class name which is related to the specific drop operation.\n   */\n\n\n  TreeViewDragClue.prototype.show = function (top, left, text, operationClassName) {\n    this.setState({\n      visible: true,\n      top: top,\n      left: left,\n      text: text,\n      operationClassName: operationClassName\n    });\n  };\n  /**\n   * Hides the TreeViewDragClue component.\n   */\n\n\n  TreeViewDragClue.prototype.hide = function () {\n    this.setState({\n      visible: false\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  TreeViewDragClue.defaultProps = {\n    style: {\n      display: 'block',\n      position: 'absolute',\n      zIndex: 20000,\n      padding: '4px 6px'\n    }\n  };\n  return TreeViewDragClue;\n}(React.PureComponent);\n\nexport { TreeViewDragClue };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-treeview/dist/es/TreeViewDragClue.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","React","classNames","TreeViewDragClue","_super","_this","state","visible","top","left","text","operationClassName","render","dynamicStyle","createElement","className","style","props","show","setState","hide","defaultProps","display","position","zIndex","padding","PureComponent"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnB,QAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;AACJF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASW,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBb,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;AACH,GAND;AAOH,CAd2C,EAA5C;;AAeA,IAAIG,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGb,MAAM,CAACc,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAIb,CAAT,IAAcY,CAAd,EAAiB,IAAIhB,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCS,CAArC,EAAwCZ,CAAxC,CAAJ,EACbW,CAAC,CAACX,CAAD,CAAD,GAAOY,CAAC,CAACZ,CAAD,CAAR;AACP;;AACD,WAAOW,CAAP;AACH,GAPD;;AAQA,SAAOF,QAAQ,CAACQ,KAAT,CAAe,IAAf,EAAqBF,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKG,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACpD7B,EAAAA,SAAS,CAAC4B,gBAAD,EAAmBC,MAAnB,CAAT;;AACA,WAASD,gBAAT,GAA4B;AACxB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACJ,KAAP,CAAa,IAAb,EAAmBF,SAAnB,CAAnB,IAAoD,IAAhE;AACA;AACR;AACA;;;AACQO,IAAAA,KAAK,CAACC,KAAN,GAAc;AACVC,MAAAA,OAAO,EAAE,KADC;AAEVC,MAAAA,GAAG,EAAE,CAFK;AAGVC,MAAAA,IAAI,EAAE,CAHI;AAIVC,MAAAA,IAAI,EAAE,EAJI;AAKVC,MAAAA,kBAAkB,EAAE;AALV,KAAd;AAOA,WAAON,KAAP;AACH;AACD;AACJ;AACA;;;AACIF,EAAAA,gBAAgB,CAACnB,SAAjB,CAA2B4B,MAA3B,GAAoC,YAAY;AAC5C,QAAIC,YAAY,GAAG;AAAEL,MAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWE,GAAX,GAAiB,IAAxB;AAA8BC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAAX,GAAkB;AAAtD,KAAnB;AACA,WAAO,KAAKH,KAAL,CAAWC,OAAX,IAAuBN,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEC,MAAAA,SAAS,EAAE,sBAAb;AAAqCC,MAAAA,KAAK,EAAExB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK,KAAKyB,KAAL,CAAWD,KAAhB,CAAT,EAAiCH,YAAjC;AAApD,KAA3B,EAC1BZ,KAAK,CAACa,aAAN,CAAoB,MAApB,EAA4B;AAAEC,MAAAA,SAAS,EAAEb,UAAU,CAAC,2CAAD,EAA8C,KAAKI,KAAL,CAAWK,kBAAzD;AAAvB,KAA5B,EACIV,KAAK,CAACa,aAAN,CAAoB,MAApB,EAA4B;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA5B,CADJ,CAD0B,EAG1B,KAAKT,KAAL,CAAWI,IAHe,CAA9B;AAIH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,gBAAgB,CAACnB,SAAjB,CAA2BkC,IAA3B,GAAkC,UAAUV,GAAV,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,kBAA3B,EAA+C;AAC7E,SAAKQ,QAAL,CAAc;AAAEZ,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,GAAG,EAAEA,GAAtB;AAA2BC,MAAAA,IAAI,EAAEA,IAAjC;AAAuCC,MAAAA,IAAI,EAAEA,IAA7C;AAAmDC,MAAAA,kBAAkB,EAAEA;AAAvE,KAAd;AACH,GAFD;AAGA;AACJ;AACA;;;AACIR,EAAAA,gBAAgB,CAACnB,SAAjB,CAA2BoC,IAA3B,GAAkC,YAAY;AAC1C,SAAKD,QAAL,CAAc;AAAEZ,MAAAA,OAAO,EAAE;AAAX,KAAd;AACH,GAFD;AAGA;AACJ;AACA;;;AACIJ,EAAAA,gBAAgB,CAACkB,YAAjB,GAAgC;AAAEL,IAAAA,KAAK,EAAE;AAAEM,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,QAAQ,EAAE,UAA9B;AAA0CC,MAAAA,MAAM,EAAE,KAAlD;AAAyDC,MAAAA,OAAO,EAAE;AAAlE;AAAT,GAAhC;AACA,SAAOtB,gBAAP;AACH,CAhDqC,CAgDpCF,KAAK,CAACyB,aAhD8B,CAAtC;;AAiDA,SAASvB,gBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\n/**\n * Represents the KendoReact TreeViewDragClue component which renders a clue when an item is dragged.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar TreeViewDragClue = /** @class */ (function (_super) {\n    __extends(TreeViewDragClue, _super);\n    function TreeViewDragClue() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * @hidden\n         */\n        _this.state = {\n            visible: false,\n            top: 0,\n            left: 0,\n            text: '',\n            operationClassName: 'k-i-cancel'\n        };\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    TreeViewDragClue.prototype.render = function () {\n        var dynamicStyle = { top: this.state.top + 'px', left: this.state.left + 'px' };\n        return this.state.visible && (React.createElement(\"div\", { className: \"k-header k-drag-clue\", style: __assign(__assign({}, this.props.style), dynamicStyle) },\n            React.createElement(\"span\", { className: classNames('k-icon k-drag-status k-icon-with-modifier', this.state.operationClassName) },\n                React.createElement(\"span\", { className: \"k-icon k-icon-modifier\" })),\n            this.state.text));\n    };\n    /**\n     * Displays the TreeViewDragClue component.\n     *\n     * @param top - The `top` CSS position of the component.\n     * @param left - The `left` CSS position of the component.\n     * @param text - The text of the component.\n     * @param operationClassName - The CSS class name which is related to the specific drop operation.\n     */\n    TreeViewDragClue.prototype.show = function (top, left, text, operationClassName) {\n        this.setState({ visible: true, top: top, left: left, text: text, operationClassName: operationClassName });\n    };\n    /**\n     * Hides the TreeViewDragClue component.\n     */\n    TreeViewDragClue.prototype.hide = function () {\n        this.setState({ visible: false });\n    };\n    /**\n     * @hidden\n     */\n    TreeViewDragClue.defaultProps = { style: { display: 'block', position: 'absolute', zIndex: 20000, padding: '4px 6px' } };\n    return TreeViewDragClue;\n}(React.PureComponent));\nexport { TreeViewDragClue };\n"]},"metadata":{},"sourceType":"module"}