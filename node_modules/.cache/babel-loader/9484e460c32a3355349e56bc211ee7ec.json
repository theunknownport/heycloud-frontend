{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Internal context keep returning v1 format\n * to not break compatibility with logs data format\n */\n\nexport function startInternalContext(applicationId, session, parentContexts, urlContexts) {\n  return {\n    get: function (startTime) {\n      var viewContext = parentContexts.findView(startTime);\n      var urlContext = urlContexts.findUrl(startTime);\n\n      if (session.isTracked() && viewContext && urlContext && viewContext.session.id) {\n        var actionContext = parentContexts.findAction(startTime);\n        return {\n          application_id: applicationId,\n          session_id: viewContext.session.id,\n          user_action: actionContext ? {\n            id: actionContext.action.id\n          } : undefined,\n          view: __assign(__assign({}, viewContext.view), urlContext.view)\n        };\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../src/domain/internalContext.ts"],"names":[],"mappings":";AAMA;;;AAGG;;AACH,OAAM,SAAU,oBAAV,CACJ,aADI,EAEJ,OAFI,EAGJ,cAHI,EAIJ,WAJI,EAIoB;AAExB,SAAO;AACL,IAAA,GAAG,EAAE,UAAC,SAAD,EAAmB;AACtB,UAAM,WAAW,GAAG,cAAc,CAAC,QAAf,CAAwB,SAAxB,CAApB;AACA,UAAM,UAAU,GAAG,WAAW,CAAC,OAAZ,CAAoB,SAApB,CAAnB;;AACA,UAAI,OAAO,CAAC,SAAR,MAAuB,WAAvB,IAAsC,UAAtC,IAAoD,WAAW,CAAC,OAAZ,CAAoB,EAA5E,EAAgF;AAC9E,YAAM,aAAa,GAAG,cAAc,CAAC,UAAf,CAA0B,SAA1B,CAAtB;AACA,eAAO;AACL,UAAA,cAAc,EAAE,aADX;AAEL,UAAA,UAAU,EAAE,WAAW,CAAC,OAAZ,CAAoB,EAF3B;AAGL,UAAA,WAAW,EAAE,aAAa,GACtB;AACE,YAAA,EAAE,EAAE,aAAa,CAAC,MAAd,CAAqB;AAD3B,WADsB,GAItB,SAPC;AAQL,UAAA,IAAI,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACC,WAAW,CAAC,IADb,CAAA,EAEC,UAAU,CAAC,IAFZ;AARC,SAAP;AAaD;AACF;AApBI,GAAP;AAsBD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\n/**\n * Internal context keep returning v1 format\n * to not break compatibility with logs data format\n */\nexport function startInternalContext(applicationId, session, parentContexts, urlContexts) {\n    return {\n        get: function (startTime) {\n            var viewContext = parentContexts.findView(startTime);\n            var urlContext = urlContexts.findUrl(startTime);\n            if (session.isTracked() && viewContext && urlContext && viewContext.session.id) {\n                var actionContext = parentContexts.findAction(startTime);\n                return {\n                    application_id: applicationId,\n                    session_id: viewContext.session.id,\n                    user_action: actionContext\n                        ? {\n                            id: actionContext.action.id,\n                        }\n                        : undefined,\n                    view: __assign(__assign({}, viewContext.view), urlContext.view),\n                };\n            }\n        },\n    };\n}\n//# sourceMappingURL=internalContext.js.map"]},"metadata":{},"sourceType":"module"}