{"ast":null,"code":"import { ErrorSource, ErrorHandling, formatUnknownError } from '../../tools/error';\nimport { clocksNow } from '../../tools/timeUtils';\nimport { subscribe, unsubscribe } from '../tracekit';\nvar traceKitReportHandler;\nexport function trackRuntimeError(errorObservable) {\n  traceKitReportHandler = function (stackTrace, _, errorObject) {\n    var _a = formatUnknownError(stackTrace, errorObject, 'Uncaught'),\n        stack = _a.stack,\n        message = _a.message,\n        type = _a.type;\n\n    errorObservable.notify({\n      message: message,\n      stack: stack,\n      type: type,\n      source: ErrorSource.SOURCE,\n      startClocks: clocksNow(),\n      originalError: errorObject,\n      handling: ErrorHandling.UNHANDLED\n    });\n  };\n\n  subscribe(traceKitReportHandler);\n  return {\n    stop: function () {\n      unsubscribe(traceKitReportHandler);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/domain/error/trackRuntimeError.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,aAAtB,EAAqC,kBAArC,QAAyE,mBAAzE;AAEA,SAAS,SAAT,QAA0B,uBAA1B;AACA,SAAqB,SAArB,EAAgC,WAAhC,QAAmD,aAAnD;AAEA,IAAI,qBAAJ;AAEA,OAAM,SAAU,iBAAV,CAA4B,eAA5B,EAAiE;AACrE,EAAA,qBAAqB,GAAG,UAAC,UAAD,EAAyB,CAAzB,EAAqC,WAArC,EAAsD;AACtE,QAAA,EAAA,GAA2B,kBAAkB,CAAC,UAAD,EAAa,WAAb,EAA0B,UAA1B,CAA7C;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,OAAO,GAAA,EAAA,CAAA,OAAhB;AAAA,QAAkB,IAAI,GAAA,EAAA,CAAA,IAAtB;;AACN,IAAA,eAAe,CAAC,MAAhB,CAAuB;AACrB,MAAA,OAAO,EAAA,OADc;AAErB,MAAA,KAAK,EAAA,KAFgB;AAGrB,MAAA,IAAI,EAAA,IAHiB;AAIrB,MAAA,MAAM,EAAE,WAAW,CAAC,MAJC;AAKrB,MAAA,WAAW,EAAE,SAAS,EALD;AAMrB,MAAA,aAAa,EAAE,WANM;AAOrB,MAAA,QAAQ,EAAE,aAAa,CAAC;AAPH,KAAvB;AASD,GAXD;;AAYA,EAAA,SAAS,CAAC,qBAAD,CAAT;AACA,SAAO;AACL,IAAA,IAAI,EAAE,YAAA;AACJ,MAAA,WAAW,CAAC,qBAAD,CAAX;AACD;AAHI,GAAP;AAKD","sourceRoot":"","sourcesContent":["import { ErrorSource, ErrorHandling, formatUnknownError } from '../../tools/error';\nimport { clocksNow } from '../../tools/timeUtils';\nimport { subscribe, unsubscribe } from '../tracekit';\nvar traceKitReportHandler;\nexport function trackRuntimeError(errorObservable) {\n    traceKitReportHandler = function (stackTrace, _, errorObject) {\n        var _a = formatUnknownError(stackTrace, errorObject, 'Uncaught'), stack = _a.stack, message = _a.message, type = _a.type;\n        errorObservable.notify({\n            message: message,\n            stack: stack,\n            type: type,\n            source: ErrorSource.SOURCE,\n            startClocks: clocksNow(),\n            originalError: errorObject,\n            handling: ErrorHandling.UNHANDLED,\n        });\n    };\n    subscribe(traceKitReportHandler);\n    return {\n        stop: function () {\n            unsubscribe(traceKitReportHandler);\n        },\n    };\n}\n//# sourceMappingURL=trackRuntimeError.js.map"]},"metadata":{},"sourceType":"module"}