{"ast":null,"code":"var _a;\n\nimport { addMonths, addYears, createDate, durationInYears, firstMonthOfYear, lastMonthOfYear } from '@progress/kendo-date-math';\nimport { Action } from '../models/NavigationAction';\nimport { getToday, isInRange, isInSelectionRange, range } from '../../utils';\nimport { EMPTY_SELECTIONRANGE } from '../models/SelectionRange';\nimport { cloneDate } from '@progress/kendo-date-math';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 4;\nvar ROWS_LENGTH = 3;\n\nvar upStep = function (month) {\n  if (month > 4) {\n    return -5;\n  }\n\n  if (month < 2) {\n    return -2;\n  }\n\n  return -7;\n};\n\nvar downStep = function (month) {\n  if (month < 7) {\n    return 5;\n  }\n\n  if (month < 10) {\n    return 7;\n  }\n\n  return 2;\n};\n\nvar ACTIONS = (_a = {}, _a[Action.Left] = function (date) {\n  return addMonths(date, -1);\n}, _a[Action.Up] = function (date) {\n  return addMonths(date, upStep(date.getMonth()));\n}, _a[Action.Right] = function (date) {\n  return addMonths(date, 1);\n}, _a[Action.Down] = function (date) {\n  return addMonths(date, downStep(date.getMonth()));\n}, _a[Action.PrevView] = function (date) {\n  return addYears(date, -1);\n}, _a[Action.NextView] = function (date) {\n  return addYears(date, 1);\n}, _a[Action.FirstInView] = function (date) {\n  return firstMonthOfYear(date);\n}, _a[Action.LastInView] = function (date) {\n  return lastMonthOfYear(date);\n}, _a);\n/**\n * @hidden\n */\n\nvar YearViewService =\n/** @class */\nfunction () {\n  function YearViewService(intl) {\n    this._intl = intl;\n  }\n\n  YearViewService.prototype.addToDate = function (min, skip) {\n    return addYears(min, skip);\n  };\n\n  YearViewService.prototype.datesList = function (start, count) {\n    return range(0, count).map(function (i) {\n      return addYears(start, i);\n    });\n  };\n\n  YearViewService.prototype.data = function (options) {\n    var _this = this;\n\n    var cellUID = options.cellUID,\n        focusedDate = options.focusedDate,\n        isActiveView = options.isActiveView,\n        max = options.max,\n        min = options.min,\n        selectedDate = options.selectedDate,\n        _a = options.selectionRange,\n        selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a,\n        viewDate = options.viewDate;\n\n    if (!viewDate) {\n      return EMPTY_DATA;\n    }\n\n    var months = this.abbrMonthNames();\n    var firstDate = firstMonthOfYear(viewDate);\n    var lastDate = lastMonthOfYear(viewDate);\n    var currentYear = firstDate.getFullYear();\n    var cells = range(0, CELLS_LENGTH);\n    var today = getToday();\n    return range(0, ROWS_LENGTH).map(function (rowOffset) {\n      var baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH);\n      return cells.map(function (cellOffset) {\n        var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);\n\n        var changedYear = currentYear < cellDate.getFullYear();\n\n        if (changedYear) {\n          return null;\n        }\n\n        var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n\n        var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n\n        var isInMiddle = !isRangeStart && !isRangeEnd;\n        var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n        var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));\n        return {\n          formattedValue: months[cellDate.getMonth()],\n          id: \"\".concat(cellUID).concat(cellDate.getTime()),\n          isFocused: _this.isEqual(cellDate, focusedDate),\n          isSelected: isSelected,\n          isInRange: isInRange(cellDate, min, max),\n          isWeekend: false,\n          isRangeStart: isRangeStart,\n          isRangeMid: isRangeMid,\n          isRangeEnd: isRangeEnd,\n          isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n          isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n          isToday: _this.isEqual(cellDate, today),\n          title: _this.cellTitle(cellDate),\n          value: cellDate\n        };\n      });\n    });\n  };\n\n  YearViewService.prototype.isSelectedFromArray = function (candidate, dates, min, max) {\n    var _this = this;\n\n    var result = false;\n    dates.forEach(function (date) {\n      if (isInRange(candidate, min, max) && _this.isEqual(candidate, date)) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  YearViewService.prototype.isEqual = function (candidate, expected) {\n    if (!candidate || !expected) {\n      return false;\n    }\n\n    return candidate.getFullYear() === expected.getFullYear() && candidate.getMonth() === expected.getMonth();\n  };\n\n  YearViewService.prototype.isInArray = function (date, dates) {\n    if (!dates.length) {\n      return false;\n    }\n\n    var year = date.getFullYear();\n    return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();\n  };\n\n  YearViewService.prototype.isInRange = function (candidate, min, max) {\n    var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);\n    var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;\n    var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);\n    return aboveMin && belowMax;\n  };\n\n  YearViewService.prototype.isInSameView = function (candidate, value) {\n    return durationInYears(candidate, value) === 0;\n  };\n\n  YearViewService.prototype.isRangeStart = function (value) {\n    return value.getFullYear() % 10 === 0;\n  };\n\n  YearViewService.prototype.move = function (value, action) {\n    var modifier = ACTIONS[action];\n\n    if (!modifier) {\n      return value;\n    }\n\n    return modifier(value);\n  };\n\n  YearViewService.prototype.cellTitle = function (value) {\n    return \"\".concat(value.getFullYear(), \" \").concat(this.value(value));\n  };\n\n  YearViewService.prototype.navigationTitle = function (value) {\n    return this.title(value);\n  };\n\n  YearViewService.prototype.title = function (current) {\n    return current ? current.getFullYear().toString() : '';\n  };\n\n  YearViewService.prototype.rowLength = function (_) {\n    return CELLS_LENGTH;\n  };\n\n  YearViewService.prototype.skip = function (value, min) {\n    return durationInYears(min, value);\n  };\n\n  YearViewService.prototype.total = function (min, max) {\n    return durationInYears(min, max) + 1;\n  };\n\n  YearViewService.prototype.value = function (current) {\n    return current ? this.abbrMonthNames()[current.getMonth()] : '';\n  };\n\n  YearViewService.prototype.viewDate = function (date, max, border) {\n    if (border === void 0) {\n      border = 1;\n    }\n\n    var renderTwoViews = durationInYears(date, max) < border;\n    return renderTwoViews ? addYears(date, -1) : date;\n  };\n\n  YearViewService.prototype.abbrMonthNames = function () {\n    return this._intl.dateFormatNames({\n      nameType: 'abbreviated',\n      type: 'months'\n    });\n  };\n\n  YearViewService.prototype.normalize = function (cellDate, min, max) {\n    if (cellDate < min && this.isEqual(cellDate, min)) {\n      return cloneDate(min);\n    }\n\n    if (cellDate > max && this.isEqual(cellDate, max)) {\n      return cloneDate(max);\n    }\n\n    return cellDate;\n  };\n\n  return YearViewService;\n}();\n\nexport { YearViewService };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/YearViewService.js"],"names":["_a","addMonths","addYears","createDate","durationInYears","firstMonthOfYear","lastMonthOfYear","Action","getToday","isInRange","isInSelectionRange","range","EMPTY_SELECTIONRANGE","cloneDate","EMPTY_DATA","CELLS_LENGTH","ROWS_LENGTH","upStep","month","downStep","ACTIONS","Left","date","Up","getMonth","Right","Down","PrevView","NextView","FirstInView","LastInView","YearViewService","intl","_intl","prototype","addToDate","min","skip","datesList","start","count","map","i","data","options","_this","cellUID","focusedDate","isActiveView","max","selectedDate","selectionRange","viewDate","months","abbrMonthNames","firstDate","lastDate","currentYear","getFullYear","cells","today","rowOffset","baseDate","cellOffset","cellDate","normalize","changedYear","isRangeStart","isEqual","isRangeEnd","end","isInMiddle","isRangeMid","isSelected","Array","isArray","isSelectedFromArray","formattedValue","id","concat","getTime","isFocused","isWeekend","isRangeSplitEnd","isRangeSplitStart","isToday","title","cellTitle","value","candidate","dates","result","forEach","expected","isInArray","length","year","candidateValue","aboveMin","belowMax","isInSameView","move","action","modifier","navigationTitle","current","toString","rowLength","_","total","border","renderTwoViews","dateFormatNames","nameType","type"],"mappings":"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","sourcesContent":["var _a;\nimport { addMonths, addYears, createDate, durationInYears, firstMonthOfYear, lastMonthOfYear } from '@progress/kendo-date-math';\nimport { Action } from '../models/NavigationAction';\nimport { getToday, isInRange, isInSelectionRange, range } from '../../utils';\nimport { EMPTY_SELECTIONRANGE } from '../models/SelectionRange';\nimport { cloneDate } from '@progress/kendo-date-math';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 4;\nvar ROWS_LENGTH = 3;\nvar upStep = function (month) {\n    if (month > 4) {\n        return -5;\n    }\n    if (month < 2) {\n        return -2;\n    }\n    return -7;\n};\nvar downStep = function (month) {\n    if (month < 7) {\n        return 5;\n    }\n    if (month < 10) {\n        return 7;\n    }\n    return 2;\n};\nvar ACTIONS = (_a = {},\n    _a[Action.Left] = function (date) { return addMonths(date, -1); },\n    _a[Action.Up] = function (date) { return addMonths(date, upStep(date.getMonth())); },\n    _a[Action.Right] = function (date) { return addMonths(date, 1); },\n    _a[Action.Down] = function (date) { return addMonths(date, downStep(date.getMonth())); },\n    _a[Action.PrevView] = function (date) { return addYears(date, -1); },\n    _a[Action.NextView] = function (date) { return addYears(date, 1); },\n    _a[Action.FirstInView] = function (date) { return firstMonthOfYear(date); },\n    _a[Action.LastInView] = function (date) { return lastMonthOfYear(date); },\n    _a);\n/**\n * @hidden\n */\nvar YearViewService = /** @class */ (function () {\n    function YearViewService(intl) {\n        this._intl = intl;\n    }\n    YearViewService.prototype.addToDate = function (min, skip) {\n        return addYears(min, skip);\n    };\n    YearViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addYears(start, i); });\n    };\n    YearViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA;\n        }\n        var months = this.abbrMonthNames();\n        var firstDate = firstMonthOfYear(viewDate);\n        var lastDate = lastMonthOfYear(viewDate);\n        var currentYear = firstDate.getFullYear();\n        var cells = range(0, CELLS_LENGTH);\n        var today = getToday();\n        return range(0, ROWS_LENGTH).map(function (rowOffset) {\n            var baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);\n                var changedYear = currentYear < cellDate.getFullYear();\n                if (changedYear) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                var isSelected = isActiveView && (!Array.isArray(selectedDate)\n                    ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate)\n                    : _this.isSelectedFromArray(cellDate, selectedDate, min, max));\n                return {\n                    formattedValue: months[cellDate.getMonth()],\n                    id: \"\".concat(cellUID).concat(cellDate.getTime()),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isSelected,\n                    isInRange: isInRange(cellDate, min, max),\n                    isWeekend: false,\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    YearViewService.prototype.isSelectedFromArray = function (candidate, dates, min, max) {\n        var _this = this;\n        var result = false;\n        dates.forEach(function (date) {\n            if (isInRange(candidate, min, max) && _this.isEqual(candidate, date)) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    YearViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return candidate.getFullYear() === expected.getFullYear() &&\n            candidate.getMonth() === expected.getMonth();\n    };\n    YearViewService.prototype.isInArray = function (date, dates) {\n        if (!dates.length) {\n            return false;\n        }\n        var year = date.getFullYear();\n        return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();\n    };\n    YearViewService.prototype.isInRange = function (candidate, min, max) {\n        var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);\n        var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;\n        var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);\n        return aboveMin && belowMax;\n    };\n    YearViewService.prototype.isInSameView = function (candidate, value) {\n        return durationInYears(candidate, value) === 0;\n    };\n    YearViewService.prototype.isRangeStart = function (value) {\n        return value.getFullYear() % 10 === 0;\n    };\n    YearViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    YearViewService.prototype.cellTitle = function (value) {\n        return \"\".concat(value.getFullYear(), \" \").concat(this.value(value));\n    };\n    YearViewService.prototype.navigationTitle = function (value) {\n        return this.title(value);\n    };\n    YearViewService.prototype.title = function (current) {\n        return current ? current.getFullYear().toString() : '';\n    };\n    YearViewService.prototype.rowLength = function (_) {\n        return CELLS_LENGTH;\n    };\n    YearViewService.prototype.skip = function (value, min) {\n        return durationInYears(min, value);\n    };\n    YearViewService.prototype.total = function (min, max) {\n        return durationInYears(min, max) + 1;\n    };\n    YearViewService.prototype.value = function (current) {\n        return current ? this.abbrMonthNames()[current.getMonth()] : '';\n    };\n    YearViewService.prototype.viewDate = function (date, max, border) {\n        if (border === void 0) { border = 1; }\n        var renderTwoViews = durationInYears(date, max) < border;\n        return renderTwoViews ? addYears(date, -1) : date;\n    };\n    YearViewService.prototype.abbrMonthNames = function () {\n        return this._intl.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    YearViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    return YearViewService;\n}());\nexport { YearViewService };\n"]},"metadata":{},"sourceType":"module"}