{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { ErrorSource, toStackTraceString, ErrorHandling, createHandlingStack, formatErrorMessage } from '../../tools/error';\nimport { Observable } from '../../tools/observable';\nimport { clocksNow } from '../../tools/timeUtils';\nimport { find, jsonStringify } from '../../tools/utils';\nimport { callMonitored } from '../internalMonitoring';\nimport { computeStackTrace } from '../tracekit';\n/* eslint-disable no-console */\n\nexport function trackConsoleError(errorObservable) {\n  startConsoleErrorProxy().subscribe(function (error) {\n    return errorObservable.notify(error);\n  });\n}\nvar originalConsoleError;\nvar consoleErrorObservable;\n\nfunction startConsoleErrorProxy() {\n  if (!consoleErrorObservable) {\n    consoleErrorObservable = new Observable();\n    originalConsoleError = console.error;\n\n    console.error = function () {\n      var params = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        originalConsoleError.apply(console, params);\n\n        var rawError = __assign(__assign({}, buildErrorFromParams(params, handlingStack)), {\n          source: ErrorSource.CONSOLE,\n          startClocks: clocksNow(),\n          handling: ErrorHandling.HANDLED\n        });\n\n        consoleErrorObservable.notify(rawError);\n      });\n    };\n  }\n\n  return consoleErrorObservable;\n}\n\nexport function resetConsoleErrorProxy() {\n  if (consoleErrorObservable) {\n    consoleErrorObservable = undefined;\n    console.error = originalConsoleError;\n  }\n}\n\nfunction buildErrorFromParams(params, handlingStack) {\n  var firstErrorParam = find(params, function (param) {\n    return param instanceof Error;\n  });\n  return {\n    message: __spreadArrays(['console error:'], params).map(function (param) {\n      return formatConsoleParameters(param);\n    }).join(' '),\n    stack: firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined,\n    handlingStack: handlingStack\n  };\n}\n\nfunction formatConsoleParameters(param) {\n  if (typeof param === 'string') {\n    return param;\n  }\n\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param));\n  }\n\n  return jsonStringify(param, undefined, 2);\n}","map":{"version":3,"sources":["../../../src/domain/error/trackConsoleError.ts"],"names":[],"mappings":";AAAA,SACE,WADF,EAEE,kBAFF,EAGE,aAHF,EAIE,mBAJF,EAKE,kBALF,QAOO,mBAPP;AAQA,SAAS,UAAT,QAA2B,wBAA3B;AACA,SAAS,SAAT,QAA0B,uBAA1B;AACA,SAAS,IAAT,EAAe,aAAf,QAAoC,mBAApC;AACA,SAAS,aAAT,QAA8B,uBAA9B;AACA,SAAS,iBAAT,QAAkC,aAAlC;AAEA;;AACA,OAAM,SAAU,iBAAV,CAA4B,eAA5B,EAAiE;AACrE,EAAA,sBAAsB,GAAG,SAAzB,CAAmC,UAAC,KAAD,EAAM;AAAK,WAAA,eAAe,CAAC,MAAhB,CAAA,KAAA,CAAA;AAA6B,GAA3E;AACD;AAED,IAAI,oBAAJ;AACA,IAAI,sBAAJ;;AAEA,SAAS,sBAAT,GAA+B;AAC7B,MAAI,CAAC,sBAAL,EAA6B;AAC3B,IAAA,sBAAsB,GAAG,IAAI,UAAJ,EAAzB;AACA,IAAA,oBAAoB,GAAG,OAAO,CAAC,KAA/B;;AAEA,IAAA,OAAO,CAAC,KAAR,GAAgB,YAAA;AAAC,UAAA,MAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAoB;AAApB,QAAA,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACf,UAAM,aAAa,GAAG,mBAAmB,EAAzC;AACA,MAAA,aAAa,CAAC,YAAA;AACZ,QAAA,oBAAoB,CAAC,KAArB,CAA2B,OAA3B,EAAoC,MAApC;;AACA,YAAM,QAAQ,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACT,oBAAoB,CAAC,MAAD,EAAS,aAAT,CADX,CAAA,EACkC;AAC9C,UAAA,MAAM,EAAE,WAAW,CAAC,OAD0B;AAE9C,UAAA,WAAW,EAAE,SAAS,EAFwB;AAG9C,UAAA,QAAQ,EAAE,aAAa,CAAC;AAHsB,SADlC,CAAd;;AAMA,QAAA,sBAAuB,CAAC,MAAxB,CAA+B,QAA/B;AACD,OATY,CAAb;AAUD,KAZD;AAaD;;AACD,SAAO,sBAAP;AACD;;AAED,OAAM,SAAU,sBAAV,GAAgC;AACpC,MAAI,sBAAJ,EAA4B;AAC1B,IAAA,sBAAsB,GAAG,SAAzB;AACA,IAAA,OAAO,CAAC,KAAR,GAAgB,oBAAhB;AACD;AACF;;AAED,SAAS,oBAAT,CAA8B,MAA9B,EAAiD,aAAjD,EAAsE;AACpE,MAAM,eAAe,GAAG,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAe;AAAqB,WAAA,KAAK,YAAL,KAAA;AAAsB,GAAnE,CAA5B;AAEA,SAAO;AACL,IAAA,OAAO,EAAE,cAAA,CAAA,CAAC,gBAAD,CAAA,EAAsB,MAAtB,CAAA,CAA8B,GAA9B,CAAkC,UAAC,KAAD,EAAM;AAAK,aAAA,uBAAuB,CAAvB,KAAuB,CAAvB;AAA8B,KAA3E,EAA6E,IAA7E,CAAkF,GAAlF,CADJ;AAEL,IAAA,KAAK,EAAE,eAAe,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,eAAD,CAAlB,CAArB,GAA4D,SAF7E;AAGL,IAAA,aAAa,EAAA;AAHR,GAAP;AAKD;;AAED,SAAS,uBAAT,CAAiC,KAAjC,EAA+C;AAC7C,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AACD,MAAI,KAAK,YAAY,KAArB,EAA4B;AAC1B,WAAO,kBAAkB,CAAC,iBAAiB,CAAC,KAAD,CAAlB,CAAzB;AACD;;AACD,SAAO,aAAa,CAAC,KAAD,EAAQ,SAAR,EAAmB,CAAnB,CAApB;AACD","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { ErrorSource, toStackTraceString, ErrorHandling, createHandlingStack, formatErrorMessage, } from '../../tools/error';\nimport { Observable } from '../../tools/observable';\nimport { clocksNow } from '../../tools/timeUtils';\nimport { find, jsonStringify } from '../../tools/utils';\nimport { callMonitored } from '../internalMonitoring';\nimport { computeStackTrace } from '../tracekit';\n/* eslint-disable no-console */\nexport function trackConsoleError(errorObservable) {\n    startConsoleErrorProxy().subscribe(function (error) { return errorObservable.notify(error); });\n}\nvar originalConsoleError;\nvar consoleErrorObservable;\nfunction startConsoleErrorProxy() {\n    if (!consoleErrorObservable) {\n        consoleErrorObservable = new Observable();\n        originalConsoleError = console.error;\n        console.error = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            var handlingStack = createHandlingStack();\n            callMonitored(function () {\n                originalConsoleError.apply(console, params);\n                var rawError = __assign(__assign({}, buildErrorFromParams(params, handlingStack)), { source: ErrorSource.CONSOLE, startClocks: clocksNow(), handling: ErrorHandling.HANDLED });\n                consoleErrorObservable.notify(rawError);\n            });\n        };\n    }\n    return consoleErrorObservable;\n}\nexport function resetConsoleErrorProxy() {\n    if (consoleErrorObservable) {\n        consoleErrorObservable = undefined;\n        console.error = originalConsoleError;\n    }\n}\nfunction buildErrorFromParams(params, handlingStack) {\n    var firstErrorParam = find(params, function (param) { return param instanceof Error; });\n    return {\n        message: __spreadArrays(['console error:'], params).map(function (param) { return formatConsoleParameters(param); }).join(' '),\n        stack: firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined,\n        handlingStack: handlingStack,\n    };\n}\nfunction formatConsoleParameters(param) {\n    if (typeof param === 'string') {\n        return param;\n    }\n    if (param instanceof Error) {\n        return formatErrorMessage(computeStackTrace(param));\n    }\n    return jsonStringify(param, undefined, 2);\n}\n//# sourceMappingURL=trackConsoleError.js.map"]},"metadata":{},"sourceType":"module"}