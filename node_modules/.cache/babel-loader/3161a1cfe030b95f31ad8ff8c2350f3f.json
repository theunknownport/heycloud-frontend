{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { useAsyncFocusBlur } from '../hooks/useAsyncFocusBlur';\n/**\n * An utility High-order Component for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility HOC for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\n\nexport var AsyncFocusBlur = function (_a) {\n  var children = _a.children,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onSyncFocus = _a.onSyncFocus,\n      onSyncBlur = _a.onSyncBlur;\n  var args = useAsyncFocusBlur({\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onSyncFocus: onSyncFocus,\n    onSyncBlur: onSyncBlur\n  });\n  return React.createElement(React.Fragment, null, children.call(undefined, __assign({}, args)));\n};","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-common/dist/es/hocs/AsyncFocusBlur.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useAsyncFocusBlur","AsyncFocusBlur","_a","children","onFocus","onBlur","onSyncFocus","onSyncBlur","args","createElement","Fragment","undefined"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,EAAV,EAAc;AACtC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,OAAO,GAAGF,EAAE,CAACE,OAAzC;AAAA,MAAkDC,MAAM,GAAGH,EAAE,CAACG,MAA9D;AAAA,MAAsEC,WAAW,GAAGJ,EAAE,CAACI,WAAvF;AAAA,MAAoGC,UAAU,GAAGL,EAAE,CAACK,UAApH;AACA,MAAIC,IAAI,GAAGR,iBAAiB,CAAC;AAAEI,IAAAA,OAAO,EAAEA,OAAX;AAAoBC,IAAAA,MAAM,EAAEA,MAA5B;AAAoCC,IAAAA,WAAW,EAAEA,WAAjD;AAA8DC,IAAAA,UAAU,EAAEA;AAA1E,GAAD,CAA5B;AACA,SAAOR,KAAK,CAACU,aAAN,CAAoBV,KAAK,CAACW,QAA1B,EAAoC,IAApC,EAA0CP,QAAQ,CAACN,IAAT,CAAcc,SAAd,EAAyB1B,QAAQ,CAAC,EAAD,EAAKuB,IAAL,CAAjC,CAA1C,CAAP;AACH,CAJM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useAsyncFocusBlur } from '../hooks/useAsyncFocusBlur';\n/**\n * An utility High-order Component for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility HOC for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\nexport var AsyncFocusBlur = function (_a) {\n    var children = _a.children, onFocus = _a.onFocus, onBlur = _a.onBlur, onSyncFocus = _a.onSyncFocus, onSyncBlur = _a.onSyncBlur;\n    var args = useAsyncFocusBlur({ onFocus: onFocus, onBlur: onBlur, onSyncFocus: onSyncFocus, onSyncBlur: onSyncBlur });\n    return React.createElement(React.Fragment, null, children.call(undefined, __assign({}, args)));\n};\n"]},"metadata":{},"sourceType":"module"}