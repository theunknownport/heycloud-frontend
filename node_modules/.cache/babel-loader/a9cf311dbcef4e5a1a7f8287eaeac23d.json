{"ast":null,"code":"import { UploadFileStatus } from '../interfaces/UploadFileStatus';\nimport { guid } from '@progress/kendo-react-common';\nvar ampRegExp = /&/g;\nvar ltRegExp = /</g;\nvar quoteRegExp = /\"/g;\nvar aposRegExp = /'/g;\nvar gtRegExp = />/g;\n\nvar htmlEncode = function (value) {\n  return ('' + value).replace(ampRegExp, '&amp;').replace(ltRegExp, '&lt;').replace(gtRegExp, '&gt;').replace(quoteRegExp, '&quot;').replace(aposRegExp, '&#39;');\n};\n\nvar getFileExtension = function (fileName) {\n  var rFileExtension = /\\.([^\\.]+)$/;\n  var matches = fileName.match(rFileExtension);\n  return matches ? matches[0] : '';\n};\n\nvar getFileInfo = function (rawFile) {\n  var fileName = rawFile.name;\n  var fileSize = rawFile.size;\n  return {\n    extension: getFileExtension(fileName),\n    name: htmlEncode(fileName),\n    getRawFile: function () {\n      return rawFile;\n    },\n    size: fileSize,\n    status: UploadFileStatus.Selected,\n    progress: 0,\n    uid: ''\n  };\n};\n\nvar getAllFileInfo = function (rawFiles) {\n  var allFileInfo = new Array();\n  var i;\n\n  for (i = 0; i < rawFiles.length; i++) {\n    allFileInfo.push(getFileInfo(rawFiles[i]));\n  }\n\n  return allFileInfo;\n};\n\nvar fileHasValidationErrors = function (file) {\n  if (file.validationErrors && file.validationErrors.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nvar filesHaveValidationErrors = function (files) {\n  for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n    var file = files_1[_i];\n\n    if (fileHasValidationErrors(file)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar getTotalFilesSizeMessage = function (files) {\n  var totalSize = 0;\n  var i;\n\n  if (typeof files[0].size === 'number') {\n    for (i = 0; i < files.length; i++) {\n      if (files[i].size) {\n        totalSize += files[i].size || 0;\n      }\n    }\n  } else {\n    return '';\n  }\n\n  totalSize /= 1024;\n\n  if (totalSize < 1024) {\n    return totalSize.toFixed(2) + ' KB';\n  } else {\n    return (totalSize / 1024).toFixed(2) + ' MB';\n  }\n};\n\nvar assignGuidToFiles = function (files, batchFiles) {\n  var uid = guid();\n  return files.map(function (file) {\n    file.uid = batchFiles ? uid : guid();\n    return file;\n  });\n};\n\nvar getFileStatus = function (currentFiles) {\n  var isUploading = false;\n  var isUploaded = false;\n  var isUploadFailed = false;\n  var isUploadValidationFailed = false;\n\n  var checkFilesStatus = function (files) {\n    files.forEach(function (file) {\n      if (file.status === UploadFileStatus.Uploading) {\n        isUploading = true;\n      }\n\n      if (file.status === UploadFileStatus.Uploaded) {\n        isUploaded = true;\n      }\n\n      if (file.status === UploadFileStatus.UploadFailed) {\n        isUploadFailed = true;\n      }\n\n      if (fileHasValidationErrors(file)) {\n        isUploadValidationFailed = true;\n      }\n    });\n  };\n\n  if (Array.isArray(currentFiles)) {\n    checkFilesStatus(currentFiles);\n  } else {\n    Object.keys(currentFiles).forEach(function (key) {\n      checkFilesStatus(currentFiles[key]);\n    });\n  }\n\n  return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];\n};\n\nexport default {\n  fileHasValidationErrors: fileHasValidationErrors,\n  filesHaveValidationErrors: filesHaveValidationErrors,\n  getTotalFilesSizeMessage: getTotalFilesSizeMessage,\n  getAllFileInfo: getAllFileInfo,\n  getFileInfo: getFileInfo,\n  getFileExtension: getFileExtension,\n  htmlEncode: htmlEncode,\n  assignGuidToFiles: assignGuidToFiles,\n  getFileStatus: getFileStatus\n};","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-upload/dist/es/utils/utils.js"],"names":["UploadFileStatus","guid","ampRegExp","ltRegExp","quoteRegExp","aposRegExp","gtRegExp","htmlEncode","value","replace","getFileExtension","fileName","rFileExtension","matches","match","getFileInfo","rawFile","name","fileSize","size","extension","getRawFile","status","Selected","progress","uid","getAllFileInfo","rawFiles","allFileInfo","Array","i","length","push","fileHasValidationErrors","file","validationErrors","filesHaveValidationErrors","files","_i","files_1","getTotalFilesSizeMessage","totalSize","toFixed","assignGuidToFiles","batchFiles","map","getFileStatus","currentFiles","isUploading","isUploaded","isUploadFailed","isUploadValidationFailed","checkFilesStatus","forEach","Uploading","Uploaded","UploadFailed","isArray","Object","keys","key"],"mappings":"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","sourcesContent":["import { UploadFileStatus } from '../interfaces/UploadFileStatus';\nimport { guid } from '@progress/kendo-react-common';\nvar ampRegExp = /&/g;\nvar ltRegExp = /</g;\nvar quoteRegExp = /\"/g;\nvar aposRegExp = /'/g;\nvar gtRegExp = />/g;\nvar htmlEncode = function (value) {\n    return ('' + value).replace(ampRegExp, '&amp;')\n        .replace(ltRegExp, '&lt;')\n        .replace(gtRegExp, '&gt;')\n        .replace(quoteRegExp, '&quot;')\n        .replace(aposRegExp, '&#39;');\n};\nvar getFileExtension = function (fileName) {\n    var rFileExtension = /\\.([^\\.]+)$/;\n    var matches = fileName.match(rFileExtension);\n    return matches ? matches[0] : '';\n};\nvar getFileInfo = function (rawFile) {\n    var fileName = rawFile.name;\n    var fileSize = rawFile.size;\n    return {\n        extension: getFileExtension(fileName),\n        name: htmlEncode(fileName),\n        getRawFile: function () { return rawFile; },\n        size: fileSize,\n        status: UploadFileStatus.Selected,\n        progress: 0,\n        uid: ''\n    };\n};\nvar getAllFileInfo = function (rawFiles) {\n    var allFileInfo = new Array();\n    var i;\n    for (i = 0; i < rawFiles.length; i++) {\n        allFileInfo.push(getFileInfo(rawFiles[i]));\n    }\n    return allFileInfo;\n};\nvar fileHasValidationErrors = function (file) {\n    if (file.validationErrors && file.validationErrors.length > 0) {\n        return true;\n    }\n    return false;\n};\nvar filesHaveValidationErrors = function (files) {\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n        var file = files_1[_i];\n        if (fileHasValidationErrors(file)) {\n            return true;\n        }\n    }\n    return false;\n};\nvar getTotalFilesSizeMessage = function (files) {\n    var totalSize = 0;\n    var i;\n    if (typeof files[0].size === 'number') {\n        for (i = 0; i < files.length; i++) {\n            if (files[i].size) {\n                totalSize += (files[i].size || 0);\n            }\n        }\n    }\n    else {\n        return '';\n    }\n    totalSize /= 1024;\n    if (totalSize < 1024) {\n        return totalSize.toFixed(2) + ' KB';\n    }\n    else {\n        return (totalSize / 1024).toFixed(2) + ' MB';\n    }\n};\nvar assignGuidToFiles = function (files, batchFiles) {\n    var uid = guid();\n    return files.map(function (file) {\n        file.uid = batchFiles ? uid : guid();\n        return file;\n    });\n};\nvar getFileStatus = function (currentFiles) {\n    var isUploading = false;\n    var isUploaded = false;\n    var isUploadFailed = false;\n    var isUploadValidationFailed = false;\n    var checkFilesStatus = function (files) {\n        files.forEach(function (file) {\n            if (file.status === UploadFileStatus.Uploading) {\n                isUploading = true;\n            }\n            if (file.status === UploadFileStatus.Uploaded) {\n                isUploaded = true;\n            }\n            if (file.status === UploadFileStatus.UploadFailed) {\n                isUploadFailed = true;\n            }\n            if (fileHasValidationErrors(file)) {\n                isUploadValidationFailed = true;\n            }\n        });\n    };\n    if (Array.isArray(currentFiles)) {\n        checkFilesStatus(currentFiles);\n    }\n    else {\n        Object.keys(currentFiles).forEach(function (key) {\n            checkFilesStatus(currentFiles[key]);\n        });\n    }\n    return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];\n};\nexport default {\n    fileHasValidationErrors: fileHasValidationErrors,\n    filesHaveValidationErrors: filesHaveValidationErrors,\n    getTotalFilesSizeMessage: getTotalFilesSizeMessage,\n    getAllFileInfo: getAllFileInfo,\n    getFileInfo: getFileInfo,\n    getFileExtension: getFileExtension,\n    htmlEncode: htmlEncode,\n    assignGuidToFiles: assignGuidToFiles,\n    getFileStatus: getFileStatus\n};\n"]},"metadata":{},"sourceType":"module"}