{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { cacheCookieAccess, COOKIE_ACCESS_DELAY } from '../browser/cookie';\nimport { Observable } from '../tools/observable';\nimport * as utils from '../tools/utils';\nimport { monitor } from './internalMonitoring';\nimport { tryOldCookiesMigration } from './oldCookiesMigration';\nexport var SESSION_COOKIE_NAME = '_dd_s';\nexport var SESSION_EXPIRATION_DELAY = 15 * utils.ONE_MINUTE;\nexport var SESSION_TIME_OUT_DELAY = 4 * utils.ONE_HOUR;\nexport var VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE;\n/**\n * Limit access to cookie to avoid performance issues\n */\n\nexport function startSessionManagement(options, productKey, computeSessionState) {\n  var sessionCookie = cacheCookieAccess(SESSION_COOKIE_NAME, options);\n  tryOldCookiesMigration(sessionCookie);\n  var renewObservable = new Observable();\n  var inMemorySession = retrieveActiveSession(sessionCookie);\n  var expandOrRenewSession = utils.throttle(monitor(function () {\n    sessionCookie.clearCache();\n    var cookieSession = retrieveActiveSession(sessionCookie);\n\n    var _a = computeSessionState(cookieSession[productKey]),\n        trackingType = _a.trackingType,\n        isTracked = _a.isTracked;\n\n    cookieSession[productKey] = trackingType;\n\n    if (isTracked && !cookieSession.id) {\n      cookieSession.id = utils.generateUUID();\n      cookieSession.created = String(Date.now());\n    } // save changes and expand session duration\n\n\n    persistSession(cookieSession, sessionCookie); // If the session id has changed, notify that the session has been renewed\n\n    if (isTracked && inMemorySession.id !== cookieSession.id) {\n      inMemorySession = __assign({}, cookieSession);\n      renewObservable.notify();\n    }\n\n    inMemorySession = __assign({}, cookieSession);\n  }), COOKIE_ACCESS_DELAY).throttled;\n\n  var expandSession = function () {\n    sessionCookie.clearCache();\n    var session = retrieveActiveSession(sessionCookie);\n    persistSession(session, sessionCookie);\n  };\n\n  expandOrRenewSession();\n  trackActivity(expandOrRenewSession);\n  trackVisibility(expandSession);\n  return {\n    getId: function () {\n      return retrieveActiveSession(sessionCookie).id;\n    },\n    getTrackingType: function () {\n      return retrieveActiveSession(sessionCookie)[productKey];\n    },\n    getInMemoryTrackingType: function () {\n      return inMemorySession[productKey];\n    },\n    renewObservable: renewObservable\n  };\n}\nvar SESSION_ENTRY_REGEXP = /^([a-z]+)=([a-z0-9-]+)$/;\nvar SESSION_ENTRY_SEPARATOR = '&';\nexport function isValidSessionString(sessionString) {\n  return sessionString !== undefined && (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString));\n}\n\nfunction retrieveActiveSession(sessionCookie) {\n  var session = retrieveSession(sessionCookie);\n\n  if (isActiveSession(session)) {\n    return session;\n  }\n\n  clearSession(sessionCookie);\n  return {};\n}\n\nfunction isActiveSession(session) {\n  // created and expire can be undefined for versions which was not storing them\n  // these checks could be removed when older versions will not be available/live anymore\n  return (session.created === undefined || Date.now() - Number(session.created) < SESSION_TIME_OUT_DELAY) && (session.expire === undefined || Date.now() < Number(session.expire));\n}\n\nfunction retrieveSession(sessionCookie) {\n  var sessionString = sessionCookie.get();\n  var session = {};\n\n  if (isValidSessionString(sessionString)) {\n    sessionString.split(SESSION_ENTRY_SEPARATOR).forEach(function (entry) {\n      var matches = SESSION_ENTRY_REGEXP.exec(entry);\n\n      if (matches !== null) {\n        var key = matches[1],\n            value = matches[2];\n        session[key] = value;\n      }\n    });\n  }\n\n  return session;\n}\n\nexport function persistSession(session, cookie) {\n  if (utils.isEmptyObject(session)) {\n    clearSession(cookie);\n    return;\n  }\n\n  session.expire = String(Date.now() + SESSION_EXPIRATION_DELAY);\n  var cookieString = utils.objectEntries(session).map(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    return key + \"=\" + value;\n  }).join(SESSION_ENTRY_SEPARATOR);\n  cookie.set(cookieString, SESSION_EXPIRATION_DELAY);\n}\n\nfunction clearSession(cookie) {\n  cookie.set('', 0);\n}\n\nexport function stopSessionManagement() {\n  stopCallbacks.forEach(function (e) {\n    return e();\n  });\n  stopCallbacks = [];\n}\nvar stopCallbacks = [];\nexport function trackActivity(expandOrRenewSession) {\n  var stop = utils.addEventListeners(window, [\"click\"\n  /* CLICK */\n  , \"touchstart\"\n  /* TOUCH_START */\n  , \"keydown\"\n  /* KEY_DOWN */\n  , \"scroll\"\n  /* SCROLL */\n  ], expandOrRenewSession, {\n    capture: true,\n    passive: true\n  }).stop;\n  stopCallbacks.push(stop);\n}\n\nfunction trackVisibility(expandSession) {\n  var expandSessionWhenVisible = monitor(function () {\n    if (document.visibilityState === 'visible') {\n      expandSession();\n    }\n  });\n  var stop = utils.addEventListener(document, \"visibilitychange\"\n  /* VISIBILITY_CHANGE */\n  , expandSessionWhenVisible).stop;\n  stopCallbacks.push(stop);\n  var visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);\n  stopCallbacks.push(function () {\n    clearInterval(visibilityCheckInterval);\n  });\n}","map":{"version":3,"sources":["../../src/domain/sessionManagement.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { cacheCookieAccess, COOKIE_ACCESS_DELAY } from '../browser/cookie';\nimport { Observable } from '../tools/observable';\nimport * as utils from '../tools/utils';\nimport { monitor } from './internalMonitoring';\nimport { tryOldCookiesMigration } from './oldCookiesMigration';\nexport var SESSION_COOKIE_NAME = '_dd_s';\nexport var SESSION_EXPIRATION_DELAY = 15 * utils.ONE_MINUTE;\nexport var SESSION_TIME_OUT_DELAY = 4 * utils.ONE_HOUR;\nexport var VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE;\n/**\n * Limit access to cookie to avoid performance issues\n */\nexport function startSessionManagement(options, productKey, computeSessionState) {\n    var sessionCookie = cacheCookieAccess(SESSION_COOKIE_NAME, options);\n    tryOldCookiesMigration(sessionCookie);\n    var renewObservable = new Observable();\n    var inMemorySession = retrieveActiveSession(sessionCookie);\n    var expandOrRenewSession = utils.throttle(monitor(function () {\n        sessionCookie.clearCache();\n        var cookieSession = retrieveActiveSession(sessionCookie);\n        var _a = computeSessionState(cookieSession[productKey]), trackingType = _a.trackingType, isTracked = _a.isTracked;\n        cookieSession[productKey] = trackingType;\n        if (isTracked && !cookieSession.id) {\n            cookieSession.id = utils.generateUUID();\n            cookieSession.created = String(Date.now());\n        }\n        // save changes and expand session duration\n        persistSession(cookieSession, sessionCookie);\n        // If the session id has changed, notify that the session has been renewed\n        if (isTracked && inMemorySession.id !== cookieSession.id) {\n            inMemorySession = __assign({}, cookieSession);\n            renewObservable.notify();\n        }\n        inMemorySession = __assign({}, cookieSession);\n    }), COOKIE_ACCESS_DELAY).throttled;\n    var expandSession = function () {\n        sessionCookie.clearCache();\n        var session = retrieveActiveSession(sessionCookie);\n        persistSession(session, sessionCookie);\n    };\n    expandOrRenewSession();\n    trackActivity(expandOrRenewSession);\n    trackVisibility(expandSession);\n    return {\n        getId: function () { return retrieveActiveSession(sessionCookie).id; },\n        getTrackingType: function () { return retrieveActiveSession(sessionCookie)[productKey]; },\n        getInMemoryTrackingType: function () { return inMemorySession[productKey]; },\n        renewObservable: renewObservable,\n    };\n}\nvar SESSION_ENTRY_REGEXP = /^([a-z]+)=([a-z0-9-]+)$/;\nvar SESSION_ENTRY_SEPARATOR = '&';\nexport function isValidSessionString(sessionString) {\n    return (sessionString !== undefined &&\n        (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString)));\n}\nfunction retrieveActiveSession(sessionCookie) {\n    var session = retrieveSession(sessionCookie);\n    if (isActiveSession(session)) {\n        return session;\n    }\n    clearSession(sessionCookie);\n    return {};\n}\nfunction isActiveSession(session) {\n    // created and expire can be undefined for versions which was not storing them\n    // these checks could be removed when older versions will not be available/live anymore\n    return ((session.created === undefined || Date.now() - Number(session.created) < SESSION_TIME_OUT_DELAY) &&\n        (session.expire === undefined || Date.now() < Number(session.expire)));\n}\nfunction retrieveSession(sessionCookie) {\n    var sessionString = sessionCookie.get();\n    var session = {};\n    if (isValidSessionString(sessionString)) {\n        sessionString.split(SESSION_ENTRY_SEPARATOR).forEach(function (entry) {\n            var matches = SESSION_ENTRY_REGEXP.exec(entry);\n            if (matches !== null) {\n                var key = matches[1], value = matches[2];\n                session[key] = value;\n            }\n        });\n    }\n    return session;\n}\nexport function persistSession(session, cookie) {\n    if (utils.isEmptyObject(session)) {\n        clearSession(cookie);\n        return;\n    }\n    session.expire = String(Date.now() + SESSION_EXPIRATION_DELAY);\n    var cookieString = utils\n        .objectEntries(session)\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return key + \"=\" + value;\n    })\n        .join(SESSION_ENTRY_SEPARATOR);\n    cookie.set(cookieString, SESSION_EXPIRATION_DELAY);\n}\nfunction clearSession(cookie) {\n    cookie.set('', 0);\n}\nexport function stopSessionManagement() {\n    stopCallbacks.forEach(function (e) { return e(); });\n    stopCallbacks = [];\n}\nvar stopCallbacks = [];\nexport function trackActivity(expandOrRenewSession) {\n    var stop = utils.addEventListeners(window, [\"click\" /* CLICK */, \"touchstart\" /* TOUCH_START */, \"keydown\" /* KEY_DOWN */, \"scroll\" /* SCROLL */], expandOrRenewSession, { capture: true, passive: true }).stop;\n    stopCallbacks.push(stop);\n}\nfunction trackVisibility(expandSession) {\n    var expandSessionWhenVisible = monitor(function () {\n        if (document.visibilityState === 'visible') {\n            expandSession();\n        }\n    });\n    var stop = utils.addEventListener(document, \"visibilitychange\" /* VISIBILITY_CHANGE */, expandSessionWhenVisible).stop;\n    stopCallbacks.push(stop);\n    var visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);\n    stopCallbacks.push(function () {\n        clearInterval(visibilityCheckInterval);\n    });\n}\n//# sourceMappingURL=sessionManagement.js.map"]},"metadata":{},"sourceType":"module"}