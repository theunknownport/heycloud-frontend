{"ast":null,"code":"import { clocksNow, ErrorSource, ONE_MINUTE } from '..';\nexport function createEventRateLimiter(eventType, limit, onLimitReached) {\n  var eventCount = 0;\n  var allowNextEvent = false;\n  return {\n    isLimitReached: function () {\n      if (eventCount === 0) {\n        setTimeout(function () {\n          eventCount = 0;\n        }, ONE_MINUTE);\n      }\n\n      eventCount += 1;\n\n      if (eventCount <= limit || allowNextEvent) {\n        allowNextEvent = false;\n        return false;\n      }\n\n      if (eventCount === limit + 1) {\n        allowNextEvent = true;\n\n        try {\n          onLimitReached({\n            message: \"Reached max number of \" + eventType + \"s by minute: \" + limit,\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow()\n          });\n        } finally {\n          allowNextEvent = false;\n        }\n      }\n\n      return true;\n    }\n  };\n}","map":{"version":3,"sources":["../../src/tools/createEventRateLimiter.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,WAApB,EAAiC,UAAjC,QAA6D,IAA7D;AAIA,OAAM,SAAU,sBAAV,CACJ,SADI,EAEJ,KAFI,EAGJ,cAHI,EAG0C;AAE9C,MAAI,UAAU,GAAG,CAAjB;AACA,MAAI,cAAc,GAAG,KAArB;AAEA,SAAO;AACL,IAAA,cAAc,EAAA,YAAA;AACZ,UAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,QAAA,UAAU,CAAC,YAAA;AACT,UAAA,UAAU,GAAG,CAAb;AACD,SAFS,EAEP,UAFO,CAAV;AAGD;;AAED,MAAA,UAAU,IAAI,CAAd;;AACA,UAAI,UAAU,IAAI,KAAd,IAAuB,cAA3B,EAA2C;AACzC,QAAA,cAAc,GAAG,KAAjB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,UAAU,KAAK,KAAK,GAAG,CAA3B,EAA8B;AAC5B,QAAA,cAAc,GAAG,IAAjB;;AACA,YAAI;AACF,UAAA,cAAc,CAAC;AACb,YAAA,OAAO,EAAE,2BAAyB,SAAzB,GAAkC,eAAlC,GAAkD,KAD9C;AAEb,YAAA,MAAM,EAAE,WAAW,CAAC,KAFP;AAGb,YAAA,WAAW,EAAE,SAAS;AAHT,WAAD,CAAd;AAKD,SAND,SAMU;AACR,UAAA,cAAc,GAAG,KAAjB;AACD;AACF;;AAED,aAAO,IAAP;AACD;AA5BI,GAAP;AA8BD","sourceRoot":"","sourcesContent":["import { clocksNow, ErrorSource, ONE_MINUTE } from '..';\nexport function createEventRateLimiter(eventType, limit, onLimitReached) {\n    var eventCount = 0;\n    var allowNextEvent = false;\n    return {\n        isLimitReached: function () {\n            if (eventCount === 0) {\n                setTimeout(function () {\n                    eventCount = 0;\n                }, ONE_MINUTE);\n            }\n            eventCount += 1;\n            if (eventCount <= limit || allowNextEvent) {\n                allowNextEvent = false;\n                return false;\n            }\n            if (eventCount === limit + 1) {\n                allowNextEvent = true;\n                try {\n                    onLimitReached({\n                        message: \"Reached max number of \" + eventType + \"s by minute: \" + limit,\n                        source: ErrorSource.AGENT,\n                        startClocks: clocksNow(),\n                    });\n                }\n                finally {\n                    allowNextEvent = false;\n                }\n            }\n            return true;\n        },\n    };\n}\n//# sourceMappingURL=createEventRateLimiter.js.map"]},"metadata":{},"sourceType":"module"}