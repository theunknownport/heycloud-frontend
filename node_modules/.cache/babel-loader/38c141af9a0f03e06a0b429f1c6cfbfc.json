{"ast":null,"code":"import { buildUrl, isExperimentalFeatureEnabled } from '@datadog/browser-core';\nimport { CENSORED_STRING_MARK } from '../../constants';\nimport { shouldMaskNode } from './privacy';\nvar serializedNodeIds = new WeakMap();\nexport function hasSerializedNode(node) {\n  return serializedNodeIds.has(node);\n}\nexport function nodeAndAncestorsHaveSerializedNode(node) {\n  var current = node;\n\n  while (current) {\n    if (!hasSerializedNode(current)) {\n      return false;\n    }\n\n    current = current.parentNode;\n  }\n\n  return true;\n}\nexport function getSerializedNodeId(node) {\n  return serializedNodeIds.get(node);\n}\nexport function setSerializedNodeId(node, serializeNodeId) {\n  serializedNodeIds.set(node, serializeNodeId);\n}\nvar URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")([^\"]*)\"|([^)]*))\\)/gm;\nvar ABSOLUTE_URL = /^[A-Za-z]+:|^\\/\\//;\nvar DATA_URI = /^data:.*,/i;\nexport function makeStylesheetUrlsAbsolute(cssText, baseUrl) {\n  if (isExperimentalFeatureEnabled('base-tag')) {\n    return cssText;\n  }\n\n  return cssText.replace(URL_IN_CSS_REF, function (origin, quote1, path1, quote2, path2, path3) {\n    var filePath = path1 || path2 || path3;\n\n    if (!filePath || ABSOLUTE_URL.test(filePath) || DATA_URI.test(filePath)) {\n      return origin;\n    }\n\n    var maybeQuote = quote1 || quote2 || '';\n    return \"url(\" + maybeQuote + makeUrlAbsolute(filePath, baseUrl) + maybeQuote + \")\";\n  });\n}\nvar SRCSET_URLS = /(^\\s*|,\\s*)([^\\s,]+)/g;\nexport function makeSrcsetUrlsAbsolute(attributeValue, baseUrl) {\n  if (isExperimentalFeatureEnabled('base-tag')) {\n    return attributeValue;\n  }\n\n  return attributeValue.replace(SRCSET_URLS, function (_, prefix, url) {\n    return \"\" + prefix + makeUrlAbsolute(url, baseUrl);\n  });\n}\nexport function makeUrlAbsolute(url, baseUrl) {\n  try {\n    if (isExperimentalFeatureEnabled('base-tag')) {\n      return url;\n    }\n\n    return buildUrl(url.trim(), baseUrl).href;\n  } catch (_) {\n    return url;\n  }\n}\n/**\n * Get the element \"value\" to be serialized as an attribute or an input update record. It respects\n * the input privacy mode of the element.\n * PERFROMANCE OPTIMIZATION: Assumes that privacy level `HIDDEN` is never encountered because of earlier checks.\n */\n\nexport function getElementInputValue(element, nodePrivacyLevel) {\n  /*\n   BROWSER SPEC NOTE: <input>, <select>\n   For some <input> elements, the `value` is an exceptional property/attribute that has the\n   value synced between el.value and el.getAttribute()\n   input[type=button,checkbox,hidden,image,radio,reset,submit]\n   */\n  var tagName = element.tagName;\n  var value = element.value;\n\n  if (shouldMaskNode(element, nodePrivacyLevel)) {\n    var type = element.type;\n\n    if (tagName === 'INPUT' && (type === 'button' || type === 'submit' || type === 'reset')) {\n      // Overrule `MASK` privacy level for button-like element values, as they are used during replay\n      // to display their label. They can still be hidden via the \"hidden\" privacy attribute or class name.\n      return value;\n    } else if (!value || tagName === 'OPTION') {\n      // <Option> value provides no benefit\n      return;\n    }\n\n    return CENSORED_STRING_MARK;\n  }\n\n  if (tagName === 'OPTION' || tagName === 'SELECT') {\n    return element.value;\n  }\n\n  if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {\n    return;\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../src/domain/record/serializationUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { buildUrl, isExperimentalFeatureEnabled } from '@datadog/browser-core';\nimport { CENSORED_STRING_MARK } from '../../constants';\nimport { shouldMaskNode } from './privacy';\nvar serializedNodeIds = new WeakMap();\nexport function hasSerializedNode(node) {\n    return serializedNodeIds.has(node);\n}\nexport function nodeAndAncestorsHaveSerializedNode(node) {\n    var current = node;\n    while (current) {\n        if (!hasSerializedNode(current)) {\n            return false;\n        }\n        current = current.parentNode;\n    }\n    return true;\n}\nexport function getSerializedNodeId(node) {\n    return serializedNodeIds.get(node);\n}\nexport function setSerializedNodeId(node, serializeNodeId) {\n    serializedNodeIds.set(node, serializeNodeId);\n}\nvar URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")([^\"]*)\"|([^)]*))\\)/gm;\nvar ABSOLUTE_URL = /^[A-Za-z]+:|^\\/\\//;\nvar DATA_URI = /^data:.*,/i;\nexport function makeStylesheetUrlsAbsolute(cssText, baseUrl) {\n    if (isExperimentalFeatureEnabled('base-tag')) {\n        return cssText;\n    }\n    return cssText.replace(URL_IN_CSS_REF, function (origin, quote1, path1, quote2, path2, path3) {\n        var filePath = path1 || path2 || path3;\n        if (!filePath || ABSOLUTE_URL.test(filePath) || DATA_URI.test(filePath)) {\n            return origin;\n        }\n        var maybeQuote = quote1 || quote2 || '';\n        return \"url(\" + maybeQuote + makeUrlAbsolute(filePath, baseUrl) + maybeQuote + \")\";\n    });\n}\nvar SRCSET_URLS = /(^\\s*|,\\s*)([^\\s,]+)/g;\nexport function makeSrcsetUrlsAbsolute(attributeValue, baseUrl) {\n    if (isExperimentalFeatureEnabled('base-tag')) {\n        return attributeValue;\n    }\n    return attributeValue.replace(SRCSET_URLS, function (_, prefix, url) { return \"\" + prefix + makeUrlAbsolute(url, baseUrl); });\n}\nexport function makeUrlAbsolute(url, baseUrl) {\n    try {\n        if (isExperimentalFeatureEnabled('base-tag')) {\n            return url;\n        }\n        return buildUrl(url.trim(), baseUrl).href;\n    }\n    catch (_) {\n        return url;\n    }\n}\n/**\n * Get the element \"value\" to be serialized as an attribute or an input update record. It respects\n * the input privacy mode of the element.\n * PERFROMANCE OPTIMIZATION: Assumes that privacy level `HIDDEN` is never encountered because of earlier checks.\n */\nexport function getElementInputValue(element, nodePrivacyLevel) {\n    /*\n     BROWSER SPEC NOTE: <input>, <select>\n     For some <input> elements, the `value` is an exceptional property/attribute that has the\n     value synced between el.value and el.getAttribute()\n     input[type=button,checkbox,hidden,image,radio,reset,submit]\n     */\n    var tagName = element.tagName;\n    var value = element.value;\n    if (shouldMaskNode(element, nodePrivacyLevel)) {\n        var type = element.type;\n        if (tagName === 'INPUT' && (type === 'button' || type === 'submit' || type === 'reset')) {\n            // Overrule `MASK` privacy level for button-like element values, as they are used during replay\n            // to display their label. They can still be hidden via the \"hidden\" privacy attribute or class name.\n            return value;\n        }\n        else if (!value || tagName === 'OPTION') {\n            // <Option> value provides no benefit\n            return;\n        }\n        return CENSORED_STRING_MARK;\n    }\n    if (tagName === 'OPTION' || tagName === 'SELECT') {\n        return element.value;\n    }\n    if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {\n        return;\n    }\n    return value;\n}\n//# sourceMappingURL=serializationUtils.js.map"]},"metadata":{},"sourceType":"module"}