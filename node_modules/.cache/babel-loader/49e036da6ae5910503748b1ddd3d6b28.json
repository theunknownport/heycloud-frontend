{"ast":null,"code":"import { performDraw, startSessionManagement } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nexport var RUM_SESSION_KEY = 'rum';\nexport var RumSessionPlan;\n\n(function (RumSessionPlan) {\n  RumSessionPlan[RumSessionPlan[\"LITE\"] = 1] = \"LITE\";\n  RumSessionPlan[RumSessionPlan[\"REPLAY\"] = 2] = \"REPLAY\";\n})(RumSessionPlan || (RumSessionPlan = {}));\n\nexport var RumTrackingType;\n\n(function (RumTrackingType) {\n  RumTrackingType[\"NOT_TRACKED\"] = \"0\"; // Note: the \"tracking type\" value (stored in the session cookie) does not match the \"session\n  // plan\" value (sent in RUM events). This is expected, and was done to keep retrocompatibility\n  // with active sessions when upgrading the SDK.\n\n  RumTrackingType[\"TRACKED_REPLAY\"] = \"1\";\n  RumTrackingType[\"TRACKED_LITE\"] = \"2\";\n})(RumTrackingType || (RumTrackingType = {}));\n\nexport function startRumSession(configuration, lifeCycle) {\n  var session = startSessionManagement(configuration.cookieOptions, RUM_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  });\n  session.renewObservable.subscribe(function () {\n    lifeCycle.notify(LifeCycleEventType.SESSION_EXPIRED);\n    lifeCycle.notify(LifeCycleEventType.SESSION_RENEWED);\n  });\n  return {\n    getId: session.getId,\n    isTracked: function () {\n      return isSessionTracked(session);\n    },\n    hasReplayPlan: function () {\n      return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_REPLAY;\n    },\n    hasLitePlan: function () {\n      return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_LITE;\n    },\n    getInMemoryPlan: function () {\n      return session.getInMemoryTrackingType();\n    }\n  };\n}\n\nfunction isSessionTracked(session) {\n  return session.getId() !== undefined && isTypeTracked(session.getTrackingType());\n}\n\nfunction computeSessionState(configuration, rawTrackingType) {\n  var trackingType;\n\n  if (hasValidRumSession(rawTrackingType)) {\n    trackingType = rawTrackingType;\n  } else if (!performDraw(configuration.sampleRate)) {\n    trackingType = RumTrackingType.NOT_TRACKED;\n  } else if (!performDraw(configuration.replaySampleRate)) {\n    trackingType = RumTrackingType.TRACKED_LITE;\n  } else {\n    trackingType = RumTrackingType.TRACKED_REPLAY;\n  }\n\n  return {\n    trackingType: trackingType,\n    isTracked: isTypeTracked(trackingType)\n  };\n}\n\nfunction hasValidRumSession(trackingType) {\n  return trackingType === RumTrackingType.NOT_TRACKED || trackingType === RumTrackingType.TRACKED_REPLAY || trackingType === RumTrackingType.TRACKED_LITE;\n}\n\nfunction isTypeTracked(rumSessionType) {\n  return rumSessionType === RumTrackingType.TRACKED_LITE || rumSessionType === RumTrackingType.TRACKED_REPLAY;\n}","map":{"version":3,"sources":["../../src/domain/rumSession.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { performDraw, startSessionManagement } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nexport var RUM_SESSION_KEY = 'rum';\nexport var RumSessionPlan;\n(function (RumSessionPlan) {\n    RumSessionPlan[RumSessionPlan[\"LITE\"] = 1] = \"LITE\";\n    RumSessionPlan[RumSessionPlan[\"REPLAY\"] = 2] = \"REPLAY\";\n})(RumSessionPlan || (RumSessionPlan = {}));\nexport var RumTrackingType;\n(function (RumTrackingType) {\n    RumTrackingType[\"NOT_TRACKED\"] = \"0\";\n    // Note: the \"tracking type\" value (stored in the session cookie) does not match the \"session\n    // plan\" value (sent in RUM events). This is expected, and was done to keep retrocompatibility\n    // with active sessions when upgrading the SDK.\n    RumTrackingType[\"TRACKED_REPLAY\"] = \"1\";\n    RumTrackingType[\"TRACKED_LITE\"] = \"2\";\n})(RumTrackingType || (RumTrackingType = {}));\nexport function startRumSession(configuration, lifeCycle) {\n    var session = startSessionManagement(configuration.cookieOptions, RUM_SESSION_KEY, function (rawTrackingType) {\n        return computeSessionState(configuration, rawTrackingType);\n    });\n    session.renewObservable.subscribe(function () {\n        lifeCycle.notify(LifeCycleEventType.SESSION_EXPIRED);\n        lifeCycle.notify(LifeCycleEventType.SESSION_RENEWED);\n    });\n    return {\n        getId: session.getId,\n        isTracked: function () { return isSessionTracked(session); },\n        hasReplayPlan: function () { return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_REPLAY; },\n        hasLitePlan: function () { return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_LITE; },\n        getInMemoryPlan: function () { return session.getInMemoryTrackingType(); },\n    };\n}\nfunction isSessionTracked(session) {\n    return session.getId() !== undefined && isTypeTracked(session.getTrackingType());\n}\nfunction computeSessionState(configuration, rawTrackingType) {\n    var trackingType;\n    if (hasValidRumSession(rawTrackingType)) {\n        trackingType = rawTrackingType;\n    }\n    else if (!performDraw(configuration.sampleRate)) {\n        trackingType = RumTrackingType.NOT_TRACKED;\n    }\n    else if (!performDraw(configuration.replaySampleRate)) {\n        trackingType = RumTrackingType.TRACKED_LITE;\n    }\n    else {\n        trackingType = RumTrackingType.TRACKED_REPLAY;\n    }\n    return {\n        trackingType: trackingType,\n        isTracked: isTypeTracked(trackingType),\n    };\n}\nfunction hasValidRumSession(trackingType) {\n    return (trackingType === RumTrackingType.NOT_TRACKED ||\n        trackingType === RumTrackingType.TRACKED_REPLAY ||\n        trackingType === RumTrackingType.TRACKED_LITE);\n}\nfunction isTypeTracked(rumSessionType) {\n    return rumSessionType === RumTrackingType.TRACKED_LITE || rumSessionType === RumTrackingType.TRACKED_REPLAY;\n}\n//# sourceMappingURL=rumSession.js.map"]},"metadata":{},"sourceType":"module"}