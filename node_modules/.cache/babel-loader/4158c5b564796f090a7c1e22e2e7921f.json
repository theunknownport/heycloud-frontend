{"ast":null,"code":"import { ONE_MINUTE, relativeNow } from '@datadog/browser-core';\nexport var CLEAR_OLD_CONTEXTS_INTERVAL = ONE_MINUTE;\n\nvar ContextHistory =\n/** @class */\nfunction () {\n  function ContextHistory(expireDelay) {\n    var _this = this;\n\n    this.expireDelay = expireDelay;\n    this.previousContexts = [];\n    this.clearOldContextsInterval = setInterval(function () {\n      return _this.clearOldContexts();\n    }, CLEAR_OLD_CONTEXTS_INTERVAL);\n  }\n\n  ContextHistory.prototype.find = function (startTime) {\n    if (startTime === undefined || this.current !== undefined && this.currentStart !== undefined && startTime >= this.currentStart) {\n      return this.current;\n    }\n\n    for (var _i = 0, _a = this.previousContexts; _i < _a.length; _i++) {\n      var previousContext = _a[_i];\n\n      if (startTime > previousContext.endTime) {\n        break;\n      }\n\n      if (startTime >= previousContext.startTime) {\n        return previousContext.context;\n      }\n    }\n\n    return undefined;\n  };\n\n  ContextHistory.prototype.setCurrent = function (current, startTime) {\n    this.current = current;\n    this.currentStart = startTime;\n  };\n\n  ContextHistory.prototype.getCurrent = function () {\n    return this.current;\n  };\n\n  ContextHistory.prototype.clearCurrent = function () {\n    this.current = undefined;\n    this.currentStart = undefined;\n  };\n\n  ContextHistory.prototype.closeCurrent = function (endTime) {\n    if (this.current !== undefined && this.currentStart !== undefined) {\n      this.previousContexts.unshift({\n        endTime: endTime,\n        context: this.current,\n        startTime: this.currentStart\n      });\n      this.clearCurrent();\n    }\n  };\n\n  ContextHistory.prototype.clearOldContexts = function () {\n    var oldTimeThreshold = relativeNow() - this.expireDelay;\n\n    while (this.previousContexts.length > 0 && this.previousContexts[this.previousContexts.length - 1].startTime < oldTimeThreshold) {\n      this.previousContexts.pop();\n    }\n  };\n\n  ContextHistory.prototype.reset = function () {\n    this.clearCurrent();\n    this.previousContexts = [];\n  };\n\n  ContextHistory.prototype.stop = function () {\n    clearInterval(this.clearOldContextsInterval);\n  };\n\n  return ContextHistory;\n}();\n\nexport { ContextHistory };","map":{"version":3,"sources":["../../src/domain/contextHistory.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAmC,WAAnC,QAAsD,uBAAtD;AAQA,OAAO,IAAM,2BAA2B,GAAG,UAApC;;AAEP,IAAA,cAAA;AAAA;AAAA,YAAA;AAME,WAAA,cAAA,CAAoB,WAApB,EAAuC;AAAvC,QAAA,KAAA,GAAA,IAAA;;AAAoB,SAAA,WAAA,GAAA,WAAA;AAHZ,SAAA,gBAAA,GAAoD,EAApD;AAIN,SAAK,wBAAL,GAAgC,WAAW,CAAC,YAAA;AAAM,aAAA,KAAI,CAAJ,gBAAA,EAAA;AAAuB,KAA9B,EAAgC,2BAAhC,CAA3C;AACD;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,SAAL,EAA6B;AAC3B,QACE,SAAS,KAAK,SAAd,IACC,KAAK,OAAL,KAAiB,SAAjB,IAA8B,KAAK,YAAL,KAAsB,SAApD,IAAiE,SAAS,IAAI,KAAK,YAFtF,EAGE;AACA,aAAO,KAAK,OAAZ;AACD;;AACD,SAA8B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,gBAAnC,EAA8B,EAAA,GAAA,EAAA,CAAA,MAA9B,EAA8B,EAAA,EAA9B,EAAqD;AAAhD,UAAM,eAAe,GAAA,EAAA,CAAA,EAAA,CAArB;;AACH,UAAI,SAAS,GAAG,eAAe,CAAC,OAAhC,EAAyC;AACvC;AACD;;AACD,UAAI,SAAS,IAAI,eAAe,CAAC,SAAjC,EAA4C;AAC1C,eAAO,eAAe,CAAC,OAAvB;AACD;AACF;;AACD,WAAO,SAAP;AACD,GAhBD;;AAkBA,EAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAA6B,SAA7B,EAAoD;AAClD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,YAAL,GAAoB,SAApB;AACD,GAHD;;AAKA,EAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,SAAK,OAAL,GAAe,SAAf;AACA,SAAK,YAAL,GAAoB,SAApB;AACD,GAHD;;AAKA,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,OAAb,EAAkC;AAChC,QAAI,KAAK,OAAL,KAAiB,SAAjB,IAA8B,KAAK,YAAL,KAAsB,SAAxD,EAAmE;AACjE,WAAK,gBAAL,CAAsB,OAAtB,CAA8B;AAC5B,QAAA,OAAO,EAAA,OADqB;AAE5B,QAAA,OAAO,EAAE,KAAK,OAFc;AAG5B,QAAA,SAAS,EAAE,KAAK;AAHY,OAA9B;AAKA,WAAK,YAAL;AACD;AACF,GATD;;AAWA,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACE,QAAM,gBAAgB,GAAG,WAAW,KAAK,KAAK,WAA9C;;AACA,WACE,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,CAA/B,IACA,KAAK,gBAAL,CAAsB,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,CAArD,EAAwD,SAAxD,GAAoE,gBAFtE,EAGE;AACA,WAAK,gBAAL,CAAsB,GAAtB;AACD;AACF,GARD;;AAUA,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,YAAL;AACA,SAAK,gBAAL,GAAwB,EAAxB;AACD,GAHD;;AAKA,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,IAAA,aAAa,CAAC,KAAK,wBAAN,CAAb;AACD,GAFD;;AAGF,SAAA,cAAA;AAAC,CAvED,EAAA","sourceRoot":"","sourcesContent":["import { ONE_MINUTE, relativeNow } from '@datadog/browser-core';\nexport var CLEAR_OLD_CONTEXTS_INTERVAL = ONE_MINUTE;\nvar ContextHistory = /** @class */ (function () {\n    function ContextHistory(expireDelay) {\n        var _this = this;\n        this.expireDelay = expireDelay;\n        this.previousContexts = [];\n        this.clearOldContextsInterval = setInterval(function () { return _this.clearOldContexts(); }, CLEAR_OLD_CONTEXTS_INTERVAL);\n    }\n    ContextHistory.prototype.find = function (startTime) {\n        if (startTime === undefined ||\n            (this.current !== undefined && this.currentStart !== undefined && startTime >= this.currentStart)) {\n            return this.current;\n        }\n        for (var _i = 0, _a = this.previousContexts; _i < _a.length; _i++) {\n            var previousContext = _a[_i];\n            if (startTime > previousContext.endTime) {\n                break;\n            }\n            if (startTime >= previousContext.startTime) {\n                return previousContext.context;\n            }\n        }\n        return undefined;\n    };\n    ContextHistory.prototype.setCurrent = function (current, startTime) {\n        this.current = current;\n        this.currentStart = startTime;\n    };\n    ContextHistory.prototype.getCurrent = function () {\n        return this.current;\n    };\n    ContextHistory.prototype.clearCurrent = function () {\n        this.current = undefined;\n        this.currentStart = undefined;\n    };\n    ContextHistory.prototype.closeCurrent = function (endTime) {\n        if (this.current !== undefined && this.currentStart !== undefined) {\n            this.previousContexts.unshift({\n                endTime: endTime,\n                context: this.current,\n                startTime: this.currentStart,\n            });\n            this.clearCurrent();\n        }\n    };\n    ContextHistory.prototype.clearOldContexts = function () {\n        var oldTimeThreshold = relativeNow() - this.expireDelay;\n        while (this.previousContexts.length > 0 &&\n            this.previousContexts[this.previousContexts.length - 1].startTime < oldTimeThreshold) {\n            this.previousContexts.pop();\n        }\n    };\n    ContextHistory.prototype.reset = function () {\n        this.clearCurrent();\n        this.previousContexts = [];\n    };\n    ContextHistory.prototype.stop = function () {\n        clearInterval(this.clearOldContextsInterval);\n    };\n    return ContextHistory;\n}());\nexport { ContextHistory };\n//# sourceMappingURL=contextHistory.js.map"]},"metadata":{},"sourceType":"module"}