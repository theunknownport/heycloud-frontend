{"ast":null,"code":"import { findCommaSeparatedValue, ONE_MINUTE } from '@datadog/browser-core';\nexport var INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD = 2 * ONE_MINUTE;\nexport function getDocumentTraceId(document) {\n  var data = getDocumentTraceDataFromMeta(document) || getDocumentTraceDataFromComment(document);\n\n  if (!data || data.traceTime <= Date.now() - INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD) {\n    return undefined;\n  }\n\n  return data.traceId;\n}\nexport function getDocumentTraceDataFromMeta(document) {\n  var traceIdMeta = document.querySelector('meta[name=dd-trace-id]');\n  var traceTimeMeta = document.querySelector('meta[name=dd-trace-time]');\n  return createDocumentTraceData(traceIdMeta && traceIdMeta.content, traceTimeMeta && traceTimeMeta.content);\n}\nexport function getDocumentTraceDataFromComment(document) {\n  var comment = findTraceComment(document);\n\n  if (!comment) {\n    return undefined;\n  }\n\n  return createDocumentTraceData(findCommaSeparatedValue(comment, 'trace-id'), findCommaSeparatedValue(comment, 'trace-time'));\n}\nexport function createDocumentTraceData(traceId, rawTraceTime) {\n  var traceTime = rawTraceTime && Number(rawTraceTime);\n\n  if (!traceId || !traceTime) {\n    return undefined;\n  }\n\n  return {\n    traceId: traceId,\n    traceTime: traceTime\n  };\n}\nexport function findTraceComment(document) {\n  // 1. Try to find the comment as a direct child of the document\n  // Note: TSLint advises to use a 'for of', but TS doesn't allow to use 'for of' if the iterated\n  // value is not an array or string (here, a NodeList).\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (var i = 0; i < document.childNodes.length; i += 1) {\n    var comment = getTraceCommentFromNode(document.childNodes[i]);\n\n    if (comment) {\n      return comment;\n    }\n  } // 2. If the comment is placed after the </html> tag, but have some space or new lines before or\n  // after, the DOM parser will lift it (and the surrounding text) at the end of the <body> tag.\n  // Try to look for the comment at the end of the <body> by by iterating over its child nodes in\n  // reverse order, stopping if we come across a non-text node.\n\n\n  if (document.body) {\n    for (var i = document.body.childNodes.length - 1; i >= 0; i -= 1) {\n      var node = document.body.childNodes[i];\n      var comment = getTraceCommentFromNode(node);\n\n      if (comment) {\n        return comment;\n      }\n\n      if (!isTextNode(node)) {\n        break;\n      }\n    }\n  }\n}\n\nfunction getTraceCommentFromNode(node) {\n  if (node && isCommentNode(node)) {\n    var match = /^\\s*DATADOG;(.*?)\\s*$/.exec(node.data);\n\n    if (match) {\n      return match[1];\n    }\n  }\n}\n\nfunction isCommentNode(node) {\n  return node.nodeName === '#comment';\n}\n\nfunction isTextNode(node) {\n  return node.nodeName === '#text';\n}","map":{"version":3,"sources":["../../../src/domain/tracing/getDocumentTraceId.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { findCommaSeparatedValue, ONE_MINUTE } from '@datadog/browser-core';\nexport var INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD = 2 * ONE_MINUTE;\nexport function getDocumentTraceId(document) {\n    var data = getDocumentTraceDataFromMeta(document) || getDocumentTraceDataFromComment(document);\n    if (!data || data.traceTime <= Date.now() - INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD) {\n        return undefined;\n    }\n    return data.traceId;\n}\nexport function getDocumentTraceDataFromMeta(document) {\n    var traceIdMeta = document.querySelector('meta[name=dd-trace-id]');\n    var traceTimeMeta = document.querySelector('meta[name=dd-trace-time]');\n    return createDocumentTraceData(traceIdMeta && traceIdMeta.content, traceTimeMeta && traceTimeMeta.content);\n}\nexport function getDocumentTraceDataFromComment(document) {\n    var comment = findTraceComment(document);\n    if (!comment) {\n        return undefined;\n    }\n    return createDocumentTraceData(findCommaSeparatedValue(comment, 'trace-id'), findCommaSeparatedValue(comment, 'trace-time'));\n}\nexport function createDocumentTraceData(traceId, rawTraceTime) {\n    var traceTime = rawTraceTime && Number(rawTraceTime);\n    if (!traceId || !traceTime) {\n        return undefined;\n    }\n    return {\n        traceId: traceId,\n        traceTime: traceTime,\n    };\n}\nexport function findTraceComment(document) {\n    // 1. Try to find the comment as a direct child of the document\n    // Note: TSLint advises to use a 'for of', but TS doesn't allow to use 'for of' if the iterated\n    // value is not an array or string (here, a NodeList).\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var i = 0; i < document.childNodes.length; i += 1) {\n        var comment = getTraceCommentFromNode(document.childNodes[i]);\n        if (comment) {\n            return comment;\n        }\n    }\n    // 2. If the comment is placed after the </html> tag, but have some space or new lines before or\n    // after, the DOM parser will lift it (and the surrounding text) at the end of the <body> tag.\n    // Try to look for the comment at the end of the <body> by by iterating over its child nodes in\n    // reverse order, stopping if we come across a non-text node.\n    if (document.body) {\n        for (var i = document.body.childNodes.length - 1; i >= 0; i -= 1) {\n            var node = document.body.childNodes[i];\n            var comment = getTraceCommentFromNode(node);\n            if (comment) {\n                return comment;\n            }\n            if (!isTextNode(node)) {\n                break;\n            }\n        }\n    }\n}\nfunction getTraceCommentFromNode(node) {\n    if (node && isCommentNode(node)) {\n        var match = /^\\s*DATADOG;(.*?)\\s*$/.exec(node.data);\n        if (match) {\n            return match[1];\n        }\n    }\n}\nfunction isCommentNode(node) {\n    return node.nodeName === '#comment';\n}\nfunction isTextNode(node) {\n    return node.nodeName === '#text';\n}\n//# sourceMappingURL=getDocumentTraceId.js.map"]},"metadata":{},"sourceType":"module"}