{"ast":null,"code":"import { monitor } from '../internalMonitoring';\nimport { computeStackTrace, augmentStackTraceWithInitialElement } from './computeStackTrace'; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n// eslint-disable-next-line  max-len\n\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   subscribe(function(stackInfo) { ... })\n *   unsubscribe(function(stackInfo) { ... })\n *   report(exception)\n *   try { ...code... } catch(ex) { report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where report was called.\n *\n * Handlers receive a StackTrace object as described in the\n * computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\n\n/**\n * Reports an unhandled Error.\n * @param {Error} ex\n * @memberof report\n * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n */\n\nexport function report(ex) {\n  if (lastExceptionStack) {\n    if (lastException === ex) {\n      return; // already caught by an inner catch block, ignore\n    }\n\n    processLastException();\n  }\n\n  var stack = computeStackTrace(ex);\n  lastExceptionStack = stack;\n  lastException = ex; // If the stack trace is incomplete, wait for 2 seconds for\n  // slow slow IE to see if onerror occurs or not before reporting\n  // this exception; otherwise, we will end up with an incomplete\n  // stack trace\n\n  setTimeout(monitor(function () {\n    if (lastException === ex) {\n      processLastException();\n    }\n  }), stack.incomplete ? 2000 : 0);\n  throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n}\nvar handlers = [];\nvar lastException;\nvar lastExceptionStack;\n/**\n * Add a crash handler.\n * @param {Function} handler\n * @memberof report\n */\n\nexport function subscribe(handler) {\n  installGlobalHandler();\n  installGlobalUnhandledRejectionHandler();\n  handlers.push(handler);\n}\n/**\n * Remove a crash handler.\n * @param {Function} handler\n * @memberof report\n */\n\nexport function unsubscribe(handler) {\n  for (var i = handlers.length - 1; i >= 0; i -= 1) {\n    if (handlers[i] === handler) {\n      handlers.splice(i, 1);\n    }\n  }\n\n  if (handlers.length === 0) {\n    uninstallGlobalHandler();\n    uninstallGlobalUnhandledRejectionHandler();\n  }\n}\n/**\n * Dispatch stack information to all handlers.\n * @param {StackTrace} stack\n * @param {boolean} isWindowError Is this a top-level window error?\n * @param {Error=} error The error that's being handled (if available, null otherwise)\n * @memberof report\n * @throws An exception if an error occurs while calling an handler.\n */\n\nfunction notifyHandlers(stack, isWindowError, error) {\n  var exception;\n  handlers.forEach(function (handler) {\n    try {\n      handler(stack, isWindowError, error);\n    } catch (inner) {\n      exception = inner;\n    }\n  });\n\n  if (exception) {\n    throw exception;\n  }\n}\n\nvar oldOnerrorHandler;\nvar onErrorHandlerInstalled;\nvar oldOnunhandledrejectionHandler;\nvar onUnhandledRejectionHandlerInstalled;\n/**\n * Ensures all global unhandled exceptions are recorded.\n * Supported by Gecko and IE.\n * @param {Event|string} message Error message.\n * @param {string=} url URL of script that generated the exception.\n * @param {(number|string)=} lineNo The line number at which the error occurred.\n * @param {(number|string)=} columnNo The column number at which the error occurred.\n * @param {Error=} errorObj The actual Error object.\n * @memberof report\n */\n\nexport function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n  var stack;\n\n  if (lastExceptionStack) {\n    augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo);\n    processLastException();\n  } else if (errorObj) {\n    stack = computeStackTrace(errorObj);\n    notifyHandlers(stack, true, errorObj);\n  } else {\n    var location_1 = {\n      url: url,\n      column: columnNo,\n      line: lineNo\n    };\n    var name_1;\n    var msg = message;\n\n    if ({}.toString.call(message) === '[object String]') {\n      var groups = ERROR_TYPES_RE.exec(msg);\n\n      if (groups) {\n        name_1 = groups[1];\n        msg = groups[2];\n      }\n    }\n\n    stack = {\n      name: name_1,\n      message: typeof msg === 'string' ? msg : undefined,\n      stack: [location_1]\n    };\n    notifyHandlers(stack, true, message);\n  }\n\n  if (oldOnerrorHandler) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return oldOnerrorHandler.apply(this, arguments);\n  }\n\n  return false;\n}\n/**\n * Ensures all unhandled rejections are recorded.\n * @param {PromiseRejectionEvent} e event.\n * @memberof report\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n */\n\nfunction traceKitWindowOnUnhandledRejection(e) {\n  var reason = e.reason || 'Empty reason';\n  var stack = computeStackTrace(reason);\n  notifyHandlers(stack, true, reason);\n}\n/**\n * Install a global onerror handler\n * @memberof report\n */\n\n\nfunction installGlobalHandler() {\n  if (onErrorHandlerInstalled) {\n    return;\n  }\n\n  oldOnerrorHandler = window.onerror;\n  window.onerror = monitor(traceKitWindowOnError);\n  onErrorHandlerInstalled = true;\n}\n/**\n * Uninstall the global onerror handler\n * @memberof report\n */\n\n\nfunction uninstallGlobalHandler() {\n  if (onErrorHandlerInstalled) {\n    window.onerror = oldOnerrorHandler;\n    onErrorHandlerInstalled = false;\n  }\n}\n/**\n * Install a global onunhandledrejection handler\n * @memberof report\n */\n\n\nfunction installGlobalUnhandledRejectionHandler() {\n  if (onUnhandledRejectionHandlerInstalled) {\n    return;\n  }\n\n  oldOnunhandledrejectionHandler = window.onunhandledrejection !== null ? window.onunhandledrejection : undefined;\n  window.onunhandledrejection = monitor(traceKitWindowOnUnhandledRejection);\n  onUnhandledRejectionHandlerInstalled = true;\n}\n/**\n * Uninstall the global onunhandledrejection handler\n * @memberof report\n */\n\n\nfunction uninstallGlobalUnhandledRejectionHandler() {\n  if (onUnhandledRejectionHandlerInstalled) {\n    window.onunhandledrejection = oldOnunhandledrejectionHandler;\n    onUnhandledRejectionHandlerInstalled = false;\n  }\n}\n/**\n * Process the most recent exception\n * @memberof report\n */\n\n\nfunction processLastException() {\n  var currentLastExceptionStack = lastExceptionStack;\n  var currentLastException = lastException;\n  lastExceptionStack = undefined;\n  lastException = undefined;\n  notifyHandlers(currentLastExceptionStack, false, currentLastException);\n}","map":{"version":3,"sources":["../../../src/domain/tracekit/report.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { monitor } from '../internalMonitoring';\nimport { computeStackTrace, augmentStackTraceWithInitialElement } from './computeStackTrace';\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n// eslint-disable-next-line  max-len\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   subscribe(function(stackInfo) { ... })\n *   unsubscribe(function(stackInfo) { ... })\n *   report(exception)\n *   try { ...code... } catch(ex) { report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where report was called.\n *\n * Handlers receive a StackTrace object as described in the\n * computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\n/**\n * Reports an unhandled Error.\n * @param {Error} ex\n * @memberof report\n * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n */\nexport function report(ex) {\n    if (lastExceptionStack) {\n        if (lastException === ex) {\n            return; // already caught by an inner catch block, ignore\n        }\n        processLastException();\n    }\n    var stack = computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(monitor(function () {\n        if (lastException === ex) {\n            processLastException();\n        }\n    }), stack.incomplete ? 2000 : 0);\n    throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n}\nvar handlers = [];\nvar lastException;\nvar lastExceptionStack;\n/**\n * Add a crash handler.\n * @param {Function} handler\n * @memberof report\n */\nexport function subscribe(handler) {\n    installGlobalHandler();\n    installGlobalUnhandledRejectionHandler();\n    handlers.push(handler);\n}\n/**\n * Remove a crash handler.\n * @param {Function} handler\n * @memberof report\n */\nexport function unsubscribe(handler) {\n    for (var i = handlers.length - 1; i >= 0; i -= 1) {\n        if (handlers[i] === handler) {\n            handlers.splice(i, 1);\n        }\n    }\n    if (handlers.length === 0) {\n        uninstallGlobalHandler();\n        uninstallGlobalUnhandledRejectionHandler();\n    }\n}\n/**\n * Dispatch stack information to all handlers.\n * @param {StackTrace} stack\n * @param {boolean} isWindowError Is this a top-level window error?\n * @param {Error=} error The error that's being handled (if available, null otherwise)\n * @memberof report\n * @throws An exception if an error occurs while calling an handler.\n */\nfunction notifyHandlers(stack, isWindowError, error) {\n    var exception;\n    handlers.forEach(function (handler) {\n        try {\n            handler(stack, isWindowError, error);\n        }\n        catch (inner) {\n            exception = inner;\n        }\n    });\n    if (exception) {\n        throw exception;\n    }\n}\nvar oldOnerrorHandler;\nvar onErrorHandlerInstalled;\nvar oldOnunhandledrejectionHandler;\nvar onUnhandledRejectionHandlerInstalled;\n/**\n * Ensures all global unhandled exceptions are recorded.\n * Supported by Gecko and IE.\n * @param {Event|string} message Error message.\n * @param {string=} url URL of script that generated the exception.\n * @param {(number|string)=} lineNo The line number at which the error occurred.\n * @param {(number|string)=} columnNo The column number at which the error occurred.\n * @param {Error=} errorObj The actual Error object.\n * @memberof report\n */\nexport function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n    var stack;\n    if (lastExceptionStack) {\n        augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo);\n        processLastException();\n    }\n    else if (errorObj) {\n        stack = computeStackTrace(errorObj);\n        notifyHandlers(stack, true, errorObj);\n    }\n    else {\n        var location_1 = {\n            url: url,\n            column: columnNo,\n            line: lineNo,\n        };\n        var name_1;\n        var msg = message;\n        if ({}.toString.call(message) === '[object String]') {\n            var groups = ERROR_TYPES_RE.exec(msg);\n            if (groups) {\n                name_1 = groups[1];\n                msg = groups[2];\n            }\n        }\n        stack = {\n            name: name_1,\n            message: typeof msg === 'string' ? msg : undefined,\n            stack: [location_1],\n        };\n        notifyHandlers(stack, true, message);\n    }\n    if (oldOnerrorHandler) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return oldOnerrorHandler.apply(this, arguments);\n    }\n    return false;\n}\n/**\n * Ensures all unhandled rejections are recorded.\n * @param {PromiseRejectionEvent} e event.\n * @memberof report\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n */\nfunction traceKitWindowOnUnhandledRejection(e) {\n    var reason = e.reason || 'Empty reason';\n    var stack = computeStackTrace(reason);\n    notifyHandlers(stack, true, reason);\n}\n/**\n * Install a global onerror handler\n * @memberof report\n */\nfunction installGlobalHandler() {\n    if (onErrorHandlerInstalled) {\n        return;\n    }\n    oldOnerrorHandler = window.onerror;\n    window.onerror = monitor(traceKitWindowOnError);\n    onErrorHandlerInstalled = true;\n}\n/**\n * Uninstall the global onerror handler\n * @memberof report\n */\nfunction uninstallGlobalHandler() {\n    if (onErrorHandlerInstalled) {\n        window.onerror = oldOnerrorHandler;\n        onErrorHandlerInstalled = false;\n    }\n}\n/**\n * Install a global onunhandledrejection handler\n * @memberof report\n */\nfunction installGlobalUnhandledRejectionHandler() {\n    if (onUnhandledRejectionHandlerInstalled) {\n        return;\n    }\n    oldOnunhandledrejectionHandler = window.onunhandledrejection !== null ? window.onunhandledrejection : undefined;\n    window.onunhandledrejection = monitor(traceKitWindowOnUnhandledRejection);\n    onUnhandledRejectionHandlerInstalled = true;\n}\n/**\n * Uninstall the global onunhandledrejection handler\n * @memberof report\n */\nfunction uninstallGlobalUnhandledRejectionHandler() {\n    if (onUnhandledRejectionHandlerInstalled) {\n        window.onunhandledrejection = oldOnunhandledrejectionHandler;\n        onUnhandledRejectionHandlerInstalled = false;\n    }\n}\n/**\n * Process the most recent exception\n * @memberof report\n */\nfunction processLastException() {\n    var currentLastExceptionStack = lastExceptionStack;\n    var currentLastException = lastException;\n    lastExceptionStack = undefined;\n    lastException = undefined;\n    notifyHandlers(currentLastExceptionStack, false, currentLastException);\n}\n//# sourceMappingURL=report.js.map"]},"metadata":{},"sourceType":"module"}