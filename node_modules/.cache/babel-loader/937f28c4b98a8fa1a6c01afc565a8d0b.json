{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { combine, isEmptyObject, limitModification, timeStampNow, currentDrift, display, createEventRateLimiter } from '@datadog/browser-core';\nimport { RumEventType } from '../rawRumEvent.types';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { RumSessionPlan } from './rumSession';\nvar SessionType;\n\n(function (SessionType) {\n  SessionType[\"SYNTHETICS\"] = \"synthetics\";\n  SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\n\nvar VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [// Fields with sensitive data\n'view.url', 'view.referrer', 'action.target.name', 'error.message', 'error.stack', 'error.resource.url', 'resource.url'];\n\nvar OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = __spreadArrays(VIEW_EVENTS_MODIFIABLE_FIELD_PATHS, [// User-customizable field\n'context']);\n\nexport function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, urlContexts, getCommonContext) {\n  var _a;\n\n  var reportError = function (error) {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, {\n      error: error\n    });\n  };\n\n  var eventRateLimiters = (_a = {}, _a[RumEventType.ERROR] = createEventRateLimiter(RumEventType.ERROR, configuration.maxErrorsPerMinute, reportError), _a[RumEventType.ACTION] = createEventRateLimiter(RumEventType.ACTION, configuration.maxActionsPerMinute, reportError), _a);\n  lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {\n    var startTime = _a.startTime,\n        rawRumEvent = _a.rawRumEvent,\n        domainContext = _a.domainContext,\n        savedCommonContext = _a.savedCommonContext,\n        customerContext = _a.customerContext;\n    var viewContext = parentContexts.findView(startTime);\n    var urlContext = urlContexts.findUrl(startTime);\n\n    if (session.isTracked() && viewContext && urlContext && viewContext.session.id === session.getId()) {\n      var actionContext = parentContexts.findAction(startTime);\n      var commonContext = savedCommonContext || getCommonContext();\n      var rumContext = {\n        _dd: {\n          format_version: 2,\n          drift: currentDrift(),\n          session: {\n            plan: session.hasReplayPlan() ? RumSessionPlan.REPLAY : RumSessionPlan.LITE\n          }\n        },\n        application: {\n          id: applicationId\n        },\n        date: timeStampNow(),\n        service: configuration.service,\n        session: {\n          // must be computed on each event because synthetics instrumentation can be done after sdk execution\n          type: getSessionType()\n        },\n        synthetics: getSyntheticsContext()\n      };\n      var serverRumEvent = needToAssembleWithAction(rawRumEvent) ? combine(rumContext, urlContext, viewContext, actionContext, rawRumEvent) : combine(rumContext, urlContext, viewContext, rawRumEvent);\n      serverRumEvent.context = combine(commonContext.context, customerContext);\n\n      if (!('has_replay' in serverRumEvent.session)) {\n        ;\n        serverRumEvent.session.has_replay = commonContext.hasReplay;\n      }\n\n      if (!isEmptyObject(commonContext.user)) {\n        ;\n        serverRumEvent.usr = commonContext.user;\n      }\n\n      if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n        if (isEmptyObject(serverRumEvent.context)) {\n          delete serverRumEvent.context;\n        }\n\n        lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);\n      }\n    }\n  });\n}\n\nfunction shouldSend(event, beforeSend, domainContext, eventRateLimiters) {\n  var _a;\n\n  if (beforeSend) {\n    var result = limitModification(event, event.type === RumEventType.VIEW ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS, function (event) {\n      return beforeSend(event, domainContext);\n    });\n\n    if (result === false && event.type !== RumEventType.VIEW) {\n      return false;\n    }\n\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\");\n    }\n  }\n\n  var rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();\n  return !rateLimitReached;\n}\n\nfunction needToAssembleWithAction(event) {\n  return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1;\n}\n\nfunction getSessionType() {\n  return navigator.userAgent.indexOf('DatadogSynthetics') === -1 && !getSyntheticsContext() ? SessionType.USER : SessionType.SYNTHETICS;\n}\n\nfunction getSyntheticsContext() {\n  var testId = window._DATADOG_SYNTHETICS_PUBLIC_ID;\n  var resultId = window._DATADOG_SYNTHETICS_RESULT_ID;\n\n  if (typeof testId === 'string' && typeof resultId === 'string') {\n    return {\n      test_id: testId,\n      result_id: resultId\n    };\n  }\n}","map":{"version":3,"sources":["../../src/domain/assembly.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __spreadArrays } from \"tslib\";\nimport { combine, isEmptyObject, limitModification, timeStampNow, currentDrift, display, createEventRateLimiter, } from '@datadog/browser-core';\nimport { RumEventType, } from '../rawRumEvent.types';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { RumSessionPlan } from './rumSession';\nvar SessionType;\n(function (SessionType) {\n    SessionType[\"SYNTHETICS\"] = \"synthetics\";\n    SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\nvar VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [\n    // Fields with sensitive data\n    'view.url',\n    'view.referrer',\n    'action.target.name',\n    'error.message',\n    'error.stack',\n    'error.resource.url',\n    'resource.url',\n];\nvar OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = __spreadArrays(VIEW_EVENTS_MODIFIABLE_FIELD_PATHS, [\n    // User-customizable field\n    'context',\n]);\nexport function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, urlContexts, getCommonContext) {\n    var _a;\n    var reportError = function (error) {\n        lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error: error });\n    };\n    var eventRateLimiters = (_a = {},\n        _a[RumEventType.ERROR] = createEventRateLimiter(RumEventType.ERROR, configuration.maxErrorsPerMinute, reportError),\n        _a[RumEventType.ACTION] = createEventRateLimiter(RumEventType.ACTION, configuration.maxActionsPerMinute, reportError),\n        _a);\n    lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {\n        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, domainContext = _a.domainContext, savedCommonContext = _a.savedCommonContext, customerContext = _a.customerContext;\n        var viewContext = parentContexts.findView(startTime);\n        var urlContext = urlContexts.findUrl(startTime);\n        if (session.isTracked() && viewContext && urlContext && viewContext.session.id === session.getId()) {\n            var actionContext = parentContexts.findAction(startTime);\n            var commonContext = savedCommonContext || getCommonContext();\n            var rumContext = {\n                _dd: {\n                    format_version: 2,\n                    drift: currentDrift(),\n                    session: {\n                        plan: session.hasReplayPlan() ? RumSessionPlan.REPLAY : RumSessionPlan.LITE,\n                    },\n                },\n                application: {\n                    id: applicationId,\n                },\n                date: timeStampNow(),\n                service: configuration.service,\n                session: {\n                    // must be computed on each event because synthetics instrumentation can be done after sdk execution\n                    type: getSessionType(),\n                },\n                synthetics: getSyntheticsContext(),\n            };\n            var serverRumEvent = (needToAssembleWithAction(rawRumEvent)\n                ? combine(rumContext, urlContext, viewContext, actionContext, rawRumEvent)\n                : combine(rumContext, urlContext, viewContext, rawRumEvent));\n            serverRumEvent.context = combine(commonContext.context, customerContext);\n            if (!('has_replay' in serverRumEvent.session)) {\n                ;\n                serverRumEvent.session.has_replay = commonContext.hasReplay;\n            }\n            if (!isEmptyObject(commonContext.user)) {\n                ;\n                serverRumEvent.usr = commonContext.user;\n            }\n            if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n                if (isEmptyObject(serverRumEvent.context)) {\n                    delete serverRumEvent.context;\n                }\n                lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);\n            }\n        }\n    });\n}\nfunction shouldSend(event, beforeSend, domainContext, eventRateLimiters) {\n    var _a;\n    if (beforeSend) {\n        var result = limitModification(event, event.type === RumEventType.VIEW ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS, function (event) { return beforeSend(event, domainContext); });\n        if (result === false && event.type !== RumEventType.VIEW) {\n            return false;\n        }\n        if (result === false) {\n            display.warn(\"Can't dismiss view events using beforeSend!\");\n        }\n    }\n    var rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();\n    return !rateLimitReached;\n}\nfunction needToAssembleWithAction(event) {\n    return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1;\n}\nfunction getSessionType() {\n    return navigator.userAgent.indexOf('DatadogSynthetics') === -1 && !getSyntheticsContext()\n        ? SessionType.USER\n        : SessionType.SYNTHETICS;\n}\nfunction getSyntheticsContext() {\n    var testId = window._DATADOG_SYNTHETICS_PUBLIC_ID;\n    var resultId = window._DATADOG_SYNTHETICS_RESULT_ID;\n    if (typeof testId === 'string' && typeof resultId === 'string') {\n        return {\n            test_id: testId,\n            result_id: resultId,\n        };\n    }\n}\n//# sourceMappingURL=assembly.js.map"]},"metadata":{},"sourceType":"module"}