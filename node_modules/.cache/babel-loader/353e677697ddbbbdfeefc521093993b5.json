{"ast":null,"code":"import { addMonths, cloneDate, createDate, isEqual, getDate, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Mask } from './mask';\nimport { dateSymbolMap } from './../utils';\n/**\n * @hidden\n */\n\nvar KendoDate =\n/** @class */\nfunction () {\n  function KendoDate(intlProvider, formatPlaceholder, format) {\n    this.year = true;\n    this.month = true;\n    this.date = true;\n    this.hours = true;\n    this.minutes = true;\n    this.seconds = true;\n    this.milliseconds = true;\n    this.leadingZero = null;\n    this.typedMonthPart = '';\n    this.knownParts = 'adHhmMsEy';\n    this.symbols = {\n      'E': 'E',\n      'H': 'H',\n      'M': 'M',\n      'a': 'a',\n      'd': 'd',\n      'h': 'h',\n      'm': 'm',\n      's': 's',\n      'y': 'y'\n    };\n    this._value = getDate(new Date());\n    this.intlProvider = intlProvider;\n    this.formatPlaceholder = formatPlaceholder;\n    this.format = format;\n    this.monthNames = this.allFormatedMonths();\n  }\n\n  Object.defineProperty(KendoDate.prototype, \"intl\", {\n    get: function () {\n      return this.intlProvider();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(KendoDate.prototype, \"value\", {\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  KendoDate.prototype.setValue = function (value) {\n    if (!value) {\n      this._value = getDate(new Date());\n      this.modifyExisting(false);\n    } else if (!isEqual(value, this._value)) {\n      this._value = cloneDate(value);\n      this.modifyExisting(true);\n    }\n  };\n\n  KendoDate.prototype.hasValue = function () {\n    var _this = this;\n\n    var pred = function (a, p) {\n      return a || p.type !== 'literal' && p.type !== 'dayperiod' && _this.getExisting(p.pattern[0]);\n    };\n\n    return this.intl.splitDateFormat(this.format).reduce(pred, false);\n  };\n\n  KendoDate.prototype.getDateObject = function () {\n    for (var i = 0; i < this.knownParts.length; i++) {\n      if (!this.getExisting(this.knownParts[i])) {\n        return null;\n      }\n    }\n\n    return cloneDate(this.value);\n  };\n\n  KendoDate.prototype.getTextAndFormat = function () {\n    return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));\n  };\n\n  KendoDate.prototype.modifyExisting = function (value) {\n    var sampleFormat = this.dateFormatString(this.value, this.format).symbols;\n\n    for (var i = 0; i < sampleFormat.length; i++) {\n      this.setExisting(sampleFormat[i], value);\n    }\n  };\n\n  KendoDate.prototype.getExisting = function (symbol) {\n    switch (symbol) {\n      case 'y':\n        return this.year;\n\n      case 'M':\n      case 'L':\n        return this.month;\n\n      case 'd':\n        return this.date;\n\n      case 'E':\n        return this.date && this.month && this.year;\n\n      case 'h':\n      case 'H':\n        return this.hours;\n\n      case 'm':\n        return this.minutes;\n\n      case 's':\n        return this.seconds;\n\n      default:\n        return true;\n    }\n  };\n\n  KendoDate.prototype.setExisting = function (symbol, value) {\n    switch (symbol) {\n      case 'y':\n        // allow 2/29 dates\n        this.year = value;\n\n        if (value === false) {\n          this._value.setFullYear(2000);\n        }\n\n        break;\n\n      case 'M':\n        // make sure you can type 31 in the day part\n        this.month = value;\n\n        if (value === false) {\n          this._value.setMonth(0);\n        }\n\n        break;\n\n      case 'd':\n        this.date = value;\n        break;\n\n      case 'h':\n      case 'H':\n        this.hours = value;\n        break;\n\n      case 'm':\n        this.minutes = value;\n        break;\n\n      case 's':\n        this.seconds = value;\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  KendoDate.prototype.modifyPart = function (symbol, offset) {\n    var newValue = cloneDate(this.value);\n\n    switch (symbol) {\n      case 'y':\n        newValue.setFullYear(newValue.getFullYear() + offset);\n        break;\n\n      case 'M':\n        newValue = addMonths(this.value, offset);\n        break;\n\n      case 'd':\n      case 'E':\n        newValue.setDate(newValue.getDate() + offset);\n        break;\n\n      case 'h':\n      case 'H':\n        newValue.setHours(newValue.getHours() + offset);\n        break;\n\n      case 'm':\n        newValue.setMinutes(newValue.getMinutes() + offset);\n        break;\n\n      case 's':\n        newValue.setSeconds(newValue.getSeconds() + offset);\n        break;\n\n      case 'a':\n        newValue.setHours(newValue.getHours() + 12 * offset);\n        break;\n\n      default:\n        break;\n    }\n\n    this.setExisting(symbol, true);\n    this._value = newValue;\n  };\n\n  KendoDate.prototype.parsePart = function (symbol, currentChar) {\n    var _a;\n\n    this.resetLeadingZero();\n\n    if (!currentChar) {\n      this.setExisting(symbol, false);\n      return {\n        value: null\n      };\n    }\n\n    var baseDate = this.intl.formatDate(this.value, this.format);\n    var dateParts = this.dateFormatString(this.value, this.format);\n    var baseFormat = dateParts.symbols;\n    var replaced = false;\n    var prefix = '';\n    var current = '';\n    var suffix = '';\n\n    for (var i = 0; i < baseDate.length; i++) {\n      if (baseFormat[i] === symbol) {\n        current += this.getExisting(symbol) ? baseDate[i] : '0';\n        replaced = true;\n      } else if (!replaced) {\n        prefix += baseDate[i];\n      } else {\n        suffix += baseDate[i];\n      }\n    }\n\n    var parsedDate = null;\n    var month = this.matchMonth(currentChar);\n\n    while (current.length > 0 && current.charAt(0) === '0') {\n      current = current.slice(1);\n    }\n\n    if (current.length >= 4) {\n      current = '';\n    }\n\n    for (var i = 0; i < 2; i++) {\n      var middle = current + currentChar;\n      var middleNumber = parseInt(middle, 10);\n      parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);\n\n      if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {\n        if (symbol === 'M' && !month) {\n          var monthNumber = middleNumber - 1;\n\n          if (monthNumber > -1 && monthNumber < 12) {\n            parsedDate = cloneDate(this.value);\n            parsedDate.setMonth(monthNumber);\n\n            if (parsedDate.getMonth() !== monthNumber) {\n              parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n            }\n          }\n        }\n\n        if (symbol === 'y') {\n          parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);\n\n          if (this.date && parsedDate.getDate() !== this.value.getDate()) {\n            parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n          }\n        }\n      }\n\n      if (parsedDate) {\n        this._value = parsedDate;\n        this.setExisting(symbol, true);\n        return {\n          value: this.value\n        };\n      }\n\n      current = '';\n    }\n\n    if (month) {\n      parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);\n\n      if (parsedDate) {\n        this._value = parsedDate;\n        this.setExisting(symbol, true);\n        return {\n          value: this.value\n        };\n      }\n    }\n\n    if (currentChar === '0') {\n      this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a = {}, _a[symbol] = true, _a) : null;\n      this.setExisting(symbol, false);\n    }\n\n    return {\n      value: null\n    };\n  };\n\n  KendoDate.prototype.symbolMap = function (symbol) {\n    return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];\n  };\n\n  KendoDate.prototype.resetLeadingZero = function () {\n    var hasLeadingZero = this.leadingZero !== null;\n    this.leadingZero = null;\n    return hasLeadingZero;\n  };\n\n  KendoDate.prototype.isAbbrMonth = function (parts, symbol) {\n    var pattern = this.partPattern(parts, symbol);\n    return pattern.type === 'month' && pattern.names;\n  };\n\n  KendoDate.prototype.partPattern = function (parts, symbol) {\n    return parts.filter(function (part) {\n      return part.pattern.indexOf(symbol) !== -1;\n    })[0];\n  };\n\n  KendoDate.prototype.matchMonth = function (typedChar) {\n    this.typedMonthPart += typedChar.toLowerCase();\n\n    if (this.monthNames.length === 0) {\n      return '';\n    }\n\n    while (this.typedMonthPart.length > 0) {\n      for (var i = 0; i < this.monthNames.length; i++) {\n        if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {\n          return this.monthNames[i];\n        }\n      }\n\n      var monthAsNum = parseInt(this.typedMonthPart, 10);\n      /* ensure they exact match */\n\n      if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {\n        return this.monthNames[monthAsNum - 1];\n      }\n\n      this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);\n    }\n\n    return '';\n  };\n\n  KendoDate.prototype.allFormatedMonths = function () {\n    var dateFormatParts = this.intl.splitDateFormat(this.format);\n\n    for (var i = 0; i < dateFormatParts.length; i++) {\n      if (dateFormatParts[i].type === 'month' && dateFormatParts[i].names) {\n        return this.intl.dateFormatNames(dateFormatParts[i].names);\n      }\n    }\n\n    return [];\n  };\n\n  KendoDate.prototype.dateFormatString = function (date, format) {\n    var dateFormatParts = this.intl.splitDateFormat(format);\n    var parts = [];\n    var partMap = [];\n\n    for (var i = 0; i < dateFormatParts.length; i++) {\n      var partLength = this.intl.formatDate(date, {\n        pattern: dateFormatParts[i].pattern\n      }).length;\n\n      while (partLength > 0) {\n        parts.push(this.symbols[dateFormatParts[i].pattern[0]] || '_');\n        partMap.push(dateFormatParts[i]);\n        partLength--;\n      }\n    }\n\n    var returnValue = new Mask();\n    returnValue.symbols = parts.join('');\n    returnValue.partMap = partMap;\n    return returnValue;\n  };\n\n  KendoDate.prototype.merge = function (text, mask) {\n    // Important: right to left.\n    var resultText = '';\n    var resultFormat = '';\n    var format = mask.symbols;\n\n    for (var r = format.length - 1; r >= 0; r--) {\n      if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {\n        resultText = text[r] + resultText;\n        resultFormat = format[r] + resultFormat;\n      } else {\n        var currentSymbol = format[r];\n\n        while (r >= 0 && currentSymbol === format[r]) {\n          r--;\n        }\n\n        r++;\n\n        if (this.leadingZero && this.leadingZero[currentSymbol]) {\n          resultText = '0' + resultText;\n        } else {\n          resultText = this.dateFieldName(mask.partMap[r]) + resultText;\n        }\n\n        while (resultFormat.length < resultText.length) {\n          resultFormat = format[r] + resultFormat;\n        }\n      }\n    }\n\n    return {\n      text: resultText,\n      format: resultFormat\n    };\n  };\n\n  KendoDate.prototype.dateFieldName = function (part) {\n    var formatPlaceholder = this.formatPlaceholder || 'wide';\n\n    if (formatPlaceholder[part.type]) {\n      return formatPlaceholder[part.type];\n    }\n\n    if (formatPlaceholder === 'formatPattern') {\n      return part.pattern;\n    }\n\n    return this.intl.dateFieldName(Object.assign(part, {\n      nameType: formatPlaceholder\n    }));\n  };\n\n  return KendoDate;\n}();\n\nexport { KendoDate };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/models/kendo-date.js"],"names":["addMonths","cloneDate","createDate","isEqual","getDate","lastDayOfMonth","Mask","dateSymbolMap","KendoDate","intlProvider","formatPlaceholder","format","year","month","date","hours","minutes","seconds","milliseconds","leadingZero","typedMonthPart","knownParts","symbols","_value","Date","monthNames","allFormatedMonths","Object","defineProperty","prototype","get","enumerable","configurable","setValue","value","modifyExisting","hasValue","_this","pred","a","p","type","getExisting","pattern","intl","splitDateFormat","reduce","getDateObject","i","length","getTextAndFormat","merge","formatDate","dateFormatString","sampleFormat","setExisting","symbol","setFullYear","setMonth","modifyPart","offset","newValue","getFullYear","setDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","parsePart","currentChar","_a","resetLeadingZero","baseDate","dateParts","baseFormat","replaced","prefix","current","suffix","parsedDate","matchMonth","charAt","slice","middle","middleNumber","parseInt","parseDate","isNaN","monthNumber","getMonth","getMilliseconds","isAbbrMonth","partMap","symbolMap","hasLeadingZero","parts","partPattern","names","filter","part","indexOf","typedChar","toLowerCase","monthAsNum","toString","substring","dateFormatParts","dateFormatNames","partLength","push","returnValue","join","text","mask","resultText","resultFormat","r","currentSymbol","dateFieldName","assign","nameType"],"mappings":"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","sourcesContent":["import { addMonths, cloneDate, createDate, isEqual, getDate, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Mask } from './mask';\nimport { dateSymbolMap } from './../utils';\n/**\n * @hidden\n */\nvar KendoDate = /** @class */ (function () {\n    function KendoDate(intlProvider, formatPlaceholder, format) {\n        this.year = true;\n        this.month = true;\n        this.date = true;\n        this.hours = true;\n        this.minutes = true;\n        this.seconds = true;\n        this.milliseconds = true;\n        this.leadingZero = null;\n        this.typedMonthPart = '';\n        this.knownParts = 'adHhmMsEy';\n        this.symbols = {\n            'E': 'E',\n            'H': 'H',\n            'M': 'M',\n            'a': 'a',\n            'd': 'd',\n            'h': 'h',\n            'm': 'm',\n            's': 's',\n            'y': 'y'\n        };\n        this._value = getDate(new Date());\n        this.intlProvider = intlProvider;\n        this.formatPlaceholder = formatPlaceholder;\n        this.format = format;\n        this.monthNames = this.allFormatedMonths();\n    }\n    Object.defineProperty(KendoDate.prototype, \"intl\", {\n        get: function () {\n            return this.intlProvider();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(KendoDate.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    KendoDate.prototype.setValue = function (value) {\n        if (!value) {\n            this._value = getDate(new Date());\n            this.modifyExisting(false);\n        }\n        else if (!isEqual(value, this._value)) {\n            this._value = cloneDate(value);\n            this.modifyExisting(true);\n        }\n    };\n    KendoDate.prototype.hasValue = function () {\n        var _this = this;\n        var pred = function (a, p) { return a || p.type !== 'literal' && p.type !== 'dayperiod' && _this.getExisting(p.pattern[0]); };\n        return this.intl.splitDateFormat(this.format).reduce(pred, false);\n    };\n    KendoDate.prototype.getDateObject = function () {\n        for (var i = 0; i < this.knownParts.length; i++) {\n            if (!this.getExisting(this.knownParts[i])) {\n                return null;\n            }\n        }\n        return cloneDate(this.value);\n    };\n    KendoDate.prototype.getTextAndFormat = function () {\n        return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));\n    };\n    KendoDate.prototype.modifyExisting = function (value) {\n        var sampleFormat = this.dateFormatString(this.value, this.format).symbols;\n        for (var i = 0; i < sampleFormat.length; i++) {\n            this.setExisting(sampleFormat[i], value);\n        }\n    };\n    KendoDate.prototype.getExisting = function (symbol) {\n        switch (symbol) {\n            case 'y': return this.year;\n            case 'M':\n            case 'L': return this.month;\n            case 'd': return this.date;\n            case 'E': return this.date && this.month && this.year;\n            case 'h':\n            case 'H': return this.hours;\n            case 'm': return this.minutes;\n            case 's': return this.seconds;\n            default: return true;\n        }\n    };\n    KendoDate.prototype.setExisting = function (symbol, value) {\n        switch (symbol) {\n            case 'y':\n                // allow 2/29 dates\n                this.year = value;\n                if (value === false) {\n                    this._value.setFullYear(2000);\n                }\n                break;\n            case 'M':\n                // make sure you can type 31 in the day part\n                this.month = value;\n                if (value === false) {\n                    this._value.setMonth(0);\n                }\n                break;\n            case 'd':\n                this.date = value;\n                break;\n            case 'h':\n            case 'H':\n                this.hours = value;\n                break;\n            case 'm':\n                this.minutes = value;\n                break;\n            case 's':\n                this.seconds = value;\n                break;\n            default: return;\n        }\n    };\n    KendoDate.prototype.modifyPart = function (symbol, offset) {\n        var newValue = cloneDate(this.value);\n        switch (symbol) {\n            case 'y':\n                newValue.setFullYear(newValue.getFullYear() + offset);\n                break;\n            case 'M':\n                newValue = addMonths(this.value, offset);\n                break;\n            case 'd':\n            case 'E':\n                newValue.setDate(newValue.getDate() + offset);\n                break;\n            case 'h':\n            case 'H':\n                newValue.setHours(newValue.getHours() + offset);\n                break;\n            case 'm':\n                newValue.setMinutes(newValue.getMinutes() + offset);\n                break;\n            case 's':\n                newValue.setSeconds(newValue.getSeconds() + offset);\n                break;\n            case 'a':\n                newValue.setHours(newValue.getHours() + (12 * offset));\n                break;\n            default: break;\n        }\n        this.setExisting(symbol, true);\n        this._value = newValue;\n    };\n    KendoDate.prototype.parsePart = function (symbol, currentChar) {\n        var _a;\n        this.resetLeadingZero();\n        if (!currentChar) {\n            this.setExisting(symbol, false);\n            return { value: null };\n        }\n        var baseDate = this.intl.formatDate(this.value, this.format);\n        var dateParts = this.dateFormatString(this.value, this.format);\n        var baseFormat = dateParts.symbols;\n        var replaced = false;\n        var prefix = '';\n        var current = '';\n        var suffix = '';\n        for (var i = 0; i < baseDate.length; i++) {\n            if (baseFormat[i] === symbol) {\n                current += this.getExisting(symbol) ? baseDate[i] : '0';\n                replaced = true;\n            }\n            else if (!replaced) {\n                prefix += baseDate[i];\n            }\n            else {\n                suffix += baseDate[i];\n            }\n        }\n        var parsedDate = null;\n        var month = this.matchMonth(currentChar);\n        while (current.length > 0 && current.charAt(0) === '0') {\n            current = current.slice(1);\n        }\n        if (current.length >= 4) {\n            current = '';\n        }\n        for (var i = 0; i < 2; i++) {\n            var middle = current + currentChar;\n            var middleNumber = parseInt(middle, 10);\n            parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);\n            if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {\n                if (symbol === 'M' && !month) {\n                    var monthNumber = middleNumber - 1;\n                    if (monthNumber > -1 && monthNumber < 12) {\n                        parsedDate = cloneDate(this.value);\n                        parsedDate.setMonth(monthNumber);\n                        if (parsedDate.getMonth() !== monthNumber) {\n                            parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n                        }\n                    }\n                }\n                if (symbol === 'y') {\n                    parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);\n                    if (this.date && parsedDate.getDate() !== this.value.getDate()) {\n                        parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n                    }\n                }\n            }\n            if (parsedDate) {\n                this._value = parsedDate;\n                this.setExisting(symbol, true);\n                return { value: this.value };\n            }\n            current = '';\n        }\n        if (month) {\n            parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);\n            if (parsedDate) {\n                this._value = parsedDate;\n                this.setExisting(symbol, true);\n                return { value: this.value };\n            }\n        }\n        if (currentChar === '0') {\n            this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a = {}, _a[symbol] = true, _a) : null;\n            this.setExisting(symbol, false);\n        }\n        return { value: null };\n    };\n    KendoDate.prototype.symbolMap = function (symbol) {\n        return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];\n    };\n    KendoDate.prototype.resetLeadingZero = function () {\n        var hasLeadingZero = this.leadingZero !== null;\n        this.leadingZero = null;\n        return hasLeadingZero;\n    };\n    KendoDate.prototype.isAbbrMonth = function (parts, symbol) {\n        var pattern = this.partPattern(parts, symbol);\n        return pattern.type === 'month' && pattern.names;\n    };\n    KendoDate.prototype.partPattern = function (parts, symbol) {\n        return parts.filter(function (part) { return part.pattern.indexOf(symbol) !== -1; })[0];\n    };\n    KendoDate.prototype.matchMonth = function (typedChar) {\n        this.typedMonthPart += typedChar.toLowerCase();\n        if (this.monthNames.length === 0) {\n            return '';\n        }\n        while (this.typedMonthPart.length > 0) {\n            for (var i = 0; i < this.monthNames.length; i++) {\n                if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {\n                    return this.monthNames[i];\n                }\n            }\n            var monthAsNum = parseInt(this.typedMonthPart, 10);\n            /* ensure they exact match */\n            if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {\n                return this.monthNames[monthAsNum - 1];\n            }\n            this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);\n        }\n        return '';\n    };\n    KendoDate.prototype.allFormatedMonths = function () {\n        var dateFormatParts = this.intl.splitDateFormat(this.format);\n        for (var i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].type === 'month' && dateFormatParts[i].names) {\n                return this.intl.dateFormatNames(dateFormatParts[i].names);\n            }\n        }\n        return [];\n    };\n    KendoDate.prototype.dateFormatString = function (date, format) {\n        var dateFormatParts = this.intl.splitDateFormat(format);\n        var parts = [];\n        var partMap = [];\n        for (var i = 0; i < dateFormatParts.length; i++) {\n            var partLength = this.intl.formatDate(date, { pattern: dateFormatParts[i].pattern }).length;\n            while (partLength > 0) {\n                parts.push(this.symbols[dateFormatParts[i].pattern[0]] || '_');\n                partMap.push(dateFormatParts[i]);\n                partLength--;\n            }\n        }\n        var returnValue = new Mask();\n        returnValue.symbols = parts.join('');\n        returnValue.partMap = partMap;\n        return returnValue;\n    };\n    KendoDate.prototype.merge = function (text, mask) {\n        // Important: right to left.\n        var resultText = '';\n        var resultFormat = '';\n        var format = mask.symbols;\n        for (var r = format.length - 1; r >= 0; r--) {\n            if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {\n                resultText = text[r] + resultText;\n                resultFormat = format[r] + resultFormat;\n            }\n            else {\n                var currentSymbol = format[r];\n                while (r >= 0 && currentSymbol === format[r]) {\n                    r--;\n                }\n                r++;\n                if (this.leadingZero && this.leadingZero[currentSymbol]) {\n                    resultText = '0' + resultText;\n                }\n                else {\n                    resultText = this.dateFieldName(mask.partMap[r]) + resultText;\n                }\n                while (resultFormat.length < resultText.length) {\n                    resultFormat = format[r] + resultFormat;\n                }\n            }\n        }\n        return { text: resultText, format: resultFormat };\n    };\n    KendoDate.prototype.dateFieldName = function (part) {\n        var formatPlaceholder = (this.formatPlaceholder || 'wide');\n        if (formatPlaceholder[part.type]) {\n            return formatPlaceholder[part.type];\n        }\n        if (formatPlaceholder === 'formatPattern') {\n            return part.pattern;\n        }\n        return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));\n    };\n    return KendoDate;\n}());\nexport { KendoDate };\n"]},"metadata":{},"sourceType":"module"}