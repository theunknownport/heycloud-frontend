{"ast":null,"code":"import { addEventListener, elapsed, relativeNow, toServerDuration } from '@datadog/browser-core'; // Arbitrary value to cap number of element mostly for backend & to save bandwidth\n\nexport var MAX_NUMBER_OF_SELECTABLE_FOREGROUND_PERIODS = 500; // Arbitrary value to cap number of element mostly for memory consumption in the browser\n\nexport var MAX_NUMBER_OF_STORED_FOREGROUND_PERIODS = 2500;\nvar foregroundPeriods = [];\nexport function startForegroundContexts() {\n  if (document.hasFocus()) {\n    addNewForegroundPeriod();\n  }\n\n  var stopForegroundTracking = trackFocus(addNewForegroundPeriod).stop;\n  var stopBlurTracking = trackBlur(closeForegroundPeriod).stop;\n  return {\n    isInForegroundAt: isInForegroundAt,\n    selectInForegroundPeriodsFor: selectInForegroundPeriodsFor,\n    stop: function () {\n      foregroundPeriods = [];\n      stopForegroundTracking();\n      stopBlurTracking();\n    }\n  };\n}\nexport function addNewForegroundPeriod() {\n  if (foregroundPeriods.length > MAX_NUMBER_OF_STORED_FOREGROUND_PERIODS) {\n    return;\n  }\n\n  var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n  var now = relativeNow();\n\n  if (currentForegroundPeriod !== undefined && currentForegroundPeriod.end === undefined) {\n    return;\n  }\n\n  foregroundPeriods.push({\n    start: now\n  });\n}\nexport function closeForegroundPeriod() {\n  if (foregroundPeriods.length === 0) {\n    return;\n  }\n\n  var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n  var now = relativeNow();\n\n  if (currentForegroundPeriod.end !== undefined) {\n    return;\n  }\n\n  currentForegroundPeriod.end = now;\n}\n\nfunction trackFocus(onFocusChange) {\n  return addEventListener(window, \"focus\"\n  /* FOCUS */\n  , function (event) {\n    if (!event.isTrusted) {\n      return;\n    }\n\n    onFocusChange();\n  });\n}\n\nfunction trackBlur(onBlurChange) {\n  return addEventListener(window, \"blur\"\n  /* BLUR */\n  , function (event) {\n    if (!event.isTrusted) {\n      return;\n    }\n\n    onBlurChange();\n  });\n}\n\nfunction isInForegroundAt(startTime) {\n  for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n    var foregroundPeriod = foregroundPeriods[i];\n\n    if (foregroundPeriod.end !== undefined && startTime > foregroundPeriod.end) {\n      break;\n    }\n\n    if (startTime > foregroundPeriod.start && (foregroundPeriod.end === undefined || startTime < foregroundPeriod.end)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction selectInForegroundPeriodsFor(eventStartTime, duration) {\n  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n  var eventEndTime = eventStartTime + duration;\n  var filteredForegroundPeriods = [];\n  var earliestIndex = Math.max(0, foregroundPeriods.length - MAX_NUMBER_OF_SELECTABLE_FOREGROUND_PERIODS);\n\n  for (var i = foregroundPeriods.length - 1; i >= earliestIndex; i--) {\n    var foregroundPeriod = foregroundPeriods[i];\n\n    if (foregroundPeriod.end !== undefined && eventStartTime > foregroundPeriod.end) {\n      // event starts after the end of the current focus period\n      // since the array is sorted, we can stop looking for foreground periods\n      break;\n    }\n\n    if (eventEndTime < foregroundPeriod.start) {\n      // event ends before the start of the current focus period\n      // continue to previous one\n      continue;\n    }\n\n    var startTime = eventStartTime > foregroundPeriod.start ? eventStartTime : foregroundPeriod.start;\n    var startDuration = elapsed(eventStartTime, startTime);\n    var endTime = foregroundPeriod.end === undefined || eventEndTime < foregroundPeriod.end ? eventEndTime : foregroundPeriod.end;\n    var endDuration = elapsed(startTime, endTime);\n    filteredForegroundPeriods.unshift({\n      start: toServerDuration(startDuration),\n      duration: toServerDuration(endDuration)\n    });\n  }\n\n  return filteredForegroundPeriods;\n}","map":{"version":3,"sources":["../../src/domain/foregroundContexts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { addEventListener, elapsed, relativeNow, toServerDuration, } from '@datadog/browser-core';\n// Arbitrary value to cap number of element mostly for backend & to save bandwidth\nexport var MAX_NUMBER_OF_SELECTABLE_FOREGROUND_PERIODS = 500;\n// Arbitrary value to cap number of element mostly for memory consumption in the browser\nexport var MAX_NUMBER_OF_STORED_FOREGROUND_PERIODS = 2500;\nvar foregroundPeriods = [];\nexport function startForegroundContexts() {\n    if (document.hasFocus()) {\n        addNewForegroundPeriod();\n    }\n    var stopForegroundTracking = trackFocus(addNewForegroundPeriod).stop;\n    var stopBlurTracking = trackBlur(closeForegroundPeriod).stop;\n    return {\n        isInForegroundAt: isInForegroundAt,\n        selectInForegroundPeriodsFor: selectInForegroundPeriodsFor,\n        stop: function () {\n            foregroundPeriods = [];\n            stopForegroundTracking();\n            stopBlurTracking();\n        },\n    };\n}\nexport function addNewForegroundPeriod() {\n    if (foregroundPeriods.length > MAX_NUMBER_OF_STORED_FOREGROUND_PERIODS) {\n        return;\n    }\n    var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n    var now = relativeNow();\n    if (currentForegroundPeriod !== undefined && currentForegroundPeriod.end === undefined) {\n        return;\n    }\n    foregroundPeriods.push({\n        start: now,\n    });\n}\nexport function closeForegroundPeriod() {\n    if (foregroundPeriods.length === 0) {\n        return;\n    }\n    var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n    var now = relativeNow();\n    if (currentForegroundPeriod.end !== undefined) {\n        return;\n    }\n    currentForegroundPeriod.end = now;\n}\nfunction trackFocus(onFocusChange) {\n    return addEventListener(window, \"focus\" /* FOCUS */, function (event) {\n        if (!event.isTrusted) {\n            return;\n        }\n        onFocusChange();\n    });\n}\nfunction trackBlur(onBlurChange) {\n    return addEventListener(window, \"blur\" /* BLUR */, function (event) {\n        if (!event.isTrusted) {\n            return;\n        }\n        onBlurChange();\n    });\n}\nfunction isInForegroundAt(startTime) {\n    for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n        var foregroundPeriod = foregroundPeriods[i];\n        if (foregroundPeriod.end !== undefined && startTime > foregroundPeriod.end) {\n            break;\n        }\n        if (startTime > foregroundPeriod.start &&\n            (foregroundPeriod.end === undefined || startTime < foregroundPeriod.end)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction selectInForegroundPeriodsFor(eventStartTime, duration) {\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    var eventEndTime = (eventStartTime + duration);\n    var filteredForegroundPeriods = [];\n    var earliestIndex = Math.max(0, foregroundPeriods.length - MAX_NUMBER_OF_SELECTABLE_FOREGROUND_PERIODS);\n    for (var i = foregroundPeriods.length - 1; i >= earliestIndex; i--) {\n        var foregroundPeriod = foregroundPeriods[i];\n        if (foregroundPeriod.end !== undefined && eventStartTime > foregroundPeriod.end) {\n            // event starts after the end of the current focus period\n            // since the array is sorted, we can stop looking for foreground periods\n            break;\n        }\n        if (eventEndTime < foregroundPeriod.start) {\n            // event ends before the start of the current focus period\n            // continue to previous one\n            continue;\n        }\n        var startTime = eventStartTime > foregroundPeriod.start ? eventStartTime : foregroundPeriod.start;\n        var startDuration = elapsed(eventStartTime, startTime);\n        var endTime = foregroundPeriod.end === undefined || eventEndTime < foregroundPeriod.end ? eventEndTime : foregroundPeriod.end;\n        var endDuration = elapsed(startTime, endTime);\n        filteredForegroundPeriods.unshift({\n            start: toServerDuration(startDuration),\n            duration: toServerDuration(endDuration),\n        });\n    }\n    return filteredForegroundPeriods;\n}\n//# sourceMappingURL=foregroundContexts.js.map"]},"metadata":{},"sourceType":"module"}