{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { BuildMode } from '../../boot/init';\nimport { objectValues } from '../../tools/utils';\nimport { createEndpointBuilder, INTAKE_SITE_US } from './endpointBuilder';\nexport function computeTransportConfiguration(initConfiguration, buildEnv) {\n  var endpointBuilders = {\n    logsEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'logs'),\n    rumEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'rum'),\n    sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'sessionReplay')\n  };\n  var intakeEndpoints = objectValues(endpointBuilders).map(function (builder) {\n    return builder.buildIntakeUrl();\n  });\n\n  var configuration = __assign({\n    isIntakeUrl: function (url) {\n      return intakeEndpoints.some(function (intakeEndpoint) {\n        return url.indexOf(intakeEndpoint) === 0;\n      });\n    }\n  }, endpointBuilders);\n\n  if (initConfiguration.internalMonitoringApiKey) {\n    configuration.internalMonitoringEndpointBuilder = createEndpointBuilder(initConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring');\n  }\n\n  if (buildEnv.buildMode === BuildMode.E2E_TEST) {\n    var e2eEndpointBuilder = function (placeholder) {\n      return {\n        build: function () {\n          return placeholder;\n        }\n      };\n    };\n\n    configuration.internalMonitoringEndpointBuilder = e2eEndpointBuilder('<<< E2E INTERNAL MONITORING ENDPOINT >>>');\n    configuration.logsEndpointBuilder = e2eEndpointBuilder('<<< E2E LOGS ENDPOINT >>>');\n    configuration.rumEndpointBuilder = e2eEndpointBuilder('<<< E2E RUM ENDPOINT >>>');\n    configuration.sessionReplayEndpointBuilder = e2eEndpointBuilder('<<< E2E SESSION REPLAY ENDPOINT >>>');\n  }\n\n  if (buildEnv.buildMode === BuildMode.STAGING && initConfiguration.replica !== undefined) {\n    var replicaConfiguration = __assign(__assign({}, initConfiguration), {\n      site: INTAKE_SITE_US,\n      applicationId: initConfiguration.replica.applicationId,\n      clientToken: initConfiguration.replica.clientToken,\n      useAlternateIntakeDomains: true,\n      intakeApiVersion: 2\n    });\n\n    var replicaEndpointBuilders = {\n      logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs'),\n      rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'rum'),\n      internalMonitoringEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring')\n    };\n    configuration.replica = __assign({\n      applicationId: initConfiguration.replica.applicationId\n    }, replicaEndpointBuilders);\n    var replicaIntakeEndpoints = objectValues(replicaEndpointBuilders).map(function (builder) {\n      return builder.buildIntakeUrl();\n    });\n    intakeEndpoints.push.apply(intakeEndpoints, replicaIntakeEndpoints);\n  }\n\n  return configuration;\n}","map":{"version":3,"sources":["../../../src/domain/configuration/transportConfiguration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { BuildMode } from '../../boot/init';\nimport { objectValues } from '../../tools/utils';\nimport { createEndpointBuilder, INTAKE_SITE_US } from './endpointBuilder';\nexport function computeTransportConfiguration(initConfiguration, buildEnv) {\n    var endpointBuilders = {\n        logsEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'logs'),\n        rumEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'rum'),\n        sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'sessionReplay'),\n    };\n    var intakeEndpoints = objectValues(endpointBuilders).map(function (builder) { return builder.buildIntakeUrl(); });\n    var configuration = __assign({ isIntakeUrl: function (url) { return intakeEndpoints.some(function (intakeEndpoint) { return url.indexOf(intakeEndpoint) === 0; }); } }, endpointBuilders);\n    if (initConfiguration.internalMonitoringApiKey) {\n        configuration.internalMonitoringEndpointBuilder = createEndpointBuilder(initConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring');\n    }\n    if (buildEnv.buildMode === BuildMode.E2E_TEST) {\n        var e2eEndpointBuilder = function (placeholder) { return ({ build: function () { return placeholder; } }); };\n        configuration.internalMonitoringEndpointBuilder = e2eEndpointBuilder('<<< E2E INTERNAL MONITORING ENDPOINT >>>');\n        configuration.logsEndpointBuilder = e2eEndpointBuilder('<<< E2E LOGS ENDPOINT >>>');\n        configuration.rumEndpointBuilder = e2eEndpointBuilder('<<< E2E RUM ENDPOINT >>>');\n        configuration.sessionReplayEndpointBuilder = e2eEndpointBuilder('<<< E2E SESSION REPLAY ENDPOINT >>>');\n    }\n    if (buildEnv.buildMode === BuildMode.STAGING && initConfiguration.replica !== undefined) {\n        var replicaConfiguration = __assign(__assign({}, initConfiguration), { site: INTAKE_SITE_US, applicationId: initConfiguration.replica.applicationId, clientToken: initConfiguration.replica.clientToken, useAlternateIntakeDomains: true, intakeApiVersion: 2 });\n        var replicaEndpointBuilders = {\n            logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs'),\n            rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'rum'),\n            internalMonitoringEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring'),\n        };\n        configuration.replica = __assign({ applicationId: initConfiguration.replica.applicationId }, replicaEndpointBuilders);\n        var replicaIntakeEndpoints = objectValues(replicaEndpointBuilders).map(function (builder) {\n            return builder.buildIntakeUrl();\n        });\n        intakeEndpoints.push.apply(intakeEndpoints, replicaIntakeEndpoints);\n    }\n    return configuration;\n}\n//# sourceMappingURL=transportConfiguration.js.map"]},"metadata":{},"sourceType":"module"}