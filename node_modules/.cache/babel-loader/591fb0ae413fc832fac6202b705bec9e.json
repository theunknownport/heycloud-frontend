{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { LifeCycleEventType } from '@datadog/browser-rum-core';\nimport { record } from '../domain/record';\nimport { startSegmentCollection } from '../domain/segmentCollection';\nimport { send } from '../transport/send';\nimport { RecordType } from '../types';\nexport function startRecording(lifeCycle, applicationId, configuration, session, parentContexts, worker) {\n  var _a = startSegmentCollection(lifeCycle, applicationId, session, parentContexts, function (data, meta, rawSegmentSize, flushReason) {\n    return send(configuration.sessionReplayEndpointBuilder, data, meta, rawSegmentSize, flushReason);\n  }, worker),\n      addRecord = _a.addRecord,\n      stopSegmentCollection = _a.stop;\n\n  function addRawRecord(rawRecord) {\n    addRecord(__assign(__assign({}, rawRecord), {\n      timestamp: Date.now()\n    }));\n  }\n\n  var _b = record({\n    emit: addRawRecord,\n    defaultPrivacyLevel: configuration.defaultPrivacyLevel\n  }),\n      stopRecording = _b.stop,\n      takeFullSnapshot = _b.takeFullSnapshot,\n      flushMutations = _b.flushMutations;\n\n  var unsubscribeViewEnded = lifeCycle.subscribe(LifeCycleEventType.VIEW_ENDED, function () {\n    flushMutations();\n    addRawRecord({\n      type: RecordType.ViewEnd\n    });\n  }).unsubscribe;\n  var unsubscribeViewCreated = lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, takeFullSnapshot).unsubscribe;\n  return {\n    stop: function () {\n      unsubscribeViewEnded();\n      unsubscribeViewCreated();\n      stopRecording();\n      stopSegmentCollection();\n    }\n  };\n}","map":{"version":3,"sources":["../../src/boot/startRecording.ts"],"names":[],"mappings":";AACA,SAAoB,kBAApB,QAA0E,2BAA1E;AAEA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,sBAAT,QAAuC,6BAAvC;AAEA,SAAS,IAAT,QAAqB,mBAArB;AACA,SAAoB,UAApB,QAAsC,UAAtC;AAEA,OAAM,SAAU,cAAV,CACJ,SADI,EAEJ,aAFI,EAGJ,aAHI,EAIJ,OAJI,EAKJ,cALI,EAMJ,MANI,EAMiB;AAEf,MAAA,EAAA,GAA6C,sBAAsB,CACvE,SADuE,EAEvE,aAFuE,EAGvE,OAHuE,EAIvE,cAJuE,EAKvE,UAAC,IAAD,EAAO,IAAP,EAAa,cAAb,EAA6B,WAA7B,EAAwC;AACtC,WAAA,IAAI,CAAC,aAAa,CAAC,4BAAf,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,cAAzD,EAAyE,WAAzE,CAAJ;AAAyF,GANpB,EAOvE,MAPuE,CAAnE;AAAA,MAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,MAAmB,qBAAqB,GAAA,EAAA,CAAA,IAAxC;;AAUN,WAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,IAAA,SAAS,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,SAAN,CAAA,EAAe;AAAE,MAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AAAb,KAAf,CAAA,CAAT;AACD;;AAEK,MAAA,EAAA,GAA4D,MAAM,CAAC;AACvE,IAAA,IAAI,EAAE,YADiE;AAEvE,IAAA,mBAAmB,EAAE,aAAa,CAAC;AAFoC,GAAD,CAAlE;AAAA,MAAQ,aAAa,GAAA,EAAA,CAAA,IAArB;AAAA,MAAuB,gBAAgB,GAAA,EAAA,CAAA,gBAAvC;AAAA,MAAyC,cAAc,GAAA,EAAA,CAAA,cAAvD;;AAKE,MAAa,oBAAoB,GAAK,SAAS,CAAC,SAAV,CAAoB,kBAAkB,CAAC,UAAvC,EAAmD,YAAA;AAC/F,IAAA,cAAc;AACd,IAAA,YAAY,CAAC;AACX,MAAA,IAAI,EAAE,UAAU,CAAC;AADN,KAAD,CAAZ;AAGD,GAL6C,EAAL,WAAjC;AAMA,MAAa,sBAAsB,GAAK,SAAS,CAAC,SAAV,CAAoB,kBAAkB,CAAC,YAAvC,EAAqD,gBAArD,EAAL,WAAnC;AAER,SAAO;AACL,IAAA,IAAI,EAAE,YAAA;AACJ,MAAA,oBAAoB;AACpB,MAAA,sBAAsB;AACtB,MAAA,aAAa;AACb,MAAA,qBAAqB;AACtB;AANI,GAAP;AAQD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { LifeCycleEventType } from '@datadog/browser-rum-core';\nimport { record } from '../domain/record';\nimport { startSegmentCollection } from '../domain/segmentCollection';\nimport { send } from '../transport/send';\nimport { RecordType } from '../types';\nexport function startRecording(lifeCycle, applicationId, configuration, session, parentContexts, worker) {\n    var _a = startSegmentCollection(lifeCycle, applicationId, session, parentContexts, function (data, meta, rawSegmentSize, flushReason) {\n        return send(configuration.sessionReplayEndpointBuilder, data, meta, rawSegmentSize, flushReason);\n    }, worker), addRecord = _a.addRecord, stopSegmentCollection = _a.stop;\n    function addRawRecord(rawRecord) {\n        addRecord(__assign(__assign({}, rawRecord), { timestamp: Date.now() }));\n    }\n    var _b = record({\n        emit: addRawRecord,\n        defaultPrivacyLevel: configuration.defaultPrivacyLevel,\n    }), stopRecording = _b.stop, takeFullSnapshot = _b.takeFullSnapshot, flushMutations = _b.flushMutations;\n    var unsubscribeViewEnded = lifeCycle.subscribe(LifeCycleEventType.VIEW_ENDED, function () {\n        flushMutations();\n        addRawRecord({\n            type: RecordType.ViewEnd,\n        });\n    }).unsubscribe;\n    var unsubscribeViewCreated = lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, takeFullSnapshot).unsubscribe;\n    return {\n        stop: function () {\n            unsubscribeViewEnded();\n            unsubscribeViewCreated();\n            stopRecording();\n            stopSegmentCollection();\n        },\n    };\n}\n//# sourceMappingURL=startRecording.js.map"]},"metadata":{},"sourceType":"module"}