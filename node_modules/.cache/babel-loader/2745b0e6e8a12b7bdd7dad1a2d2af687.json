{"ast":null,"code":"import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, isPercentage, makePublicApi, monitor, clocksNow, timeStampNow, display, commonInit, callMonitored, createHandlingStack } from '@datadog/browser-core';\nimport { ActionType } from '../rawRumEvent.types';\nimport { buildEnv } from './buildEnv';\nexport function makeRumPublicApi(startRumImpl, recorderApi) {\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var user = {};\n\n  var getInternalContextStrategy = function () {\n    return undefined;\n  };\n\n  var getInitConfigurationStrategy = function () {\n    return undefined;\n  };\n\n  var bufferApiCalls = new BoundedBuffer();\n\n  var addTimingStrategy = function (name, time) {\n    if (time === void 0) {\n      time = timeStampNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return addTimingStrategy(name, time);\n    });\n  };\n\n  var startViewStrategy = function (name, startClocks) {\n    if (startClocks === void 0) {\n      startClocks = clocksNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return startViewStrategy(name, startClocks);\n    });\n  };\n\n  var addActionStrategy = function (action, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return addActionStrategy(action, commonContext);\n    });\n  };\n\n  var addErrorStrategy = function (providedError, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return addErrorStrategy(providedError, commonContext);\n    });\n  };\n\n  function clonedCommonContext() {\n    return deepClone({\n      context: globalContextManager.get(),\n      user: user\n    });\n  }\n\n  function initRum(initConfiguration) {\n    if (!checkCookiesAuthorized(buildCookieOptions(initConfiguration)) || !checkIsNotLocalFile() || !canInitRum(initConfiguration)) {\n      return;\n    }\n\n    var _a = commonInit(initConfiguration, buildEnv),\n        configuration = _a.configuration,\n        internalMonitoring = _a.internalMonitoring;\n\n    if (!configuration.trackViewsManually) {\n      doStartRum(initConfiguration, configuration, internalMonitoring);\n    } else {\n      // drain beforeInitCalls by buffering them until we start RUM\n      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n      // in order to ensure that calls are processed in order\n      var beforeInitCalls = bufferApiCalls;\n      bufferApiCalls = new BoundedBuffer();\n\n      startViewStrategy = function (name) {\n        doStartRum(initConfiguration, configuration, internalMonitoring, name);\n      };\n\n      beforeInitCalls.drain();\n    }\n\n    getInitConfigurationStrategy = function () {\n      return deepClone(initConfiguration);\n    };\n\n    isAlreadyInitialized = true;\n  }\n\n  function doStartRum(initConfiguration, configuration, internalMonitoring, initialViewName) {\n    var startRumResults = startRumImpl(initConfiguration, configuration, internalMonitoring, function () {\n      return {\n        user: user,\n        context: globalContextManager.get(),\n        hasReplay: recorderApi.isRecording() ? true : undefined\n      };\n    }, recorderApi, initialViewName);\n    startViewStrategy = startRumResults.startView, addActionStrategy = startRumResults.addAction, addErrorStrategy = startRumResults.addError, addTimingStrategy = startRumResults.addTiming, getInternalContextStrategy = startRumResults.getInternalContext;\n    bufferApiCalls.drain();\n    recorderApi.onRumStart(startRumResults.lifeCycle, initConfiguration, configuration, startRumResults.session, startRumResults.parentContexts);\n  }\n\n  var rumPublicApi = makePublicApi({\n    init: monitor(initRum),\n    addRumGlobalContext: monitor(globalContextManager.add),\n    removeRumGlobalContext: monitor(globalContextManager.remove),\n    getRumGlobalContext: monitor(globalContextManager.get),\n    setRumGlobalContext: monitor(globalContextManager.set),\n    getInternalContext: monitor(function (startTime) {\n      return getInternalContextStrategy(startTime);\n    }),\n    getInitConfiguration: monitor(function () {\n      return getInitConfigurationStrategy();\n    }),\n    addAction: monitor(function (name, context) {\n      addActionStrategy({\n        name: name,\n        context: deepClone(context),\n        startClocks: clocksNow(),\n        type: ActionType.CUSTOM\n      });\n    }),\n    addError: function (error, context) {\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        addErrorStrategy({\n          error: error,\n          handlingStack: handlingStack,\n          context: deepClone(context),\n          startClocks: clocksNow()\n        });\n      });\n    },\n    addTiming: monitor(function (name, time) {\n      addTimingStrategy(name, time);\n    }),\n    setUser: monitor(function (newUser) {\n      var sanitizedUser = sanitizeUser(newUser);\n\n      if (sanitizedUser) {\n        user = sanitizedUser;\n      } else {\n        display.error('Unsupported user:', newUser);\n      }\n    }),\n    removeUser: monitor(function () {\n      user = {};\n    }),\n    startView: monitor(function (name) {\n      startViewStrategy(name);\n    }),\n    startSessionReplayRecording: monitor(recorderApi.start),\n    stopSessionReplayRecording: monitor(recorderApi.stop)\n  });\n  return rumPublicApi;\n\n  function sanitizeUser(newUser) {\n    if (typeof newUser !== 'object' || !newUser) {\n      return;\n    }\n\n    var result = deepClone(newUser);\n\n    if ('id' in result) {\n      result.id = String(result.id);\n    }\n\n    if ('name' in result) {\n      result.name = String(result.name);\n    }\n\n    if ('email' in result) {\n      result.email = String(result.email);\n    }\n\n    return result;\n  }\n\n  function canInitRum(initConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!initConfiguration.silentMultipleInit) {\n        display.error('DD_RUM is already initialized.');\n      }\n\n      return false;\n    }\n\n    if (!initConfiguration || !initConfiguration.clientToken) {\n      display.error('Client Token is not configured, we will not send any data.');\n      return false;\n    }\n\n    if (!initConfiguration.applicationId) {\n      display.error('Application ID is not configured, no RUM data will be collected.');\n      return false;\n    }\n\n    if (initConfiguration.sampleRate !== undefined && !isPercentage(initConfiguration.sampleRate)) {\n      display.error('Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (initConfiguration.replaySampleRate !== undefined && !isPercentage(initConfiguration.replaySampleRate)) {\n      display.error('Replay Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (Array.isArray(initConfiguration.allowedTracingOrigins) && initConfiguration.allowedTracingOrigins.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service need to be configured when tracing is enabled');\n      return false;\n    }\n\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/boot/rumPublicApi.ts"],"names":[],"mappings":"AAAA,SACE,aADF,EAEE,kBAFF,EAGE,sBAHF,EAIE,mBAJF,EAME,oBANF,EAOE,SAPF,EAQE,YARF,EASE,aATF,EAUE,OAVF,EAYE,SAZF,EAaE,YAbF,EAcE,OAdF,EAeE,UAfF,EAkBE,aAlBF,EAmBE,mBAnBF,QAuBO,uBAvBP;AA4BA,SAA8B,UAA9B,QAA6D,sBAA7D;AAEA,SAAS,QAAT,QAAyB,YAAzB;AAoCA,OAAM,SAAU,gBAAV,CAA2D,YAA3D,EAAsF,WAAtF,EAA8G;AAClH,MAAI,oBAAoB,GAAG,KAA3B;AAEA,MAAM,oBAAoB,GAAG,oBAAoB,EAAjD;AACA,MAAI,IAAI,GAAS,EAAjB;;AAEA,MAAI,0BAA0B,GAAyC,YAAA;AAAM,WAAA,SAAA;AAAS,GAAtF;;AACA,MAAI,4BAA4B,GAAG,YAAA;AAAqC,WAAA,SAAA;AAAS,GAAjF;;AAEA,MAAI,cAAc,GAAG,IAAI,aAAJ,EAArB;;AACA,MAAI,iBAAiB,GAAgC,UAAC,IAAD,EAAO,IAAP,EAA4B;AAArB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAO,YAAY,EAAnB;AAAqB;;AAC/E,IAAA,cAAc,CAAC,GAAf,CAAmB,YAAA;AAAM,aAAA,iBAAiB,CAAC,IAAD,EAAjB,IAAiB,CAAjB;AAA6B,KAAtD;AACD,GAFD;;AAGA,MAAI,iBAAiB,GAAgC,UAAC,IAAD,EAAO,WAAP,EAAgC;AAAzB,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAc,SAAS,EAAvB;AAAyB;;AACnF,IAAA,cAAc,CAAC,GAAf,CAAmB,YAAA;AAAM,aAAA,iBAAiB,CAAC,IAAD,EAAjB,WAAiB,CAAjB;AAAoC,KAA7D;AACD,GAFD;;AAGA,MAAI,iBAAiB,GAAgC,UAAC,MAAD,EAAS,aAAT,EAA8C;AAArC,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAgB,mBAAmB,EAAnC;AAAqC;;AACjG,IAAA,cAAc,CAAC,GAAf,CAAmB,YAAA;AAAM,aAAA,iBAAiB,CAAC,MAAD,EAAjB,aAAiB,CAAjB;AAAwC,KAAjE;AACD,GAFD;;AAGA,MAAI,gBAAgB,GAA+B,UAAC,aAAD,EAAgB,aAAhB,EAAqD;AAArC,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAgB,mBAAmB,EAAnC;AAAqC;;AACtG,IAAA,cAAc,CAAC,GAAf,CAAmB,YAAA;AAAM,aAAA,gBAAgB,CAAC,aAAD,EAAhB,aAAgB,CAAhB;AAA8C,KAAvE;AACD,GAFD;;AAIA,WAAS,mBAAT,GAA4B;AAC1B,WAAO,SAAS,CAAC;AACf,MAAA,OAAO,EAAE,oBAAoB,CAAC,GAArB,EADM;AAEf,MAAA,IAAI,EAAE;AAFS,KAAD,CAAhB;AAID;;AAED,WAAS,OAAT,CAAiB,iBAAjB,EAAqC;AACnC,QACE,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,iBAAD,CAAnB,CAAvB,IACA,CAAC,mBAAmB,EADpB,IAEA,CAAC,UAAU,CAAC,iBAAD,CAHb,EAIE;AACA;AACD;;AAEK,QAAA,EAAA,GAAwC,UAAU,CAAC,iBAAD,EAAoB,QAApB,CAAlD;AAAA,QAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,QAAiB,kBAAkB,GAAA,EAAA,CAAA,kBAAnC;;AACN,QAAI,CAAC,aAAa,CAAC,kBAAnB,EAAuC;AACrC,MAAA,UAAU,CAAC,iBAAD,EAAoB,aAApB,EAAmC,kBAAnC,CAAV;AACD,KAFD,MAEO;AACL;AACA;AACA;AACA,UAAM,eAAe,GAAG,cAAxB;AACA,MAAA,cAAc,GAAG,IAAI,aAAJ,EAAjB;;AAEA,MAAA,iBAAiB,GAAG,UAAC,IAAD,EAAK;AACvB,QAAA,UAAU,CAAC,iBAAD,EAAoB,aAApB,EAAmC,kBAAnC,EAAuD,IAAvD,CAAV;AACD,OAFD;;AAGA,MAAA,eAAe,CAAC,KAAhB;AACD;;AACD,IAAA,4BAA4B,GAAG,YAAA;AAAM,aAAA,SAAS,CAAT,iBAAS,CAAT;AAA+C,KAApF;;AAEA,IAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED,WAAS,UAAT,CACE,iBADF,EAEE,aAFF,EAGE,kBAHF,EAIE,eAJF,EAI0B;AAExB,QAAM,eAAe,GAAG,YAAY,CAClC,iBADkC,EAElC,aAFkC,EAGlC,kBAHkC,EAIlC,YAAA;AAAM,aAAC;AACL,QAAA,IAAI,EAAA,IADC;AAEL,QAAA,OAAO,EAAE,oBAAoB,CAAC,GAArB,EAFJ;AAGL,QAAA,SAAS,EAAE,WAAW,CAAC,WAAZ,KAA4B,IAA5B,GAAmC;AAHzC,OAAD;AAIJ,KARgC,EASlC,WATkC,EAUlC,eAVkC,CAApC;AAca,IAAA,iBAAiB,GAK1B,eAAe,CALW,SAAjB,EACA,iBAAiB,GAI1B,eAAe,CAJW,SADjB,EAED,gBAAgB,GAGxB,eAAe,CAHS,QAFf,EAGA,iBAAiB,GAE1B,eAAe,CAFW,SAHjB,EAIS,0BAA0B,GAC5C,eAAe,CAD6B,kBAL/C;AAOD,IAAA,cAAc,CAAC,KAAf;AAEA,IAAA,WAAW,CAAC,UAAZ,CACE,eAAe,CAAC,SADlB,EAEE,iBAFF,EAGE,aAHF,EAIE,eAAe,CAAC,OAJlB,EAKE,eAAe,CAAC,cALlB;AAOD;;AAED,MAAM,YAAY,GAAG,aAAa,CAAC;AACjC,IAAA,IAAI,EAAE,OAAO,CAAC,OAAD,CADoB;AAGjC,IAAA,mBAAmB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CAHK;AAKjC,IAAA,sBAAsB,EAAE,OAAO,CAAC,oBAAoB,CAAC,MAAtB,CALE;AAOjC,IAAA,mBAAmB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CAPK;AAQjC,IAAA,mBAAmB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CARK;AAUjC,IAAA,kBAAkB,EAAE,OAAO,CAAC,UAAC,SAAD,EAAmB;AAAK,aAAA,0BAA0B,CAA1B,SAA0B,CAA1B;AAAqC,KAA9D,CAVM;AAWjC,IAAA,oBAAoB,EAAE,OAAO,CAAC,YAAA;AAAM,aAAA,4BAAA,EAAA;AAA8B,KAArC,CAXI;AAajC,IAAA,SAAS,EAAE,OAAO,CAAC,UAAC,IAAD,EAAe,OAAf,EAA+B;AAChD,MAAA,iBAAiB,CAAC;AAChB,QAAA,IAAI,EAAA,IADY;AAEhB,QAAA,OAAO,EAAE,SAAS,CAAC,OAAD,CAFF;AAGhB,QAAA,WAAW,EAAE,SAAS,EAHN;AAIhB,QAAA,IAAI,EAAE,UAAU,CAAC;AAJD,OAAD,CAAjB;AAMD,KAPiB,CAbe;AAsBjC,IAAA,QAAQ,EAAE,UAAC,KAAD,EAAiB,OAAjB,EAAiC;AACzC,UAAM,aAAa,GAAG,mBAAmB,EAAzC;AACA,MAAA,aAAa,CAAC,YAAA;AACZ,QAAA,gBAAgB,CAAC;AACf,UAAA,KAAK,EAAA,KADU;AAEf,UAAA,aAAa,EAAA,aAFE;AAGf,UAAA,OAAO,EAAE,SAAS,CAAC,OAAD,CAHH;AAIf,UAAA,WAAW,EAAE,SAAS;AAJP,SAAD,CAAhB;AAMD,OAPY,CAAb;AAQD,KAhCgC;AAkCjC,IAAA,SAAS,EAAE,OAAO,CAAC,UAAC,IAAD,EAAe,IAAf,EAA4B;AAC7C,MAAA,iBAAiB,CAAC,IAAD,EAAO,IAAP,CAAjB;AACD,KAFiB,CAlCe;AAsCjC,IAAA,OAAO,EAAE,OAAO,CAAC,UAAC,OAAD,EAAc;AAC7B,UAAM,aAAa,GAAG,YAAY,CAAC,OAAD,CAAlC;;AACA,UAAI,aAAJ,EAAmB;AACjB,QAAA,IAAI,GAAG,aAAP;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,KAAR,CAAc,mBAAd,EAAmC,OAAnC;AACD;AACF,KAPe,CAtCiB;AA+CjC,IAAA,UAAU,EAAE,OAAO,CAAC,YAAA;AAClB,MAAA,IAAI,GAAG,EAAP;AACD,KAFkB,CA/Cc;AAmDjC,IAAA,SAAS,EAAE,OAAO,CAAC,UAAC,IAAD,EAAc;AAC/B,MAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAFiB,CAnDe;AAuDjC,IAAA,2BAA2B,EAAE,OAAO,CAAC,WAAW,CAAC,KAAb,CAvDH;AAwDjC,IAAA,0BAA0B,EAAE,OAAO,CAAC,WAAW,CAAC,IAAb;AAxDF,GAAD,CAAlC;AA0DA,SAAO,YAAP;;AAEA,WAAS,YAAT,CAAsB,OAAtB,EAAsC;AACpC,QAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,CAAC,OAApC,EAA6C;AAC3C;AACD;;AACD,QAAM,MAAM,GAAG,SAAS,CAAC,OAAD,CAAxB;;AACA,QAAI,QAAQ,MAAZ,EAAoB;AAClB,MAAA,MAAM,CAAC,EAAP,GAAY,MAAM,CAAC,MAAM,CAAC,EAAR,CAAlB;AACD;;AACD,QAAI,UAAU,MAAd,EAAsB;AACpB,MAAA,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,MAAM,CAAC,IAAR,CAApB;AACD;;AACD,QAAI,WAAW,MAAf,EAAuB;AACrB,MAAA,MAAM,CAAC,KAAP,GAAe,MAAM,CAAC,MAAM,CAAC,KAAR,CAArB;AACD;;AACD,WAAO,MAAP;AACD;;AAED,WAAS,UAAT,CAAoB,iBAApB,EAA2D;AACzD,QAAI,oBAAJ,EAA0B;AACxB,UAAI,CAAC,iBAAiB,CAAC,kBAAvB,EAA2C;AACzC,QAAA,OAAO,CAAC,KAAR,CAAc,gCAAd;AACD;;AACD,aAAO,KAAP;AACD;;AACD,QAAI,CAAC,iBAAD,IAAsB,CAAC,iBAAiB,CAAC,WAA7C,EAA0D;AACxD,MAAA,OAAO,CAAC,KAAR,CAAc,4DAAd;AACA,aAAO,KAAP;AACD;;AACD,QAAI,CAAC,iBAAiB,CAAC,aAAvB,EAAsC;AACpC,MAAA,OAAO,CAAC,KAAR,CAAc,kEAAd;AACA,aAAO,KAAP;AACD;;AACD,QAAI,iBAAiB,CAAC,UAAlB,KAAiC,SAAjC,IAA8C,CAAC,YAAY,CAAC,iBAAiB,CAAC,UAAnB,CAA/D,EAA+F;AAC7F,MAAA,OAAO,CAAC,KAAR,CAAc,kDAAd;AACA,aAAO,KAAP;AACD;;AACD,QAAI,iBAAiB,CAAC,gBAAlB,KAAuC,SAAvC,IAAoD,CAAC,YAAY,CAAC,iBAAiB,CAAC,gBAAnB,CAArE,EAA2G;AACzG,MAAA,OAAO,CAAC,KAAR,CAAc,yDAAd;AACA,aAAO,KAAP;AACD;;AACD,QACE,KAAK,CAAC,OAAN,CAAc,iBAAiB,CAAC,qBAAhC,KACA,iBAAiB,CAAC,qBAAlB,CAAwC,MAAxC,KAAmD,CADnD,IAEA,iBAAiB,CAAC,OAAlB,KAA8B,SAHhC,EAIE;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,uDAAd;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;AACF","sourceRoot":"","sourcesContent":["import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, isPercentage, makePublicApi, monitor, clocksNow, timeStampNow, display, commonInit, callMonitored, createHandlingStack, } from '@datadog/browser-core';\nimport { ActionType } from '../rawRumEvent.types';\nimport { buildEnv } from './buildEnv';\nexport function makeRumPublicApi(startRumImpl, recorderApi) {\n    var isAlreadyInitialized = false;\n    var globalContextManager = createContextManager();\n    var user = {};\n    var getInternalContextStrategy = function () { return undefined; };\n    var getInitConfigurationStrategy = function () { return undefined; };\n    var bufferApiCalls = new BoundedBuffer();\n    var addTimingStrategy = function (name, time) {\n        if (time === void 0) { time = timeStampNow(); }\n        bufferApiCalls.add(function () { return addTimingStrategy(name, time); });\n    };\n    var startViewStrategy = function (name, startClocks) {\n        if (startClocks === void 0) { startClocks = clocksNow(); }\n        bufferApiCalls.add(function () { return startViewStrategy(name, startClocks); });\n    };\n    var addActionStrategy = function (action, commonContext) {\n        if (commonContext === void 0) { commonContext = clonedCommonContext(); }\n        bufferApiCalls.add(function () { return addActionStrategy(action, commonContext); });\n    };\n    var addErrorStrategy = function (providedError, commonContext) {\n        if (commonContext === void 0) { commonContext = clonedCommonContext(); }\n        bufferApiCalls.add(function () { return addErrorStrategy(providedError, commonContext); });\n    };\n    function clonedCommonContext() {\n        return deepClone({\n            context: globalContextManager.get(),\n            user: user,\n        });\n    }\n    function initRum(initConfiguration) {\n        if (!checkCookiesAuthorized(buildCookieOptions(initConfiguration)) ||\n            !checkIsNotLocalFile() ||\n            !canInitRum(initConfiguration)) {\n            return;\n        }\n        var _a = commonInit(initConfiguration, buildEnv), configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;\n        if (!configuration.trackViewsManually) {\n            doStartRum(initConfiguration, configuration, internalMonitoring);\n        }\n        else {\n            // drain beforeInitCalls by buffering them until we start RUM\n            // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n            // in order to ensure that calls are processed in order\n            var beforeInitCalls = bufferApiCalls;\n            bufferApiCalls = new BoundedBuffer();\n            startViewStrategy = function (name) {\n                doStartRum(initConfiguration, configuration, internalMonitoring, name);\n            };\n            beforeInitCalls.drain();\n        }\n        getInitConfigurationStrategy = function () { return deepClone(initConfiguration); };\n        isAlreadyInitialized = true;\n    }\n    function doStartRum(initConfiguration, configuration, internalMonitoring, initialViewName) {\n        var startRumResults = startRumImpl(initConfiguration, configuration, internalMonitoring, function () { return ({\n            user: user,\n            context: globalContextManager.get(),\n            hasReplay: recorderApi.isRecording() ? true : undefined,\n        }); }, recorderApi, initialViewName);\n        (startViewStrategy = startRumResults.startView, addActionStrategy = startRumResults.addAction, addErrorStrategy = startRumResults.addError, addTimingStrategy = startRumResults.addTiming, getInternalContextStrategy = startRumResults.getInternalContext);\n        bufferApiCalls.drain();\n        recorderApi.onRumStart(startRumResults.lifeCycle, initConfiguration, configuration, startRumResults.session, startRumResults.parentContexts);\n    }\n    var rumPublicApi = makePublicApi({\n        init: monitor(initRum),\n        addRumGlobalContext: monitor(globalContextManager.add),\n        removeRumGlobalContext: monitor(globalContextManager.remove),\n        getRumGlobalContext: monitor(globalContextManager.get),\n        setRumGlobalContext: monitor(globalContextManager.set),\n        getInternalContext: monitor(function (startTime) { return getInternalContextStrategy(startTime); }),\n        getInitConfiguration: monitor(function () { return getInitConfigurationStrategy(); }),\n        addAction: monitor(function (name, context) {\n            addActionStrategy({\n                name: name,\n                context: deepClone(context),\n                startClocks: clocksNow(),\n                type: ActionType.CUSTOM,\n            });\n        }),\n        addError: function (error, context) {\n            var handlingStack = createHandlingStack();\n            callMonitored(function () {\n                addErrorStrategy({\n                    error: error,\n                    handlingStack: handlingStack,\n                    context: deepClone(context),\n                    startClocks: clocksNow(),\n                });\n            });\n        },\n        addTiming: monitor(function (name, time) {\n            addTimingStrategy(name, time);\n        }),\n        setUser: monitor(function (newUser) {\n            var sanitizedUser = sanitizeUser(newUser);\n            if (sanitizedUser) {\n                user = sanitizedUser;\n            }\n            else {\n                display.error('Unsupported user:', newUser);\n            }\n        }),\n        removeUser: monitor(function () {\n            user = {};\n        }),\n        startView: monitor(function (name) {\n            startViewStrategy(name);\n        }),\n        startSessionReplayRecording: monitor(recorderApi.start),\n        stopSessionReplayRecording: monitor(recorderApi.stop),\n    });\n    return rumPublicApi;\n    function sanitizeUser(newUser) {\n        if (typeof newUser !== 'object' || !newUser) {\n            return;\n        }\n        var result = deepClone(newUser);\n        if ('id' in result) {\n            result.id = String(result.id);\n        }\n        if ('name' in result) {\n            result.name = String(result.name);\n        }\n        if ('email' in result) {\n            result.email = String(result.email);\n        }\n        return result;\n    }\n    function canInitRum(initConfiguration) {\n        if (isAlreadyInitialized) {\n            if (!initConfiguration.silentMultipleInit) {\n                display.error('DD_RUM is already initialized.');\n            }\n            return false;\n        }\n        if (!initConfiguration || !initConfiguration.clientToken) {\n            display.error('Client Token is not configured, we will not send any data.');\n            return false;\n        }\n        if (!initConfiguration.applicationId) {\n            display.error('Application ID is not configured, no RUM data will be collected.');\n            return false;\n        }\n        if (initConfiguration.sampleRate !== undefined && !isPercentage(initConfiguration.sampleRate)) {\n            display.error('Sample Rate should be a number between 0 and 100');\n            return false;\n        }\n        if (initConfiguration.replaySampleRate !== undefined && !isPercentage(initConfiguration.replaySampleRate)) {\n            display.error('Replay Sample Rate should be a number between 0 and 100');\n            return false;\n        }\n        if (Array.isArray(initConfiguration.allowedTracingOrigins) &&\n            initConfiguration.allowedTracingOrigins.length !== 0 &&\n            initConfiguration.service === undefined) {\n            display.error('Service need to be configured when tracing is enabled');\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=rumPublicApi.js.map"]},"metadata":{},"sourceType":"module"}