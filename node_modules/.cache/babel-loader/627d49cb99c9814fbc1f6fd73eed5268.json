{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getCurrentSite } from '../../browser/cookie';\nimport { catchUserErrors } from '../../tools/catchUserErrors';\nimport { objectHasValue, ONE_KILO_BYTE, ONE_SECOND } from '../../tools/utils';\nimport { computeTransportConfiguration } from './transportConfiguration';\nexport var DefaultPrivacyLevel = {\n  ALLOW: 'allow',\n  MASK: 'mask',\n  MASK_USER_INPUT: 'mask-user-input'\n};\nexport var DEFAULT_CONFIGURATION = {\n  allowedTracingOrigins: [],\n  maxErrorsPerMinute: 3000,\n  maxActionsPerMinute: 3000,\n  maxInternalMonitoringMessagesPerPage: 15,\n  sampleRate: 100,\n  replaySampleRate: 100,\n  silentMultipleInit: false,\n  trackInteractions: false,\n  trackViewsManually: false,\n  defaultPrivacyLevel: DefaultPrivacyLevel.MASK_USER_INPUT,\n\n  /**\n   * arbitrary value, byte precision not needed\n   */\n  requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,\n\n  /**\n   * flush automatically, aim to be lower than ALB connection timeout\n   * to maximize connection reuse.\n   */\n  flushTimeout: 30 * ONE_SECOND,\n\n  /**\n   * Logs intake limit\n   */\n  maxBatchSize: 50,\n  maxMessageSize: 256 * ONE_KILO_BYTE,\n\n  /**\n   * beacon payload max queue size implementation is 64kb\n   * ensure that we leave room for logs, rum and potential other users\n   */\n  batchBytesLimit: 16 * ONE_KILO_BYTE\n};\nexport function buildConfiguration(initConfiguration, buildEnv) {\n  var configuration = __assign(__assign({\n    beforeSend: initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'),\n    cookieOptions: buildCookieOptions(initConfiguration),\n    service: initConfiguration.service\n  }, computeTransportConfiguration(initConfiguration, buildEnv)), DEFAULT_CONFIGURATION);\n\n  if ('allowedTracingOrigins' in initConfiguration) {\n    configuration.allowedTracingOrigins = initConfiguration.allowedTracingOrigins;\n  }\n\n  if ('sampleRate' in initConfiguration) {\n    configuration.sampleRate = initConfiguration.sampleRate;\n  }\n\n  if ('replaySampleRate' in initConfiguration) {\n    configuration.replaySampleRate = initConfiguration.replaySampleRate;\n  }\n\n  if ('trackInteractions' in initConfiguration) {\n    configuration.trackInteractions = !!initConfiguration.trackInteractions;\n  }\n\n  if ('trackViewsManually' in initConfiguration) {\n    configuration.trackViewsManually = !!initConfiguration.trackViewsManually;\n  }\n\n  if ('actionNameAttribute' in initConfiguration) {\n    configuration.actionNameAttribute = initConfiguration.actionNameAttribute;\n  }\n\n  if (objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel)) {\n    configuration.defaultPrivacyLevel = initConfiguration.defaultPrivacyLevel;\n  }\n\n  return configuration;\n}\nexport function buildCookieOptions(initConfiguration) {\n  var cookieOptions = {};\n  cookieOptions.secure = mustUseSecureCookie(initConfiguration);\n  cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie;\n\n  if (!!initConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite();\n  }\n\n  return cookieOptions;\n}\n\nfunction mustUseSecureCookie(initConfiguration) {\n  return !!initConfiguration.useSecureSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;\n}","map":{"version":3,"sources":["../../../src/domain/configuration/configuration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { getCurrentSite } from '../../browser/cookie';\nimport { catchUserErrors } from '../../tools/catchUserErrors';\nimport { objectHasValue, ONE_KILO_BYTE, ONE_SECOND } from '../../tools/utils';\nimport { computeTransportConfiguration } from './transportConfiguration';\nexport var DefaultPrivacyLevel = {\n    ALLOW: 'allow',\n    MASK: 'mask',\n    MASK_USER_INPUT: 'mask-user-input',\n};\nexport var DEFAULT_CONFIGURATION = {\n    allowedTracingOrigins: [],\n    maxErrorsPerMinute: 3000,\n    maxActionsPerMinute: 3000,\n    maxInternalMonitoringMessagesPerPage: 15,\n    sampleRate: 100,\n    replaySampleRate: 100,\n    silentMultipleInit: false,\n    trackInteractions: false,\n    trackViewsManually: false,\n    defaultPrivacyLevel: DefaultPrivacyLevel.MASK_USER_INPUT,\n    /**\n     * arbitrary value, byte precision not needed\n     */\n    requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,\n    /**\n     * flush automatically, aim to be lower than ALB connection timeout\n     * to maximize connection reuse.\n     */\n    flushTimeout: 30 * ONE_SECOND,\n    /**\n     * Logs intake limit\n     */\n    maxBatchSize: 50,\n    maxMessageSize: 256 * ONE_KILO_BYTE,\n    /**\n     * beacon payload max queue size implementation is 64kb\n     * ensure that we leave room for logs, rum and potential other users\n     */\n    batchBytesLimit: 16 * ONE_KILO_BYTE,\n};\nexport function buildConfiguration(initConfiguration, buildEnv) {\n    var configuration = __assign(__assign({ beforeSend: initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'), cookieOptions: buildCookieOptions(initConfiguration), service: initConfiguration.service }, computeTransportConfiguration(initConfiguration, buildEnv)), DEFAULT_CONFIGURATION);\n    if ('allowedTracingOrigins' in initConfiguration) {\n        configuration.allowedTracingOrigins = initConfiguration.allowedTracingOrigins;\n    }\n    if ('sampleRate' in initConfiguration) {\n        configuration.sampleRate = initConfiguration.sampleRate;\n    }\n    if ('replaySampleRate' in initConfiguration) {\n        configuration.replaySampleRate = initConfiguration.replaySampleRate;\n    }\n    if ('trackInteractions' in initConfiguration) {\n        configuration.trackInteractions = !!initConfiguration.trackInteractions;\n    }\n    if ('trackViewsManually' in initConfiguration) {\n        configuration.trackViewsManually = !!initConfiguration.trackViewsManually;\n    }\n    if ('actionNameAttribute' in initConfiguration) {\n        configuration.actionNameAttribute = initConfiguration.actionNameAttribute;\n    }\n    if (objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel)) {\n        configuration.defaultPrivacyLevel = initConfiguration.defaultPrivacyLevel;\n    }\n    return configuration;\n}\nexport function buildCookieOptions(initConfiguration) {\n    var cookieOptions = {};\n    cookieOptions.secure = mustUseSecureCookie(initConfiguration);\n    cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie;\n    if (!!initConfiguration.trackSessionAcrossSubdomains) {\n        cookieOptions.domain = getCurrentSite();\n    }\n    return cookieOptions;\n}\nfunction mustUseSecureCookie(initConfiguration) {\n    return !!initConfiguration.useSecureSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;\n}\n//# sourceMappingURL=configuration.js.map"]},"metadata":{},"sourceType":"module"}