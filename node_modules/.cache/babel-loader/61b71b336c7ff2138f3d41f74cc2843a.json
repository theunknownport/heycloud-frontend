{"ast":null,"code":"/**\n * @hidden\n */\nvar DirectionHolder =\n/** @class */\nfunction () {\n  function DirectionHolder() {\n    // The phase changes in the following sequence:\n    // NotInitialized -> Initialized -> NewValueReceived.\n    this.phase = 'Initialized';\n  }\n\n  DirectionHolder.prototype.getIsDirectionRightToLeft = function () {\n    return this.isDirectionRightToLeft;\n  };\n\n  DirectionHolder.prototype.setIsDirectionRightToLeft = function (value) {\n    this.phase = this.phase === 'NotInitialized' ? 'Initialized' : 'NewValueReceived';\n    this.previousIsDirectionRightToLeft = this.isDirectionRightToLeft;\n    this.isDirectionRightToLeft = value;\n  };\n\n  DirectionHolder.prototype.hasDirectionChanged = function () {\n    return this.phase === 'NewValueReceived' ? this.previousIsDirectionRightToLeft !== this.isDirectionRightToLeft : false;\n  };\n\n  return DirectionHolder;\n}();\n\nexport { DirectionHolder };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-layout/dist/es/menu/utils/DirectionHolder.js"],"names":["DirectionHolder","phase","prototype","getIsDirectionRightToLeft","isDirectionRightToLeft","setIsDirectionRightToLeft","value","previousIsDirectionRightToLeft","hasDirectionChanged"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,GAA2B;AACvB;AACA;AACA,SAAKC,KAAL,GAAa,aAAb;AACH;;AACDD,EAAAA,eAAe,CAACE,SAAhB,CAA0BC,yBAA1B,GAAsD,YAAY;AAC9D,WAAO,KAAKC,sBAAZ;AACH,GAFD;;AAGAJ,EAAAA,eAAe,CAACE,SAAhB,CAA0BG,yBAA1B,GAAsD,UAAUC,KAAV,EAAiB;AACnE,SAAKL,KAAL,GAAa,KAAKA,KAAL,KAAe,gBAAf,GAAkC,aAAlC,GAAkD,kBAA/D;AACA,SAAKM,8BAAL,GAAsC,KAAKH,sBAA3C;AACA,SAAKA,sBAAL,GAA8BE,KAA9B;AACH,GAJD;;AAKAN,EAAAA,eAAe,CAACE,SAAhB,CAA0BM,mBAA1B,GAAgD,YAAY;AACxD,WAAO,KAAKP,KAAL,KAAe,kBAAf,GACH,KAAKM,8BAAL,KAAwC,KAAKH,sBAD1C,GACmE,KAD1E;AAEH,GAHD;;AAIA,SAAOJ,eAAP;AACH,CAnBoC,EAArC;;AAoBA,SAASA,eAAT","sourcesContent":["/**\n * @hidden\n */\nvar DirectionHolder = /** @class */ (function () {\n    function DirectionHolder() {\n        // The phase changes in the following sequence:\n        // NotInitialized -> Initialized -> NewValueReceived.\n        this.phase = 'Initialized';\n    }\n    DirectionHolder.prototype.getIsDirectionRightToLeft = function () {\n        return this.isDirectionRightToLeft;\n    };\n    DirectionHolder.prototype.setIsDirectionRightToLeft = function (value) {\n        this.phase = this.phase === 'NotInitialized' ? 'Initialized' : 'NewValueReceived';\n        this.previousIsDirectionRightToLeft = this.isDirectionRightToLeft;\n        this.isDirectionRightToLeft = value;\n    };\n    DirectionHolder.prototype.hasDirectionChanged = function () {\n        return this.phase === 'NewValueReceived' ?\n            this.previousIsDirectionRightToLeft !== this.isDirectionRightToLeft : false;\n    };\n    return DirectionHolder;\n}());\nexport { DirectionHolder };\n"]},"metadata":{},"sourceType":"module"}