{"ast":null,"code":"var _jsxFileName = \"/home/finn/Documents/heycloud-frontend/heycloud-frontend/src/common/AuthVerify.js\";\nimport React from \"react\";\nimport { history } from '../helpers/history';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst parseJwt = token => {\n  try {\n    return JSON.parse(atob(token.split(\".\")[1]));\n  } catch (e) {\n    return null;\n  }\n};\n\nconst AuthVerify = props => {\n  history.listen(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (user) {\n      const decodedJwt = parseJwt(user.access_token);\n\n      if (decodedJwt.exp * 1000 < Date.now()) {\n        props.logOut();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\n_c = AuthVerify;\nexport default AuthVerify;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthVerify\");","map":{"version":3,"sources":["/home/finn/Documents/heycloud-frontend/heycloud-frontend/src/common/AuthVerify.js"],"names":["React","history","parseJwt","token","JSON","parse","atob","split","e","AuthVerify","props","listen","user","localStorage","getItem","decodedJwt","access_token","exp","Date","now","logOut"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAP;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,CAND;;AAQA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5BT,EAAAA,OAAO,CAACU,MAAR,CAAe,MAAM;AACnB,UAAMC,IAAI,GAAGR,IAAI,CAACC,KAAL,CAAWQ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAMG,UAAU,GAAGb,QAAQ,CAACU,IAAI,CAACI,YAAN,CAA3B;;AAEA,UAAID,UAAU,CAACE,GAAX,GAAiB,IAAjB,GAAwBC,IAAI,CAACC,GAAL,EAA5B,EAAwC;AACtCT,QAAAA,KAAK,CAACU,MAAN;AACD;AACF;AACF,GAVD;AAYA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAdD;;KAAMX,U;AAgBN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport { history } from '../helpers/history';\n\nconst parseJwt = (token) => {\n  try {\n    return JSON.parse(atob(token.split(\".\")[1]));\n  } catch (e) {\n    return null;\n  }\n};\n\nconst AuthVerify = (props) => {\n  history.listen(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (user) {\n      const decodedJwt = parseJwt(user.access_token);\n\n      if (decodedJwt.exp * 1000 < Date.now()) {\n        props.logOut();\n      }\n    }\n  });\n\n  return <div></div>;\n};\n\nexport default AuthVerify;"]},"metadata":{},"sourceType":"module"}