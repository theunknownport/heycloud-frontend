{"ast":null,"code":"import { monitor, Observable } from '@datadog/browser-core';\nexport function createDOMMutationObservable() {\n  var MutationObserver = getMutationObserverConstructor();\n  var observable = new Observable(function () {\n    if (!MutationObserver) {\n      return;\n    }\n\n    var observer = new MutationObserver(monitor(function () {\n      return observable.notify();\n    }));\n    observer.observe(document, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n    return function () {\n      return observer.disconnect();\n    };\n  });\n  return observable;\n}\nexport function getMutationObserverConstructor() {\n  var constructor;\n  var browserWindow = window; // Angular uses Zone.js to provide a context persisting across async tasks.  Zone.js replaces the\n  // global MutationObserver constructor with a patched version to support the context propagation.\n  // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n  // component: on some occasions, the callback is being called in an infinite loop, causing the\n  // page to freeze (even if the callback is completely empty).\n  //\n  // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n  // MutationObserver constructor.\n  //\n  // [1] https://github.com/angular/angular/issues/26948\n  // [2] https://github.com/angular/angular/issues/31712\n\n  if (browserWindow.Zone) {\n    var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n\n    constructor = browserWindow[symbol];\n  }\n\n  if (!constructor) {\n    constructor = browserWindow.MutationObserver;\n  }\n\n  return constructor;\n}","map":{"version":3,"sources":["../../src/browser/domMutationObservable.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,UAAlB,QAAoC,uBAApC;AAEA,OAAM,SAAU,2BAAV,GAAqC;AACzC,MAAM,gBAAgB,GAAG,8BAA8B,EAAvD;AAEA,MAAM,UAAU,GAAqB,IAAI,UAAJ,CAAqB,YAAA;AACxD,QAAI,CAAC,gBAAL,EAAuB;AACrB;AACD;;AACD,QAAM,QAAQ,GAAG,IAAI,gBAAJ,CAAqB,OAAO,CAAC,YAAA;AAAM,aAAA,UAAU,CAAV,MAAA,EAAA;AAAmB,KAA1B,CAA5B,CAAjB;AACA,IAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB,EAA2B;AACzB,MAAA,UAAU,EAAE,IADa;AAEzB,MAAA,aAAa,EAAE,IAFU;AAGzB,MAAA,SAAS,EAAE,IAHc;AAIzB,MAAA,OAAO,EAAE;AAJgB,KAA3B;AAMA,WAAO,YAAA;AAAM,aAAA,QAAQ,CAAR,UAAA,EAAA;AAAqB,KAAlC;AACD,GAZoC,CAArC;AAcA,SAAO,UAAP;AACD;AAUD,OAAM,SAAU,8BAAV,GAAwC;AAC5C,MAAI,WAAJ;AACA,MAAM,aAAa,GAAkB,MAArC,CAF4C,CAI5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,aAAa,CAAC,IAAlB,EAAwB;AACtB,QAAM,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,UAAnB,CAA8B,kBAA9B,CAAf;;AACA,IAAA,WAAW,GAAG,aAAa,CAAC,MAAD,CAA3B;AACD;;AAED,MAAI,CAAC,WAAL,EAAkB;AAChB,IAAA,WAAW,GAAG,aAAa,CAAC,gBAA5B;AACD;;AAED,SAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["import { monitor, Observable } from '@datadog/browser-core';\nexport function createDOMMutationObservable() {\n    var MutationObserver = getMutationObserverConstructor();\n    var observable = new Observable(function () {\n        if (!MutationObserver) {\n            return;\n        }\n        var observer = new MutationObserver(monitor(function () { return observable.notify(); }));\n        observer.observe(document, {\n            attributes: true,\n            characterData: true,\n            childList: true,\n            subtree: true,\n        });\n        return function () { return observer.disconnect(); };\n    });\n    return observable;\n}\nexport function getMutationObserverConstructor() {\n    var constructor;\n    var browserWindow = window;\n    // Angular uses Zone.js to provide a context persisting across async tasks.  Zone.js replaces the\n    // global MutationObserver constructor with a patched version to support the context propagation.\n    // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n    // component: on some occasions, the callback is being called in an infinite loop, causing the\n    // page to freeze (even if the callback is completely empty).\n    //\n    // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n    // MutationObserver constructor.\n    //\n    // [1] https://github.com/angular/angular/issues/26948\n    // [2] https://github.com/angular/angular/issues/31712\n    if (browserWindow.Zone) {\n        var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n        constructor = browserWindow[symbol];\n    }\n    if (!constructor) {\n        constructor = browserWindow.MutationObserver;\n    }\n    return constructor;\n}\n//# sourceMappingURL=domMutationObservable.js.map"]},"metadata":{},"sourceType":"module"}