{"ast":null,"code":"/**\n * @hidden\n */\nexport var ResultType;\n\n(function (ResultType) {\n  ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n  ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n  ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\n\n\nvar Result =\n/** @class */\nfunction () {\n  function Result(value, rest, type) {\n    if (type === void 0) {\n      type = ResultType.Undefined;\n    }\n\n    this.value = value;\n    this.rest = rest;\n    this.type = type;\n  } // map :: Functor f => f a ~> (a -> b) -> f b\n\n\n  Result.prototype.map = function (fn) {\n    return new Result(fn(this.value), this.rest);\n  }; // chain :: Chain m => m a ~> (a -> m b) -> m b\n\n\n  Result.prototype.chain = function (fn) {\n    return fn(this.value, this.rest);\n  };\n\n  Result.prototype.fold = function (s, _\n  /* we don't need it*/\n  ) {\n    return s(this.value, this.rest);\n  };\n\n  Result.prototype.concat = function (r) {\n    return this.map(function (vs, _) {\n      return r.chain(function (v, __) {\n        return vs.concat([v]);\n      });\n    });\n  };\n\n  Result.prototype.toString = function () {\n    return \"Result({ value: '\".concat(this.value, \"', rest: \").concat(this.rest, \" })\");\n  };\n\n  return Result;\n}();\n\nexport { Result };","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-react-inputs/dist/es/maskedtextbox/parsing/result.js"],"names":["ResultType","Result","value","rest","type","Undefined","prototype","map","fn","chain","fold","s","_","concat","r","vs","v","__","toString"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,IAAIA,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnBA,EAAAA,UAAU,CAACA,UAAU,CAAC,SAAD,CAAV,GAAwB,CAAzB,CAAV,GAAwC,SAAxC;AACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,MAAD,CAAV,GAAqB,CAAtB,CAAV,GAAqC,MAArC;AACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,WAAD,CAAV,GAA0B,CAA3B,CAAV,GAA0C,WAA1C;AACH,CAJD,EAIGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAJb;AAKA;AACA;AACA;;;AACA,IAAIC,MAAM;AAAG;AAAe,YAAY;AACpC,WAASA,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AAC/B,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAGJ,UAAU,CAACK,SAAlB;AAA8B;;AACrD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH,GANmC,CAOpC;;;AACAH,EAAAA,MAAM,CAACK,SAAP,CAAiBC,GAAjB,GAAuB,UAAUC,EAAV,EAAc;AACjC,WAAO,IAAIP,MAAJ,CAAWO,EAAE,CAAC,KAAKN,KAAN,CAAb,EAA2B,KAAKC,IAAhC,CAAP;AACH,GAFD,CARoC,CAWpC;;;AACAF,EAAAA,MAAM,CAACK,SAAP,CAAiBG,KAAjB,GAAyB,UAAUD,EAAV,EAAc;AACnC,WAAOA,EAAE,CAAC,KAAKN,KAAN,EAAa,KAAKC,IAAlB,CAAT;AACH,GAFD;;AAGAF,EAAAA,MAAM,CAACK,SAAP,CAAiBI,IAAjB,GAAwB,UAAUC,CAAV,EAAaC;AAAE;AAAf,IAAsC;AAC1D,WAAOD,CAAC,CAAC,KAAKT,KAAN,EAAa,KAAKC,IAAlB,CAAR;AACH,GAFD;;AAGAF,EAAAA,MAAM,CAACK,SAAP,CAAiBO,MAAjB,GAA0B,UAAUC,CAAV,EAAa;AACnC,WAAO,KAAKP,GAAL,CAAS,UAAUQ,EAAV,EAAcH,CAAd,EAAiB;AAAE,aAAOE,CAAC,CAACL,KAAF,CAAQ,UAAUO,CAAV,EAAaC,EAAb,EAAiB;AAAE,eAAOF,EAAE,CAACF,MAAH,CAAU,CAACG,CAAD,CAAV,CAAP;AAAwB,OAAnD,CAAP;AAA8D,KAA1F,CAAP;AACH,GAFD;;AAGAf,EAAAA,MAAM,CAACK,SAAP,CAAiBY,QAAjB,GAA4B,YAAY;AACpC,WAAO,oBAAoBL,MAApB,CAA2B,KAAKX,KAAhC,EAAuC,WAAvC,EAAoDW,MAApD,CAA2D,KAAKV,IAAhE,EAAsE,KAAtE,CAAP;AACH,GAFD;;AAGA,SAAOF,MAAP;AACH,CAzB2B,EAA5B;;AA0BA,SAASA,MAAT","sourcesContent":["/**\n * @hidden\n */\nexport var ResultType;\n(function (ResultType) {\n    ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n    ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n    ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\nvar Result = /** @class */ (function () {\n    function Result(value, rest, type) {\n        if (type === void 0) { type = ResultType.Undefined; }\n        this.value = value;\n        this.rest = rest;\n        this.type = type;\n    }\n    // map :: Functor f => f a ~> (a -> b) -> f b\n    Result.prototype.map = function (fn) {\n        return new Result(fn(this.value), this.rest);\n    };\n    // chain :: Chain m => m a ~> (a -> m b) -> m b\n    Result.prototype.chain = function (fn) {\n        return fn(this.value, this.rest);\n    };\n    Result.prototype.fold = function (s, _ /* we don't need it*/) {\n        return s(this.value, this.rest);\n    };\n    Result.prototype.concat = function (r) {\n        return this.map(function (vs, _) { return r.chain(function (v, __) { return vs.concat([v]); }); });\n    };\n    Result.prototype.toString = function () {\n        return \"Result({ value: '\".concat(this.value, \"', rest: \").concat(this.rest, \" })\");\n    };\n    return Result;\n}());\nexport { Result };\n"]},"metadata":{},"sourceType":"module"}