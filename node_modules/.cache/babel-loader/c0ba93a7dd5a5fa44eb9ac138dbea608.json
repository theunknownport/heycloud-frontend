{"ast":null,"code":"import { Batch, combine, HttpRequest } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '../domain/lifeCycle';\nimport { RumEventType } from '../rawRumEvent.types';\nexport function startRumBatch(configuration, lifeCycle) {\n  var batch = makeRumBatch(configuration, lifeCycle);\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, function (serverRumEvent) {\n    if (serverRumEvent.type === RumEventType.VIEW) {\n      batch.upsert(serverRumEvent, serverRumEvent.view.id);\n    } else {\n      batch.add(serverRumEvent);\n    }\n  });\n  return {\n    stop: function () {\n      batch.stop();\n    }\n  };\n}\n\nfunction makeRumBatch(configuration, lifeCycle) {\n  var primaryBatch = createRumBatch(configuration.rumEndpointBuilder, function () {\n    return lifeCycle.notify(LifeCycleEventType.BEFORE_UNLOAD);\n  });\n  var replicaBatch;\n  var replica = configuration.replica;\n\n  if (replica !== undefined) {\n    replicaBatch = createRumBatch(replica.rumEndpointBuilder);\n  }\n\n  function createRumBatch(endpointBuilder, unloadCallback) {\n    return new Batch(new HttpRequest(endpointBuilder, configuration.batchBytesLimit), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, unloadCallback);\n  }\n\n  function withReplicaApplicationId(message) {\n    return combine(message, {\n      application: {\n        id: replica.applicationId\n      }\n    });\n  }\n\n  var stopped = false;\n  return {\n    add: function (message) {\n      if (stopped) {\n        return;\n      }\n\n      primaryBatch.add(message);\n\n      if (replicaBatch) {\n        replicaBatch.add(withReplicaApplicationId(message));\n      }\n    },\n    stop: function () {\n      stopped = true;\n    },\n    upsert: function (message, key) {\n      if (stopped) {\n        return;\n      }\n\n      primaryBatch.upsert(message, key);\n\n      if (replicaBatch) {\n        replicaBatch.upsert(withReplicaApplicationId(message), key);\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../src/transport/batch.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,EAAgB,OAAhB,EAAiD,WAAjD,QAAqF,uBAArF;AACA,SAAoB,kBAApB,QAA8C,qBAA9C;AACA,SAAS,YAAT,QAA6B,sBAA7B;AAGA,OAAM,SAAU,aAAV,CAAwB,aAAxB,EAAsD,SAAtD,EAA0E;AAC9E,MAAM,KAAK,GAAG,YAAY,CAAC,aAAD,EAAgB,SAAhB,CAA1B;AAEA,EAAA,SAAS,CAAC,SAAV,CAAoB,kBAAkB,CAAC,mBAAvC,EAA4D,UAAC,cAAD,EAAmC;AAC7F,QAAI,cAAc,CAAC,IAAf,KAAwB,YAAY,CAAC,IAAzC,EAA+C;AAC7C,MAAA,KAAK,CAAC,MAAN,CAAa,cAAb,EAA6B,cAAc,CAAC,IAAf,CAAoB,EAAjD;AACD,KAFD,MAEO;AACL,MAAA,KAAK,CAAC,GAAN,CAAU,cAAV;AACD;AACF,GAND;AAQA,SAAO;AACL,IAAA,IAAI,EAAA,YAAA;AACF,MAAA,KAAK,CAAC,IAAN;AACD;AAHI,GAAP;AAKD;;AAQD,SAAS,YAAT,CAAsB,aAAtB,EAAoD,SAApD,EAAwE;AACtE,MAAM,YAAY,GAAG,cAAc,CAAC,aAAa,CAAC,kBAAf,EAAmC,YAAA;AACpE,WAAA,SAAS,CAAC,MAAV,CAAiB,kBAAkB,CAAC,aAApC,CAAA;AAAkD,GADjB,CAAnC;AAIA,MAAI,YAAJ;AACA,MAAM,OAAO,GAAG,aAAa,CAAC,OAA9B;;AACA,MAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,IAAA,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC,kBAAT,CAA7B;AACD;;AAED,WAAS,cAAT,CAAwB,eAAxB,EAA0D,cAA1D,EAAqF;AACnF,WAAO,IAAI,KAAJ,CACL,IAAI,WAAJ,CAAgB,eAAhB,EAAiC,aAAa,CAAC,eAA/C,CADK,EAEL,aAAa,CAAC,YAFT,EAGL,aAAa,CAAC,eAHT,EAIL,aAAa,CAAC,cAJT,EAKL,aAAa,CAAC,YALT,EAML,cANK,CAAP;AAQD;;AAED,WAAS,wBAAT,CAAkC,OAAlC,EAAkD;AAChD,WAAO,OAAO,CAAC,OAAD,EAAU;AAAE,MAAA,WAAW,EAAE;AAAE,QAAA,EAAE,EAAE,OAAQ,CAAC;AAAf;AAAf,KAAV,CAAd;AACD;;AAED,MAAI,OAAO,GAAG,KAAd;AACA,SAAO;AACL,IAAA,GAAG,EAAE,UAAC,OAAD,EAAiB;AACpB,UAAI,OAAJ,EAAa;AACX;AACD;;AACD,MAAA,YAAY,CAAC,GAAb,CAAiB,OAAjB;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,YAAY,CAAC,GAAb,CAAiB,wBAAwB,CAAC,OAAD,CAAzC;AACD;AACF,KATI;AAUL,IAAA,IAAI,EAAE,YAAA;AACJ,MAAA,OAAO,GAAG,IAAV;AACD,KAZI;AAaL,IAAA,MAAM,EAAE,UAAC,OAAD,EAAmB,GAAnB,EAA8B;AACpC,UAAI,OAAJ,EAAa;AACX;AACD;;AACD,MAAA,YAAY,CAAC,MAAb,CAAoB,OAApB,EAA6B,GAA7B;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,YAAY,CAAC,MAAb,CAAoB,wBAAwB,CAAC,OAAD,CAA5C,EAAuD,GAAvD;AACD;AACF;AArBI,GAAP;AAuBD","sourceRoot":"","sourcesContent":["import { Batch, combine, HttpRequest } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '../domain/lifeCycle';\nimport { RumEventType } from '../rawRumEvent.types';\nexport function startRumBatch(configuration, lifeCycle) {\n    var batch = makeRumBatch(configuration, lifeCycle);\n    lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, function (serverRumEvent) {\n        if (serverRumEvent.type === RumEventType.VIEW) {\n            batch.upsert(serverRumEvent, serverRumEvent.view.id);\n        }\n        else {\n            batch.add(serverRumEvent);\n        }\n    });\n    return {\n        stop: function () {\n            batch.stop();\n        },\n    };\n}\nfunction makeRumBatch(configuration, lifeCycle) {\n    var primaryBatch = createRumBatch(configuration.rumEndpointBuilder, function () {\n        return lifeCycle.notify(LifeCycleEventType.BEFORE_UNLOAD);\n    });\n    var replicaBatch;\n    var replica = configuration.replica;\n    if (replica !== undefined) {\n        replicaBatch = createRumBatch(replica.rumEndpointBuilder);\n    }\n    function createRumBatch(endpointBuilder, unloadCallback) {\n        return new Batch(new HttpRequest(endpointBuilder, configuration.batchBytesLimit), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, unloadCallback);\n    }\n    function withReplicaApplicationId(message) {\n        return combine(message, { application: { id: replica.applicationId } });\n    }\n    var stopped = false;\n    return {\n        add: function (message) {\n            if (stopped) {\n                return;\n            }\n            primaryBatch.add(message);\n            if (replicaBatch) {\n                replicaBatch.add(withReplicaApplicationId(message));\n            }\n        },\n        stop: function () {\n            stopped = true;\n        },\n        upsert: function (message, key) {\n            if (stopped) {\n                return;\n            }\n            primaryBatch.upsert(message, key);\n            if (replicaBatch) {\n                replicaBatch.upsert(withReplicaApplicationId(message), key);\n            }\n        },\n    };\n}\n//# sourceMappingURL=batch.js.map"]},"metadata":{},"sourceType":"module"}