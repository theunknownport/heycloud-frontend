{"ast":null,"code":"import { localeInfo, localeCurrency, currencyDisplays } from '../cldr';\nimport { PERCENT, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, DEFAULT_LOCALE, EMPTY, POINT } from '../common/constants';\nimport { setStyleOptions, setFormatLiterals } from './utils';\nimport isNumber from '../common/is-number';\nimport isCurrencyStyle from './is-currency-style';\nimport formatOptions from './format-options';\nimport isString from '../common/is-string';\nvar exponentRegExp = /[eE][-+]?[0-9]+/;\nvar nonBreakingSpaceRegExp = /\\u00A0/g;\n\nfunction cleanNegativePattern(number, patterns) {\n  if (patterns.length > 1) {\n    var parts = (patterns[1] || EMPTY).replace(CURRENCY_PLACEHOLDER, EMPTY).split(NUMBER_PLACEHOLDER);\n\n    if (number.indexOf(parts[0]) > -1 && number.indexOf(parts[1]) > -1) {\n      return number.replace(parts[0], EMPTY).replace(parts[1], EMPTY);\n    }\n  }\n}\n\nfunction cleanCurrencyNumber(value, info, format) {\n  var options = formatOptions(format) || {};\n  var isCurrency = isCurrencyStyle(options.style);\n  var number = value;\n  var negative;\n  var currency = options.currency || localeCurrency(info, isCurrency);\n\n  if (currency) {\n    var displays = currencyDisplays(info, currency, isCurrency);\n\n    if (displays) {\n      for (var idx = 0; idx < displays.length; idx++) {\n        var display = displays[idx];\n\n        if (number.includes(display)) {\n          number = number.replace(display, EMPTY);\n          isCurrency = true;\n          break;\n        }\n      }\n    }\n\n    if (isCurrency) {\n      var cleanNumber = cleanNegativePattern(number, info.numbers.currency.patterns) || cleanNegativePattern(number, info.numbers.accounting.patterns);\n\n      if (cleanNumber) {\n        negative = true;\n        number = cleanNumber;\n      }\n    }\n  }\n\n  return {\n    number: number,\n    negative: negative\n  };\n}\n\nfunction cleanLiterals(number, formatOptions) {\n  var literals = formatOptions.literals;\n  var result = number;\n\n  if (literals) {\n    for (var idx = 0; idx < literals.length; idx++) {\n      result = result.replace(literals[idx], EMPTY);\n    }\n  }\n\n  return result;\n}\n\nfunction divideBy100(number) {\n  var strNumber = String(number);\n  var pointIndex = strNumber.indexOf(POINT);\n  var zeroesCount = 2;\n  var result = number / Math.pow(10, zeroesCount);\n\n  if (pointIndex === -1 || String(result).length <= strNumber.length + zeroesCount) {\n    return result;\n  }\n\n  var fractionDigits = strNumber.length - pointIndex + 1 + zeroesCount;\n  return parseFloat(result.toFixed(fractionDigits));\n}\n\nexport default function parseNumber(value, locale, format) {\n  if (locale === void 0) locale = DEFAULT_LOCALE;\n  if (format === void 0) format = {};\n\n  if (!value && value !== 0) {\n    return null;\n  }\n\n  if (isNumber(value)) {\n    return value;\n  }\n\n  var info = localeInfo(locale);\n  var symbols = info.numbers.symbols;\n  var number = value.toString();\n  var formatOptions = format || {};\n  var isPercent;\n\n  if (isString(format)) {\n    formatOptions = {\n      format: format\n    };\n    setFormatLiterals(formatOptions);\n    number = cleanLiterals(number, formatOptions);\n    setStyleOptions(formatOptions, info);\n  }\n\n  if (formatOptions.style === PERCENT || number.indexOf(symbols.percentSign) > -1) {\n    number = number.replace(symbols.percentSign, EMPTY);\n    isPercent = true;\n  }\n\n  if (exponentRegExp.test(number)) {\n    number = parseFloat(number.replace(symbols.decimal, POINT));\n    return isNaN(number) ? null : number;\n  }\n\n  var ref = cleanCurrencyNumber(number, info, formatOptions);\n  var negativeCurrency = ref.negative;\n  var currencyNumber = ref.number;\n  number = String(currencyNumber).trim();\n  var negativeSignIndex = number.indexOf(\"-\");\n\n  if (negativeSignIndex > 0) {\n    return null;\n  }\n\n  var isNegative = negativeSignIndex > -1;\n  isNegative = negativeCurrency !== undefined ? negativeCurrency : isNegative;\n  number = number.replace(\"-\", EMPTY).replace(nonBreakingSpaceRegExp, \" \").split(symbols.group.replace(nonBreakingSpaceRegExp, \" \")).join(EMPTY).replace(symbols.decimal, POINT);\n  number = parseFloat(number);\n\n  if (isNaN(number)) {\n    number = null;\n  } else if (isNegative) {\n    number *= -1;\n  }\n\n  if (number && isPercent) {\n    number = divideBy100(number);\n  }\n\n  return number;\n}","map":{"version":3,"sources":["C:/Projects/React/heycloud-frontent-2/node_modules/@progress/kendo-intl/dist/es/numbers/parse-number.js"],"names":["localeInfo","localeCurrency","currencyDisplays","PERCENT","NUMBER_PLACEHOLDER","CURRENCY_PLACEHOLDER","DEFAULT_LOCALE","EMPTY","POINT","setStyleOptions","setFormatLiterals","isNumber","isCurrencyStyle","formatOptions","isString","exponentRegExp","nonBreakingSpaceRegExp","cleanNegativePattern","number","patterns","length","parts","replace","split","indexOf","cleanCurrencyNumber","value","info","format","options","isCurrency","style","negative","currency","displays","idx","display","includes","cleanNumber","numbers","accounting","cleanLiterals","literals","result","divideBy100","strNumber","String","pointIndex","zeroesCount","Math","pow","fractionDigits","parseFloat","toFixed","parseNumber","locale","symbols","toString","isPercent","percentSign","test","decimal","isNaN","ref","negativeCurrency","currencyNumber","trim","negativeSignIndex","isNegative","undefined","group","join"],"mappings":"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","sourcesContent":["import { localeInfo, localeCurrency, currencyDisplays } from '../cldr';\nimport { PERCENT, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, DEFAULT_LOCALE, EMPTY, POINT } from '../common/constants';\nimport { setStyleOptions, setFormatLiterals } from './utils';\nimport isNumber from '../common/is-number';\nimport isCurrencyStyle from './is-currency-style';\nimport formatOptions from './format-options';\nimport isString from '../common/is-string';\n\nvar exponentRegExp = /[eE][-+]?[0-9]+/;\nvar nonBreakingSpaceRegExp = /\\u00A0/g;\n\nfunction cleanNegativePattern(number, patterns) {\n    if (patterns.length > 1) {\n        var parts = (patterns[1] || EMPTY).replace(CURRENCY_PLACEHOLDER, EMPTY).split(NUMBER_PLACEHOLDER);\n        if (number.indexOf(parts[0]) > -1 && number.indexOf(parts[1]) > -1) {\n            return number.replace(parts[0], EMPTY).replace(parts[1], EMPTY);\n        }\n    }\n}\n\nfunction cleanCurrencyNumber(value, info, format) {\n    var options = formatOptions(format) || {};\n    var isCurrency = isCurrencyStyle(options.style);\n    var number = value;\n    var negative;\n\n    var currency = options.currency || localeCurrency(info, isCurrency);\n\n    if (currency) {\n        var displays = currencyDisplays(info, currency, isCurrency);\n        if (displays) {\n            for (var idx = 0; idx < displays.length; idx++) {\n                var display = displays[idx];\n                if (number.includes(display)) {\n                    number = number.replace(display, EMPTY);\n                    isCurrency = true;\n                    break;\n                }\n            }\n        }\n\n        if (isCurrency) {\n            var cleanNumber = cleanNegativePattern(number, info.numbers.currency.patterns) ||\n                cleanNegativePattern(number, info.numbers.accounting.patterns);\n\n            if (cleanNumber) {\n                negative = true;\n                number = cleanNumber;\n            }\n\n        }\n    }\n\n    return {\n        number: number,\n        negative: negative\n    };\n}\n\nfunction cleanLiterals(number, formatOptions) {\n    var literals = formatOptions.literals;\n    var result = number;\n\n    if (literals) {\n        for (var idx = 0; idx < literals.length; idx++) {\n            result = result.replace(literals[idx], EMPTY);\n        }\n    }\n\n    return result;\n}\n\nfunction divideBy100(number) {\n    var strNumber = String(number);\n    var pointIndex = strNumber.indexOf(POINT);\n    var zeroesCount = 2;\n    var result = number / Math.pow(10, zeroesCount);\n\n    if (pointIndex === -1 || String(result).length <= strNumber.length + zeroesCount) {\n        return result;\n    }\n\n    var fractionDigits = strNumber.length - pointIndex + 1 + zeroesCount;\n    return parseFloat(result.toFixed(fractionDigits));\n}\n\nexport default function parseNumber(value, locale, format) {\n    if ( locale === void 0 ) locale = DEFAULT_LOCALE;\n    if ( format === void 0 ) format = {};\n\n    if (!value && value !== 0) {\n        return null;\n    }\n\n    if (isNumber(value)) {\n        return value;\n    }\n\n    var info = localeInfo(locale);\n    var symbols = info.numbers.symbols;\n\n    var number = value.toString();\n    var formatOptions = format || {};\n    var isPercent;\n\n    if (isString(format)) {\n        formatOptions = { format: format };\n        setFormatLiterals(formatOptions);\n        number = cleanLiterals(number, formatOptions);\n\n        setStyleOptions(formatOptions, info);\n    }\n\n    if (formatOptions.style === PERCENT || number.indexOf(symbols.percentSign) > -1) {\n        number = number.replace(symbols.percentSign, EMPTY);\n        isPercent = true;\n    }\n\n    if (exponentRegExp.test(number)) {\n        number = parseFloat(number.replace(symbols.decimal, POINT));\n        return isNaN(number) ? null : number;\n    }\n\n    var ref = cleanCurrencyNumber(number, info, formatOptions);\n    var negativeCurrency = ref.negative;\n    var currencyNumber = ref.number;\n    number = String(currencyNumber).trim();\n\n    var negativeSignIndex = number.indexOf(\"-\");\n    if (negativeSignIndex > 0) {\n        return null;\n    }\n\n    var isNegative = negativeSignIndex > -1;\n\n    isNegative = negativeCurrency !== undefined ? negativeCurrency : isNegative;\n\n    number = number.replace(\"-\", EMPTY)\n          .replace(nonBreakingSpaceRegExp, \" \")\n          .split(symbols.group.replace(nonBreakingSpaceRegExp, \" \")).join(EMPTY)\n          .replace(symbols.decimal, POINT);\n\n    number = parseFloat(number);\n\n    if (isNaN(number)) {\n        number = null;\n    } else if (isNegative) {\n        number *= -1;\n    }\n\n    if (number && isPercent) {\n        number = divideBy100(number);\n    }\n\n    return number;\n}\n"]},"metadata":{},"sourceType":"module"}