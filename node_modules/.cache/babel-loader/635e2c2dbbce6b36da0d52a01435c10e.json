{"ast":null,"code":"import { addEventListener, generateUUID, clocksNow, ONE_SECOND } from '@datadog/browser-core';\nimport { ActionType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackEventCounts } from '../../trackEventCounts';\nimport { waitIdlePage } from '../../waitIdlePage';\nimport { getActionNameFromElement } from './getActionNameFromElement'; // Maximum duration for automatic actions\n\nexport var AUTO_ACTION_MAX_DURATION = 10 * ONE_SECOND;\nexport function trackActions(lifeCycle, domMutationObservable, _a) {\n  var actionNameAttribute = _a.actionNameAttribute;\n  var action = startActionManagement(lifeCycle, domMutationObservable); // New views trigger the discard of the current pending Action\n\n  lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, function () {\n    action.discardCurrent();\n  });\n  var stopListener = addEventListener(window, \"click\"\n  /* CLICK */\n  , function (event) {\n    if (!(event.target instanceof Element)) {\n      return;\n    }\n\n    var name = getActionNameFromElement(event.target, actionNameAttribute);\n\n    if (!name) {\n      return;\n    }\n\n    action.create(ActionType.CLICK, name, event);\n  }, {\n    capture: true\n  }).stop;\n  return {\n    stop: function () {\n      action.discardCurrent();\n      stopListener();\n    }\n  };\n}\n\nfunction startActionManagement(lifeCycle, domMutationObservable) {\n  var currentAction;\n  var stopWaitingIdlePage;\n  return {\n    create: function (type, name, event) {\n      if (currentAction) {\n        // Ignore any new action if another one is already occurring.\n        return;\n      }\n\n      var pendingAutoAction = new PendingAutoAction(lifeCycle, type, name, event);\n      currentAction = pendingAutoAction;\n      stopWaitingIdlePage = waitIdlePage(lifeCycle, domMutationObservable, function (event) {\n        if (event.hadActivity && event.duration >= 0) {\n          pendingAutoAction.complete(event.duration);\n        } else {\n          pendingAutoAction.discard();\n        }\n\n        currentAction = undefined;\n      }, AUTO_ACTION_MAX_DURATION).stop;\n    },\n    discardCurrent: function () {\n      if (currentAction) {\n        stopWaitingIdlePage();\n        currentAction.discard();\n        currentAction = undefined;\n      }\n    }\n  };\n}\n\nvar PendingAutoAction =\n/** @class */\nfunction () {\n  function PendingAutoAction(lifeCycle, type, name, event) {\n    this.lifeCycle = lifeCycle;\n    this.type = type;\n    this.name = name;\n    this.event = event;\n    this.id = generateUUID();\n    this.startClocks = clocksNow();\n    this.eventCountsSubscription = trackEventCounts(lifeCycle);\n    this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_CREATED, {\n      id: this.id,\n      startClocks: this.startClocks\n    });\n  }\n\n  PendingAutoAction.prototype.complete = function (duration) {\n    var eventCounts = this.eventCountsSubscription.eventCounts;\n    this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_COMPLETED, {\n      counts: {\n        errorCount: eventCounts.errorCount,\n        longTaskCount: eventCounts.longTaskCount,\n        resourceCount: eventCounts.resourceCount\n      },\n      duration: duration,\n      id: this.id,\n      name: this.name,\n      startClocks: this.startClocks,\n      type: this.type,\n      event: this.event\n    });\n    this.eventCountsSubscription.stop();\n  };\n\n  PendingAutoAction.prototype.discard = function () {\n    this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_DISCARDED);\n    this.eventCountsSubscription.stop();\n  };\n\n  return PendingAutoAction;\n}();","map":{"version":3,"sources":["../../../../src/domain/rumEventsCollection/action/trackActions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { addEventListener, generateUUID, clocksNow, ONE_SECOND, } from '@datadog/browser-core';\nimport { ActionType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackEventCounts } from '../../trackEventCounts';\nimport { waitIdlePage } from '../../waitIdlePage';\nimport { getActionNameFromElement } from './getActionNameFromElement';\n// Maximum duration for automatic actions\nexport var AUTO_ACTION_MAX_DURATION = 10 * ONE_SECOND;\nexport function trackActions(lifeCycle, domMutationObservable, _a) {\n    var actionNameAttribute = _a.actionNameAttribute;\n    var action = startActionManagement(lifeCycle, domMutationObservable);\n    // New views trigger the discard of the current pending Action\n    lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, function () {\n        action.discardCurrent();\n    });\n    var stopListener = addEventListener(window, \"click\" /* CLICK */, function (event) {\n        if (!(event.target instanceof Element)) {\n            return;\n        }\n        var name = getActionNameFromElement(event.target, actionNameAttribute);\n        if (!name) {\n            return;\n        }\n        action.create(ActionType.CLICK, name, event);\n    }, { capture: true }).stop;\n    return {\n        stop: function () {\n            action.discardCurrent();\n            stopListener();\n        },\n    };\n}\nfunction startActionManagement(lifeCycle, domMutationObservable) {\n    var currentAction;\n    var stopWaitingIdlePage;\n    return {\n        create: function (type, name, event) {\n            if (currentAction) {\n                // Ignore any new action if another one is already occurring.\n                return;\n            }\n            var pendingAutoAction = new PendingAutoAction(lifeCycle, type, name, event);\n            currentAction = pendingAutoAction;\n            (stopWaitingIdlePage = waitIdlePage(lifeCycle, domMutationObservable, function (event) {\n                if (event.hadActivity && event.duration >= 0) {\n                    pendingAutoAction.complete(event.duration);\n                }\n                else {\n                    pendingAutoAction.discard();\n                }\n                currentAction = undefined;\n            }, AUTO_ACTION_MAX_DURATION).stop);\n        },\n        discardCurrent: function () {\n            if (currentAction) {\n                stopWaitingIdlePage();\n                currentAction.discard();\n                currentAction = undefined;\n            }\n        },\n    };\n}\nvar PendingAutoAction = /** @class */ (function () {\n    function PendingAutoAction(lifeCycle, type, name, event) {\n        this.lifeCycle = lifeCycle;\n        this.type = type;\n        this.name = name;\n        this.event = event;\n        this.id = generateUUID();\n        this.startClocks = clocksNow();\n        this.eventCountsSubscription = trackEventCounts(lifeCycle);\n        this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_CREATED, { id: this.id, startClocks: this.startClocks });\n    }\n    PendingAutoAction.prototype.complete = function (duration) {\n        var eventCounts = this.eventCountsSubscription.eventCounts;\n        this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_COMPLETED, {\n            counts: {\n                errorCount: eventCounts.errorCount,\n                longTaskCount: eventCounts.longTaskCount,\n                resourceCount: eventCounts.resourceCount,\n            },\n            duration: duration,\n            id: this.id,\n            name: this.name,\n            startClocks: this.startClocks,\n            type: this.type,\n            event: this.event,\n        });\n        this.eventCountsSubscription.stop();\n    };\n    PendingAutoAction.prototype.discard = function () {\n        this.lifeCycle.notify(LifeCycleEventType.AUTO_ACTION_DISCARDED);\n        this.eventCountsSubscription.stop();\n    };\n    return PendingAutoAction;\n}());\n//# sourceMappingURL=trackActions.js.map"]},"metadata":{},"sourceType":"module"}