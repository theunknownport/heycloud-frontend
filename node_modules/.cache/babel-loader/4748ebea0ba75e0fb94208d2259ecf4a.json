{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (name, prename, email, password, phone) => dispatch => {\n  return AuthService.register(name, prename, email, password, phone).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Registering User failed. Make sure the email and phone number aren't allready registered!\";\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Login Failed\";\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const verify = (phone, code) => dispatch => {\n  return AuthService.verify(phone, code).then(data => {\n    dispatch({\n      type: VERIFY_SUCCESS\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Verify Failed. Make sure to enter the right code!\";\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/home/finn/Documents/heycloud-frontend/heycloud-frontend/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","name","prename","email","password","phone","dispatch","then","response","type","payload","data","message","Promise","resolve","error","reject","login","user","logout","verify","code","VERIFY_SUCCESS"],"mappings":"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","sourcesContent":["import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (name, prename, email, password, phone) => (dispatch) => {\n  return AuthService.register(name, prename, email, password, phone).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Registering User failed. Make sure the email and phone number aren't allready registered!\"\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Login Failed\"\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\nexport const verify = (phone, code) => (dispatch) => {\n  return AuthService.verify(phone, code).then(\n    (data) => {\n      dispatch({\n        type: VERIFY_SUCCESS,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Verify Failed. Make sure to enter the right code!\"\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}