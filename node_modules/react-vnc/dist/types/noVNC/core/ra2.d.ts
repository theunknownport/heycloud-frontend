export class AESEAXCipher {
    _rawKey: any;
    _ctrKey: CryptoKey | null;
    _cbcKey: CryptoKey | null;
    _zeroBlock: Uint8Array;
    _prefixBlock0: Uint8Array;
    _prefixBlock1: Uint8Array;
    _prefixBlock2: Uint8Array;
    _encryptBlock(block: any): Promise<Uint8Array>;
    _initCMAC(): Promise<void>;
    _k1: Uint8Array | undefined;
    _k2: Uint8Array | undefined;
    _encryptCTR(data: any, counter: any): Promise<Uint8Array>;
    _decryptCTR(data: any, counter: any): Promise<Uint8Array>;
    _computeCMAC(data: any, prefixBlock: any): Promise<any>;
    setKey(key: any): Promise<void>;
    encrypt(message: any, associatedData: any, nonce: any): Promise<Uint8Array>;
    decrypt(encrypted: any, associatedData: any, nonce: any, mac: any): Promise<Uint8Array | null>;
}
export class RA2Cipher {
    _cipher: AESEAXCipher;
    _counter: Uint8Array;
    setKey(key: any): Promise<void>;
    makeMessage(message: any): Promise<Uint8Array>;
    receiveMessage(length: any, encrypted: any, mac: any): Promise<Uint8Array | null>;
}
export class RSACipher {
    constructor(keyLength: any);
    _key: CryptoKeyPair | null;
    _keyLength: any;
    _keyBytes: number;
    _n: Uint8Array | null;
    _e: Uint8Array | null;
    _d: Uint8Array | null;
    _nBigInt: bigint | null;
    _eBigInt: bigint | null;
    _dBigInt: bigint | null;
    _base64urlDecode(data: any): any[];
    _u8ArrayToBigInt(arr: any): bigint;
    _padArray(arr: any, length: any): Uint8Array;
    _bigIntToU8Array(bigint: any, padLength?: number): Uint8Array;
    _modPow(b: any, e: any, m: any): bigint | 0;
    generateKey(): Promise<void>;
    setPublicKey(n: any, e: any): void;
    encrypt(message: any): Uint8Array | null;
    decrypt(message: any): Uint8Array | null;
    get keyLength(): any;
    get n(): Uint8Array | null;
    get e(): Uint8Array | null;
    get d(): Uint8Array | null;
}
export default class RSAAESAuthenticationState extends EventTargetMixin {
    constructor(sock: any, getCredentials: any);
    _hasStarted: boolean;
    _checkSock: any;
    _checkCredentials: any;
    _approveServerResolve: ((value: any) => void) | null;
    _sockReject: ((reason?: any) => void) | null;
    _credentialsReject: ((reason?: any) => void) | null;
    _approveServerReject: ((reason?: any) => void) | null;
    _sock: any;
    _getCredentials: any;
    _waitSockAsync(len: any): Promise<any>;
    _waitApproveKeyAsync(): Promise<any>;
    _waitCredentialsAsync(subtype: any): Promise<any>;
    checkInternalEvents(): void;
    approveServer(): void;
    disconnect(): void;
    negotiateRA2neAuthAsync(): Promise<void>;
    set hasStarted(arg: boolean);
    get hasStarted(): boolean;
}
import EventTargetMixin from "./util/eventtarget.js";
