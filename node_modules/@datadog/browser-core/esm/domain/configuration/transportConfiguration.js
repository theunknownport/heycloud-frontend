import { __assign } from "tslib";
import { BuildMode } from '../../boot/init';
import { objectValues } from '../../tools/utils';
import { createEndpointBuilder, INTAKE_SITE_US } from './endpointBuilder';
export function computeTransportConfiguration(initConfiguration, buildEnv) {
    var endpointBuilders = {
        logsEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'logs'),
        rumEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'rum'),
        sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, buildEnv, 'sessionReplay'),
    };
    var intakeEndpoints = objectValues(endpointBuilders).map(function (builder) { return builder.buildIntakeUrl(); });
    var configuration = __assign({ isIntakeUrl: function (url) { return intakeEndpoints.some(function (intakeEndpoint) { return url.indexOf(intakeEndpoint) === 0; }); } }, endpointBuilders);
    if (initConfiguration.internalMonitoringApiKey) {
        configuration.internalMonitoringEndpointBuilder = createEndpointBuilder(initConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring');
    }
    if (buildEnv.buildMode === BuildMode.E2E_TEST) {
        var e2eEndpointBuilder = function (placeholder) { return ({ build: function () { return placeholder; } }); };
        configuration.internalMonitoringEndpointBuilder = e2eEndpointBuilder('<<< E2E INTERNAL MONITORING ENDPOINT >>>');
        configuration.logsEndpointBuilder = e2eEndpointBuilder('<<< E2E LOGS ENDPOINT >>>');
        configuration.rumEndpointBuilder = e2eEndpointBuilder('<<< E2E RUM ENDPOINT >>>');
        configuration.sessionReplayEndpointBuilder = e2eEndpointBuilder('<<< E2E SESSION REPLAY ENDPOINT >>>');
    }
    if (buildEnv.buildMode === BuildMode.STAGING && initConfiguration.replica !== undefined) {
        var replicaConfiguration = __assign(__assign({}, initConfiguration), { site: INTAKE_SITE_US, applicationId: initConfiguration.replica.applicationId, clientToken: initConfiguration.replica.clientToken, useAlternateIntakeDomains: true, intakeApiVersion: 2 });
        var replicaEndpointBuilders = {
            logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs'),
            rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'rum'),
            internalMonitoringEndpointBuilder: createEndpointBuilder(replicaConfiguration, buildEnv, 'logs', 'browser-agent-internal-monitoring'),
        };
        configuration.replica = __assign({ applicationId: initConfiguration.replica.applicationId }, replicaEndpointBuilders);
        var replicaIntakeEndpoints = objectValues(replicaEndpointBuilders).map(function (builder) {
            return builder.buildIntakeUrl();
        });
        intakeEndpoints.push.apply(intakeEndpoints, replicaIntakeEndpoints);
    }
    return configuration;
}
//# sourceMappingURL=transportConfiguration.js.map