import { BuildEnv } from '../../boot/init';
import { CookieOptions } from '../../browser/cookie';
import { TransportConfiguration } from './transportConfiguration';
export declare const DefaultPrivacyLevel: {
    readonly ALLOW: "allow";
    readonly MASK: "mask";
    readonly MASK_USER_INPUT: "mask-user-input";
};
export declare type DefaultPrivacyLevel = typeof DefaultPrivacyLevel[keyof typeof DefaultPrivacyLevel];
export declare const DEFAULT_CONFIGURATION: {
    allowedTracingOrigins: (string | RegExp)[];
    maxErrorsPerMinute: number;
    maxActionsPerMinute: number;
    maxInternalMonitoringMessagesPerPage: number;
    sampleRate: number;
    replaySampleRate: number;
    silentMultipleInit: boolean;
    trackInteractions: boolean;
    trackViewsManually: boolean;
    defaultPrivacyLevel: DefaultPrivacyLevel;
    /**
     * arbitrary value, byte precision not needed
     */
    requestErrorResponseLengthLimit: number;
    /**
     * flush automatically, aim to be lower than ALB connection timeout
     * to maximize connection reuse.
     */
    flushTimeout: number;
    /**
     * Logs intake limit
     */
    maxBatchSize: number;
    maxMessageSize: number;
    /**
     * beacon payload max queue size implementation is 64kb
     * ensure that we leave room for logs, rum and potential other users
     */
    batchBytesLimit: number;
};
export interface InitConfiguration {
    clientToken: string;
    applicationId?: string | undefined;
    actionNameAttribute?: string | undefined;
    internalMonitoringApiKey?: string | undefined;
    allowedTracingOrigins?: Array<string | RegExp> | undefined;
    sampleRate?: number | undefined;
    replaySampleRate?: number | undefined;
    site?: string | undefined;
    enableExperimentalFeatures?: string[] | undefined;
    silentMultipleInit?: boolean | undefined;
    trackInteractions?: boolean | undefined;
    trackViewsManually?: boolean | undefined;
    /**
     * @deprecated Favor proxyUrl option
     */
    proxyHost?: string | undefined;
    proxyUrl?: string | undefined;
    beforeSend?: BeforeSendCallback | undefined;
    defaultPrivacyLevel?: DefaultPrivacyLevel | undefined;
    service?: string | undefined;
    env?: string | undefined;
    version?: string | undefined;
    useAlternateIntakeDomains?: boolean | undefined;
    intakeApiVersion?: 1 | 2 | undefined;
    useCrossSiteSessionCookie?: boolean | undefined;
    useSecureSessionCookie?: boolean | undefined;
    trackSessionAcrossSubdomains?: boolean | undefined;
    replica?: ReplicaUserConfiguration | undefined;
}
export declare type BeforeSendCallback = (event: any, context?: any) => unknown;
interface ReplicaUserConfiguration {
    applicationId?: string;
    clientToken: string;
}
export declare type Configuration = typeof DEFAULT_CONFIGURATION & TransportConfiguration & {
    cookieOptions: CookieOptions;
    service?: string;
    beforeSend?: BeforeSendCallback;
    actionNameAttribute?: string;
};
export declare function buildConfiguration(initConfiguration: InitConfiguration, buildEnv: BuildEnv): Configuration;
export declare function buildCookieOptions(initConfiguration: InitConfiguration): CookieOptions;
export {};
