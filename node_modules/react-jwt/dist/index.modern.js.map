{"version":3,"file":"index.modern.js","sources":["../src/jwt/index.ts","../src/hooks/index.tsx"],"sourcesContent":["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken(token: string): Object | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // handle unicode parsing issues between atob and JWT base64 format\n    const base64: string = payload.replace(\"-\", \"+\").replace(\"_\", \"/\");\n    // decode and parse to json\n    const decoded = JSON.parse(atob(base64));\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt(userJwt: string): IUseJwt {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt {\n  isExpired: boolean;\n  decodedToken: Object;\n  reEvaluateToken: (token: string) => void;\n}\n"],"names":["decodeToken","token","split","length","payload","base64","replace","decoded","JSON","parse","atob","error","isTokenExpired","decodedToken","result","exp","expirationDate","Date","setUTCSeconds","valueOf","useJwt","userJwt","useState","isExpired","setIsExpired","setDecodedToken","useEffect","evaluateToken","reEvaluateToken"],"mappings":";;SAKgBA,YAAYC;AAC1B,MAAI;AAGF,QAAIA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,MAAjB,KAA4B,CAA5B,IAAiC,OAAOF,KAAP,KAAiB,QAAtD,EAAgE;AAC9D,aAAO,IAAP;AACD;;AAID,QAAMG,OAAO,GAAWH,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAxB;AAEA,QAAMG,MAAM,GAAWD,OAAO,CAACE,OAAR,CAAgB,GAAhB,EAAqB,GAArB,EAA0BA,OAA1B,CAAkC,GAAlC,EAAuC,GAAvC,CAAvB;AAEA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,MAAD,CAAf,CAAhB;AAEA,WAAOE,OAAP;AACD,GAhBD,CAgBE,OAAOI,KAAP,EAAc;AAEd,WAAO,IAAP;AACD;AACF;SAOeC,eAAeX;AAC7B,MAAMY,YAAY,GAAQb,WAAW,CAACC,KAAD,CAArC;AACA,MAAIa,MAAM,GAAY,IAAtB;;AAEA,MAAID,YAAY,IAAIA,YAAY,CAACE,GAAjC,EAAsC;AACpC,QAAMC,cAAc,GAAS,IAAIC,IAAJ,CAAS,CAAT,CAA7B;AACAD,IAAAA,cAAc,CAACE,aAAf,CAA6BL,YAAY,CAACE,GAA1C;AAEAD,IAAAA,MAAM,GAAGE,cAAc,CAACG,OAAf,KAA2B,IAAIF,IAAJ,GAAWE,OAAX,EAApC;AACD;;AAED,SAAOL,MAAP;AACD;;SCrCeM,OAAOC;kBACaC,QAAQ,CAAU,KAAV;MAAnCC;MAAWC;;mBACsBF,QAAQ,CAAM,IAAN;MAAzCT;MAAcY;;AAErBC,EAAAA,SAAS,CAAC;AACRC,IAAAA,aAAa,CAACN,OAAD,CAAb;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAC1B,KAAD;AACpBwB,IAAAA,eAAe,CAACzB,WAAW,CAACC,KAAD,CAAZ,CAAf;AACAuB,IAAAA,YAAY,CAACZ,cAAc,CAACX,KAAD,CAAf,CAAZ;AACD,GAHD;;AAKA,SAAO;AAAEsB,IAAAA,SAAS,EAATA,SAAF;AAAaV,IAAAA,YAAY,EAAZA,YAAb;AAA2Be,IAAAA,eAAe,EAAED;AAA5C,GAAP;AACD;;;;"}