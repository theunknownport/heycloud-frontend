import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ButtonProps } from '@progress/kendo-react-buttons';
/**
 * @hidden
 */
export interface TabStripNavigationStateProps {
    disabledPrev: boolean;
    disabledNext: boolean;
}
/**
 * The props that are passed to the TabStripNavigation by the TabStrip.
 */
export interface TabStripNavigationProps {
    /**
     * Sets the index of the selected tab. Controlled by the TabStrip component.
     */
    selected?: number;
    /**
     * @hidden
     */
    tabIndex?: number;
    /**
     * @hidden
     */
    onKeyDown?: any;
    /**
     * @hidden
     */
    tabPosition?: string;
    /**
     * @hidden
     */
    children?: any;
    /**
     * @hidden
     */
    onSelect?(idx: number): void;
    /**
     * @hidden
     */
    scrollable?: boolean;
    /**
     * @hidden
     */
    buttonScrollSpeed?: number;
    /**
     * @hidden
     */
    mouseScrollSpeed?: number;
    /**
     * @hidden
     */
    prevButton?: React.ComponentType<ButtonProps>;
    /**
     * @hidden
     */
    nextButton?: React.ComponentType<ButtonProps>;
}
export declare class TabStripNavigation extends React.Component<TabStripNavigationProps, TabStripNavigationStateProps, {}> {
    private itemsNavRef;
    constructor(props: TabStripNavigationProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: Readonly<TabStripNavigationProps>): void;
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<NonNullable<PropTypes.ReactElementLike | (PropTypes.ReactElementLike | null | undefined)[] | null | undefined>>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        selected: PropTypes.Requireable<number>;
        tabIndex: PropTypes.Requireable<number>;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
    private scrollToSelected;
    private horizontalScroll;
    private onWheel;
    private arrowClickPrev;
    private arrowClickNext;
    private handleArrowClick;
    private setNewScrollPosition;
    private renderArrow;
}
