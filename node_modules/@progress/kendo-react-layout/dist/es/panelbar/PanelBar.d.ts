import * as React from 'react';
import * as PropTypes from 'prop-types';
import { PanelBarProps } from '../main';
import { PanelBarItemClickEventArguments } from './interfaces/PanelBarItemClickEventArguments';
import { NavigationAction } from './interfaces/NavigationAction';
/**
 * @hidden
 */
export interface PanelBarState {
    focused?: string;
    wrapperFocused?: boolean;
    selected?: string;
    expanded: string[];
}
export declare class PanelBar extends React.Component<PanelBarProps, PanelBarState> {
    /**
     * @hidden
     */
    static propTypes: {
        animation: PropTypes.Requireable<boolean>;
        children: (props: PanelBarProps, propName: any) => Error | null | undefined;
        dir: PropTypes.Requireable<string>;
        selected: PropTypes.Requireable<string>;
        expanded: PropTypes.Requireable<(string | null | undefined)[]>;
        focused: PropTypes.Requireable<string>;
        expandMode: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        keepItemsMounted: PropTypes.Requireable<boolean>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<object>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        expandMode: string;
        animation: boolean;
        keepItemsMounted: boolean;
    };
    /**
     * @hidden
     */
    readonly state: PanelBarState;
    private activeDescendant?;
    private _element;
    private nextTickId;
    private get expandMode();
    private get selectedItem();
    private get expandedItems();
    private get children();
    constructor(props: PanelBarProps);
    /**
     * @hidden
     */
    handleSelect: (event: PanelBarItemClickEventArguments) => void;
    /**
     * @hidden
     */
    onSelect: (event: any) => void;
    /**
     * @hidden
     */
    onFocus: (event: any, step?: number) => void;
    /**
     * @hidden
     */
    onNavigate: (event: any, action: NavigationAction) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected nextTick(f: () => any): void;
    private handleWrapperFocus;
    private handleWrapperBlur;
    private handleKeyDown;
}
