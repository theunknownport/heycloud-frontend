import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, getTabIndex, useRtl, validatePackage, dispatchEvent, Keys, useAsyncFocusBlur, Icon } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
/**
 * Represents the [KendoReact ExpansionPanel component]({% slug overview_expansionpanel %}).
 */
export var ExpansionPanel = React.forwardRef(function (props, target) {
    var _a, _b;
    validatePackage(packageMetadata);
    var elementRef = React.useRef(null);
    var _c = React.useState(false), focused = _c[0], setFocused = _c[1];
    var getImperativeHandle = React.useCallback(function () { return ({ element: elementRef.current }); }, []);
    React.useImperativeHandle(target, getImperativeHandle);
    var _d = props.expanded, expanded = _d === void 0 ? false : _d, disabled = props.disabled, title = props.title, subtitle = props.subtitle, onAction = props.onAction, expandIcon = props.expandIcon, collapseIcon = props.collapseIcon;
    var onClick = React.useCallback(function (event) {
        dispatchEvent(onAction, event, getImperativeHandle(), { expanded: expanded });
    }, [onAction, expanded]);
    var onKeyDown = React.useCallback(function (event) {
        if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {
            event.preventDefault();
            dispatchEvent(onAction, event, getImperativeHandle(), { expanded: expanded });
        }
    }, [onAction, expanded]);
    var handleFocus = React.useCallback(function () {
        if (props.disabled) {
            return;
        }
        setFocused(true);
    }, [props.disabled]);
    var handleBlur = React.useCallback(function () {
        if (props.disabled) {
            return;
        }
        setFocused(false);
    }, [props.disabled]);
    var _e = useAsyncFocusBlur({ onFocus: handleFocus, onBlur: handleBlur }), onFocus = _e.onFocus, onBlur = _e.onBlur;
    return (React.createElement("div", { ref: elementRef, className: classNames('k-expander', props.className, {
            'k-expanded': expanded,
            'k-focus': focused && !disabled,
            'k-disabled': disabled
        }), onFocus: onFocus, onBlur: onBlur, style: props.style, id: props.id, dir: useRtl(elementRef, props.dir), onKeyDown: disabled ? undefined : onKeyDown },
        React.createElement("div", { role: 'button', "aria-controls": props.ariaControls, "aria-expanded": expanded, "aria-disabled": disabled, tabIndex: getTabIndex(props.tabIndex, disabled), className: "k-expander-header", onClick: disabled ? undefined : onClick },
            title !== undefined ? React.createElement("div", { className: "k-expander-title" }, title) : undefined,
            React.createElement("span", { className: "k-spacer" }),
            subtitle !== undefined ? React.createElement("div", { className: "k-expander-sub-title" }, subtitle) : undefined,
            React.createElement("span", { className: "k-expander-indicator" },
                React.createElement(Icon, { name: !expanded
                        ? !expandIcon ? 'chevron-down' : undefined
                        : !collapseIcon ? 'chevron-up' : undefined, className: classNames(expanded
                        ? (_a = {},
                            _a[String(collapseIcon)] = Boolean(collapseIcon),
                            _a) : (_b = {},
                        _b[String(expandIcon)] = Boolean(expandIcon),
                        _b)) }))),
        props.children));
});
ExpansionPanel.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    style: PropTypes.object,
    dir: PropTypes.string,
    id: PropTypes.string,
    tabIndex: PropTypes.number,
    title: PropTypes.node,
    subtitle: PropTypes.node,
    expandIcon: PropTypes.string,
    collapseIcon: PropTypes.string,
    expanded: PropTypes.bool,
    disabled: PropTypes.bool,
    onAction: PropTypes.func
};
ExpansionPanel.displayName = 'KendoReactExpansionPanel';
