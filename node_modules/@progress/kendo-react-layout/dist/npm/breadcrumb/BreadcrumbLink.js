"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BreadcrumbLink = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_licensing_1 = require("@progress/kendo-licensing");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
exports.BreadcrumbLink = React.forwardRef(function (props, ref) {
    (0, kendo_licensing_1.validatePackage)(package_metadata_1.packageMetadata);
    var target = React.useRef(null);
    var linkRef = React.useRef(null);
    var focus = React.useCallback(function () {
        if (linkRef.current) {
            linkRef.current.focus();
        }
    }, [linkRef]);
    React.useImperativeHandle(target, function () { return ({
        element: linkRef.current,
        focus: focus,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleItemSelect = React.useCallback(function (event) {
        if (props.id) {
            (0, kendo_react_common_1.dispatchEvent)(props.onItemSelect, event, event.target, { id: props.id });
        }
    }, [props.onItemSelect]);
    var handleKeyDown = React.useCallback(function (event) {
        if (props.id) {
            (0, kendo_react_common_1.dispatchEvent)(props.onKeyDown, event, event.target, { id: props.id });
        }
    }, [props.onKeyDown]);
    return (React.createElement("span", { "aria-current": props.ariaCurrent ? props.ariaCurrent : props.isLast, id: props.id, ref: linkRef, style: props.style, dir: (0, kendo_react_common_1.useDir)(linkRef, props.dir), tabIndex: (0, kendo_react_common_1.getTabIndex)(props.tabIndex, props.disabled), className: (0, kendo_react_common_1.classNames)('k-cursor-pointer k-flex-none k-breadcrumb-link k-breadcrumb-icontext-link', {
            'k-disabled': props.disabled
        }), onClick: handleItemSelect, onKeyDown: handleKeyDown },
        props.iconClass
            ?
                React.createElement("span", { className: (0, kendo_react_common_1.classNames)('k-icon', props.iconClass) })
            : props.icon ? props.icon : '',
        props.text));
});
var propTypes = {
    id: PropTypes.string,
    className: PropTypes.string,
    tabIndex: PropTypes.number,
    style: PropTypes.object,
    dir: PropTypes.string,
    disabled: PropTypes.bool,
    text: PropTypes.string,
    icon: PropTypes.node,
    iconClass: PropTypes.string,
    onClick: PropTypes.func,
    ariaCurrent: PropTypes.bool
};
exports.BreadcrumbLink.displayName = 'KendoReactBreadcrumbLink';
// TODO: delete casting when @types/react is updated!
exports.BreadcrumbLink.propTypes = propTypes;
