import * as React from 'react';
import { GroupedFiles } from './interfaces/FileGroup';
import { UploadAsyncProps } from './interfaces/UploadAsyncProps';
import { UploadListItemProps } from './interfaces/UploadListItemProps';
import { UploadSelectMessageProps } from './interfaces/UploadSelectMessageProps';
/**
 * @hidden
 */
export interface UploadUIProps extends UploadAsyncProps {
    className?: string;
    multiple?: boolean;
    disabled?: boolean;
    showFileList?: boolean;
    showActionButtons?: boolean;
    actionsLayout?: string;
    tabIndex?: number;
    accept?: string;
    groupedFiles: GroupedFiles;
    navigationIndex?: number;
    notFocusedIndex?: number;
    listItemUI?: React.ComponentType<UploadListItemProps>;
    selectMessageUI?: React.ComponentType<UploadSelectMessageProps>;
    id?: string;
    ariaLabelledBy?: string;
    ariaDescribedBy?: string;
    onAdd?: (files: FileList) => void;
    onCancel?: (uid: string) => void;
    onRemove?: (uid: string) => void;
    onRetry?: (uid: string) => void;
    onUpload?: () => void;
    onClear?: () => void;
    onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
    onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
    onKeyDown?: (event: React.KeyboardEvent, isRtl: boolean) => void;
    onClick?: (navIndex: number) => void;
}
/**
 * @hidden
 */
export declare class UploadUI extends React.Component<UploadUIProps, {}> {
    static defaultProps: UploadUIProps;
    private _container;
    private _uploadAddButton;
    private get async();
    private get groupsCount();
    private get lastGroupIndex();
    private get addButtonIndex();
    private get clearButtonIndex();
    private get uploadButtonIndex();
    private get isRtl();
    /**
     * @hidden
     */
    get actionElement(): HTMLInputElement | null | undefined;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    onAdd: (files: FileList) => void;
    /**
     * @hidden
     */
    onRetry: (uid: string) => void;
    /**
     * @hidden
     */
    onCancel: (uid: string) => void;
    /**
     * @hidden
     */
    onClear: () => void;
    /**
     * @hidden
     */
    onUpload: () => void;
    /**
     * @hidden
     */
    onRemove: (uid: string) => void;
    /**
     * @hidden
     */
    onKeyDown: (event: React.KeyboardEvent) => void;
    /**
     * @hidden
     */
    onFocus: (event: React.FocusEvent<HTMLDivElement>) => void;
    /**
     * @hidden
     */
    onBlur: (event: React.FocusEvent<HTMLDivElement>) => void;
    /**
     * @hidden
     */
    onClick: (navIndex: number | undefined) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
}
