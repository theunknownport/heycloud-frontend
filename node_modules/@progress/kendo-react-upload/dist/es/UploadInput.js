var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';
import * as React from 'react';
import { selectTitle, selectNoFilesTitle, select, messages } from './messages';
var CHROME_REGEX = /(chrome)[ \/]([\w.]+)/i;
var SAFARI_REGEX = /(webkit)[ \/]([\w.]+)/i;
/**
 * @hidden
 */
var UploadInput = /** @class */ (function (_super) {
    __extends(UploadInput, _super);
    function UploadInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._input = null;
        _this.onMouseDown = function (e) {
            if (_this.props.onMouseDown) {
                _this.props.onMouseDown(e);
            }
        };
        _this.onAdd = function () {
            var ua = navigator.userAgent;
            var input = _this._input;
            if (input) {
                if (_this.props.onAdd && input.files) {
                    _this.props.onAdd.call(undefined, input.files);
                }
                /*
                    Chrome and Internet Explorer do not trigger a `change` event
                    when a file with the same name is selected a number of consecutive times.
                    As a workaround, clear the input value after handling the file.
                */
                if (!(!ua.match(CHROME_REGEX) && ua.match(SAFARI_REGEX))) {
                    input.type = '';
                    input.type = 'file';
                }
            }
        };
        return _this;
    }
    Object.defineProperty(UploadInput.prototype, "actionElement", {
        get: function () {
            return this._input;
        },
        enumerable: false,
        configurable: true
    });
    UploadInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, multiple = _a.multiple, async = _a.async, disabled = _a.disabled, accept = _a.accept, hasFiles = _a.hasFiles, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy;
        var localizationService = provideLocalizationService(this);
        var message = hasFiles ? selectTitle : selectNoFilesTitle;
        var selectMessage = localizationService.toLanguageString(message, messages[message]);
        var selectLabel = localizationService.toLanguageString(select, messages[select]);
        return (React.createElement("input", { ref: function (ref) { return _this._input = ref; }, autoComplete: 'off', name: async.saveField, accept: accept, type: 'file', multiple: multiple, disabled: disabled, onChange: this.onAdd, onMouseDown: this.onMouseDown, title: selectMessage, "aria-label": (ariaLabelledBy !== undefined) ? undefined : selectLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }));
    };
    return UploadInput;
}(React.Component));
export { UploadInput };
registerForLocalization(UploadInput);
