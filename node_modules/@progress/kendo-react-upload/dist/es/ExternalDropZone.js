import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, getTabIndex } from '@progress/kendo-react-common';
import { IntlService, useLocalization } from '@progress/kendo-react-intl';
import { dropZoneHint, dropZoneNote, restrictionsDropZoneNote, messages } from './messages';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from './package-metadata';
/**
 * @hidden
 */
var TIME_TO_CHECK_DRAG = 100;
/**
 * Represents the ExternalDropZone component.
 */
export var ExternalDropZone = React.forwardRef(function (props, ref) {
    validatePackage(packageMetadata);
    var target = React.useRef(null);
    var externalDropZoneRef = React.useRef(null);
    var intervalRef = React.useRef(null);
    var isActiveRef = React.useRef(false);
    var lastElementRef = React.useRef(null);
    var uploadRef = props.uploadRef;
    var currentUploadRef = uploadRef.current;
    var _a = React.useState(false), overDropZone = _a[0], setOverDropZone = _a[1];
    var intlService = React.useMemo(function () { return new IntlService('en'); }, []);
    var localization = useLocalization();
    var localizedHint = localization.toLanguageString(dropZoneHint, messages[dropZoneHint]);
    var _b = React.useState(localization.toLanguageString(dropZoneNote, messages[dropZoneNote])), localizedNote = _b[0], setLocalizedNote = _b[1];
    var hintElement = props.customHint || React.createElement("span", null, localizedHint);
    var noteElement = props.customNote || React.createElement("span", null, localizedNote);
    var focus = React.useCallback(function () {
        if (externalDropZoneRef.current) {
            externalDropZoneRef.current.focus();
        }
    }, [externalDropZoneRef]);
    React.useImperativeHandle(target, function () { return ({
        element: externalDropZoneRef.current,
        focus: focus,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    React.useEffect(function () {
        if (currentUploadRef) {
            var allowedExtensions = currentUploadRef.props.restrictions.allowedExtensions;
            if (allowedExtensions && allowedExtensions.length) {
                var noteWithExtensions = intlService.format(localization.toLanguageString(restrictionsDropZoneNote, messages[restrictionsDropZoneNote]), [
                    allowedExtensions
                ]);
                setLocalizedNote(noteWithExtensions);
            }
        }
    }, [currentUploadRef, localization, intlService]);
    var isDragOver = React.useCallback(function (prevDate) {
        return (new Date().getTime() - (prevDate || new Date()).getTime()) > TIME_TO_CHECK_DRAG;
    }, []);
    var handleOnDrop = React.useCallback(function (event) {
        event.preventDefault();
        var droppedFiles = event.dataTransfer.files;
        if (droppedFiles.length > 0 && !props.disabled && uploadRef && uploadRef.current) {
            if (uploadRef.current.onAdd) {
                event.preventDefault();
                uploadRef.current.onAdd(droppedFiles);
            }
        }
    }, [props.disabled, uploadRef]);
    var handleOnElementDragEnter = React.useCallback(function () {
        if (isActiveRef) {
            isActiveRef.current = true;
            var locElementInterval = function () {
                if (isDragOver(lastElementRef.current)) {
                    setOverDropZone(false);
                    isActiveRef.current = false;
                    clearInterval(intervalRef.current);
                    intervalRef.current = null;
                    lastElementRef.current = null;
                }
            };
            intervalRef.current = setInterval(locElementInterval, TIME_TO_CHECK_DRAG);
        }
    }, [isActiveRef, intervalRef, lastElementRef, isDragOver]);
    var handleOnElementDragOver = React.useCallback(function (event) {
        event.preventDefault();
        lastElementRef.current = new Date();
        setOverDropZone(true);
    }, [lastElementRef]);
    return (React.createElement("div", { ref: externalDropZoneRef, id: props.id, className: classNames('k-external-dropzone', {
            'k-external-dropzone-hover': overDropZone,
            'k-disabled': props.disabled
        }, props.className), tabIndex: getTabIndex(props.tabIndex, props.disabled, undefined), onDrop: handleOnDrop, onDragEnter: handleOnElementDragEnter, onDragOver: handleOnElementDragOver },
        React.createElement("div", { style: props.style, className: 'k-dropzone-inner' },
            React.createElement("span", { className: 'k-icon k-i-upload' }),
            React.createElement("span", { className: 'k-dropzone-hint' }, hintElement),
            React.createElement("span", { className: 'k-dropzone-note' }, noteElement))));
});
var propTypes = {
    id: PropTypes.string,
    tabIndex: PropTypes.number,
    editorRef: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.shape({ current: PropTypes.any })
    ]),
    disabled: PropTypes.bool
};
ExternalDropZone.displayName = 'KendoReactExternalDropZone';
ExternalDropZone.propTypes = propTypes;
