"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBar = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_animation_1 = require("@progress/kendo-react-animation");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var utils_1 = require("../common/utils");
var usePrevious_1 = require("./hooks/usePrevious");
var constants_1 = require("../common/constants");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
/**
 * Represents the [KendoReact ProgressBar component]({% slug overview_progressbar %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <ProgressBar value={75}/>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.ProgressBar = React.forwardRef(function (props, target) {
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var animation = props.animation, disabled = props.disabled, _a = props.reverse, reverse = _a === void 0 ? defaultProps.reverse : _a, orientation = props.orientation, labelVisible = props.labelVisible, labelPlacement = props.labelPlacement, _b = props.max, max = _b === void 0 ? defaultProps.max : _b, _c = props.min, min = _c === void 0 ? defaultProps.min : _c, tabIndex = props.tabIndex, className = props.className, style = props.style, emptyStyle = props.emptyStyle, emptyClassName = props.emptyClassName, progressStyle = props.progressStyle, progressClassName = props.progressClassName;
    var elementRef = React.useRef(null);
    var progressStatusRef = React.useRef(null);
    var progressStatusWrapRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef.current,
        progressStatusElement: progressStatusRef.current,
        progressStatusWrapElement: progressStatusWrapRef.current,
        focus: focusElement
    }); });
    var value = (props.value || defaultProps.value);
    var prevValue = (0, usePrevious_1.usePrevious)(value);
    var indeterminateProp = props.value === null;
    var dir = (0, kendo_react_common_1.useRtl)(elementRef, props.dir);
    var isVertical = orientation === 'vertical';
    var formattedLabel = (0, utils_1.truncateNumber)(value);
    var labelProps = {
        value: value
    };
    var renderLabel = (labelVisible
        ? props.label
            ? React.createElement("span", { className: 'k-progress-status' },
                React.createElement(props.label, __assign({}, labelProps)))
            : React.createElement("span", { className: 'k-progress-status' }, formattedLabel)
        : undefined);
    var wrapperProps = {
        className: (0, kendo_react_common_1.classNames)('k-widget k-progressbar', {
            'k-progressbar-horizontal': !isVertical,
            'k-progressbar-vertical': isVertical,
            'k-progressbar-reverse': reverse,
            'k-progressbar-indeterminate': indeterminateProp,
            'k-disabled': disabled
        }, className),
        ref: elementRef,
        dir: dir,
        tabIndex: (0, kendo_react_common_1.getTabIndex)(tabIndex, disabled),
        role: 'progressbar',
        'aria-label': props.ariaLabel,
        'aria-valuemin': min,
        'aria-valuemax': max,
        'aria-valuenow': indeterminateProp ? undefined : value,
        'aria-disabled': disabled,
        style: style
    };
    var positionClasses = (0, kendo_react_common_1.classNames)('k-progress-status-wrap', {
        'k-progress-start': labelPlacement === 'start',
        'k-progress-center': labelPlacement === 'center',
        'k-progress-end': labelPlacement === 'end' || labelPlacement === undefined
    });
    var animationDuration = typeof animation !== 'boolean' && animation !== undefined
        ? animation.duration
        : animation
            ? constants_1.DEFAULT_ANIMATION_DURATION
            : constants_1.NO_ANIMATION;
    var handleStart = React.useCallback(function () {
        var percentage = (0, utils_1.calculatePercentage)(min, max, prevValue);
        (0, utils_1.updateProgress)(progressStatusRef, progressStatusWrapRef, percentage, isVertical);
    }, [isVertical, max, min, prevValue]);
    var handleUpdate = React.useCallback(function (progress) {
        var percentage = (0, utils_1.calculatePercentage)(min, max, prevValue + (value - prevValue) * progress);
        (0, utils_1.updateProgress)(progressStatusRef, progressStatusWrapRef, percentage, isVertical);
    }, [min, max, prevValue, value, isVertical]);
    var handleEnd = React.useCallback(function () {
        var percentage = (0, utils_1.calculatePercentage)(min, max, value);
        (0, utils_1.updateProgress)(progressStatusRef, progressStatusWrapRef, percentage, isVertical);
    }, [isVertical, max, min, value]);
    (0, kendo_react_animation_1.useAnimation)({
        duration: animationDuration,
        onStart: handleStart,
        onUpdate: handleUpdate,
        onEnd: handleEnd
    }, [value, animationDuration]);
    return (React.createElement("div", __assign({}, wrapperProps),
        React.createElement("span", { className: positionClasses + (emptyClassName ? ' ' + emptyClassName : ''), style: emptyStyle }, renderLabel),
        React.createElement("div", { className: 'k-selected', style: progressStyle, ref: progressStatusRef },
            React.createElement("span", { className: positionClasses + (progressClassName ? ' ' + progressClassName : ''), ref: progressStatusWrapRef }, renderLabel))));
});
exports.ProgressBar.propTypes = {
    animation: PropTypes.any,
    ariaLabel: PropTypes.string,
    disabled: PropTypes.bool,
    reverse: PropTypes.bool,
    label: PropTypes.any,
    labelVisible: PropTypes.bool,
    labelPlacement: PropTypes.oneOf(['start', 'center', 'end']),
    max: PropTypes.number,
    min: PropTypes.number,
    value: PropTypes.number,
    tabIndex: PropTypes.number,
    emptyStyle: PropTypes.object,
    emptyClassName: PropTypes.string,
    progressStyle: PropTypes.object,
    progressClassName: PropTypes.string
};
var defaultProps = {
    animation: false,
    min: 0,
    max: 100,
    value: 0,
    disabled: false,
    reverse: false,
    labelVisible: true
};
exports.ProgressBar.defaultProps = defaultProps;
exports.ProgressBar.displayName = 'KendoProgressBar';
